package route

import (
	"context"
	"net/http"

	"github.com/evergreen-ci/evergreen/rest/data"
	"github.com/evergreen-ci/evergreen/rest/model"
	"github.com/evergreen-ci/gimlet"
)

// MethodHandler contains all of the methods necessary for completely processing
// an API request. It contains an Authenticator to control access to the method
// and a RequestHandler to perform the required work for the request.
type MethodHandler struct {
	// PrefetchFunctions is a list of functions to be run before the main request
	// is executed.
	PrefetchFunctions []PrefetchFunc
	// MethodType is the HTTP Method Type that this handler will handler.
	// POST, PUT, DELETE, etc.
	MethodType string

	Authenticator
	RequestHandler
}

// ResponseData holds the information that the handler function will need to form
// its encoded response. A ResponseData is generated by a RequestHandler's Execute
// function and parsed in the main handler method.
type ResponseData struct {
	// Result is the resulting API models that the API request needs to return
	// to the user, either because they were queried for or because they were
	// created by this request.
	Result []model.Model

	// Metadata is an interface that holds any additional data that the handler
	// will need for encoding the API response.
	Metadata interface{}
}

// RequestHandler is an interface that defines how to process an HTTP request
// against an API resource.
type RequestHandler interface {
	// Handler defines how to fetch a new version of this handler.
	Handler() RequestHandler

	// ParseAndValidate defines how to retrieve the needed parameters from the HTTP
	// request. All needed data should be retrieved during the parse function since
	// other functions do not have access to the HTTP request.
	ParseAndValidate(context.Context, *http.Request) error

	// Execute performs the necessary work on the evergreen backend and returns
	// an API model to be surfaced to the user.
	Execute(context.Context, data.Connector) (ResponseData, error)
}

// makeHandler makes an http.HandlerFunc that wraps calls to each of the api
// Method functions. It marshalls the response to JSON and writes it out to
// as the response. If any of the functions return an error, it handles creating
// a JSON error and sending it as the response.
func makeHandler(methodHandler MethodHandler, sc data.Connector) http.HandlerFunc {
	if methodHandler.Authenticator == nil {
		panic("methodHandler must define an authenticator")
	}
	return func(w http.ResponseWriter, r *http.Request) {
		var err error
		ctx := getBaseContext(r)

		for _, pf := range methodHandler.PrefetchFunctions {
			if ctx, err = pf(ctx, sc, r); err != nil {
				gimlet.WriteResponse(w, gimlet.MakeJSONInternalErrorResponder(err))
				return
			}
		}

		if err = methodHandler.Authenticate(ctx, sc); err != nil {
			gimlet.WriteResponse(w, gimlet.MakeJSONInternalErrorResponder(err))
			return
		}
		reqHandler := methodHandler.RequestHandler.Handler()

		if err = reqHandler.ParseAndValidate(ctx, r); err != nil {
			gimlet.WriteResponse(w, gimlet.MakeJSONInternalErrorResponder(err))
			return
		}
		result, err := reqHandler.Execute(ctx, sc)
		if err != nil {
			gimlet.WriteResponse(w, gimlet.MakeJSONInternalErrorResponder(err))

			return
		}

		if len(result.Result) == 1 {
			gimlet.WriteJSON(w, result.Result[0])
		} else {
			gimlet.WriteJSON(w, result.Result)
		}
	}
}
