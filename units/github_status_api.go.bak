package units

import (
	"fmt"

	"github.com/evergreen-ci/evergreen/model"
	"github.com/mongodb/amboy"
	"github.com/mongodb/amboy/job"
	"github.com/mongodb/amboy/registry"
	"github.com/mongodb/grip"
	"github.com/mongodb/grip/logging"
	"github.com/mongodb/grip/message"
	"github.com/pkg/errors"
)

const githubStatusUpdateJobName = "github-status-update"

func init() {
	registry.AddJobType(githubStatusUpdateJobName, func() amboy.Job { return makeGithubStatusUpdateJob() })
}

type githubStatusUpdateJob struct {
	job.Base `bson:"job_base" json:"job_base" yaml:"job_base"`
	logger   grip.Journaler

	GitHash string `bson:"git_hash" json:"git_hash" yaml:"git_hash"`
	Status  string `bson:"status" json:"status" yaml:"status"`
}

func makeGithubStatusUpdateJob() *githubStatusUpdateJob {
	return &restartTasksJob{
		logger: logging.MakeGrip(grip.GetSender()),
		Base: job.Base{
			JobType: amboy.JobType{
				Name:    githubStatusUpdateJobName,
				Version: 0,
				Format:  amboy.BSON,
			},
		},
	}
}

// NewTasksRestartJob creates a job to restart failed tasks in a time range
func NewTasksRestartJob(hash, id string) amboy.Job {
	job := makeTaskRestartJob()
	job.SetID(fmt.Sprintf("%s-%d-%d", githubStatusUpdateJobName, ))
	return job
}

func (j *restartTasksJob) Run() {
	defer j.MarkComplete()
	results, err := model.RestartFailedTasks(j.Opts)
	if err != nil {
		j.AddError(errors.Wrap(err, "error restarting failed tasks"))
		return
	}

	j.logger.Info(message.Fields{
		"message":         "tasks successfully restarted",
		"num":             len(results.TasksRestarted),
		"tasks_restarted": results.TasksRestarted,
		"tasks_errored":   results.TasksErrored,
		"user":            j.Opts.User,
		"start_at":        j.Opts.StartTime,
		"end_at":          j.Opts.EndTime,
	})
}
