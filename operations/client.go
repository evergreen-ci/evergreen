package operations

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/mongodb/grip"
	"github.com/pkg/errors"
	"github.com/urfave/cli"
)

func Client() cli.Command {
	return cli.Command{
		Name:  "client",
		Usage: "convenience methods for scripts which use client settings",
		Subcommands: []cli.Command{
			getUser(),
			getAPIKey(),
			getAPIUrl(),
			getUIUrl(),
			getJWTFromKanopy(),
			setJWTInConfig(),
		},
	}
}

// runKanopyOIDCLogin executes the kanopy-oidc login command and captures the JWT token from the output.
// It also displays output to the user in real-time while ensuring that the JWT token is not printed.
func runKanopyOIDCLogin() (string, error) {
	cmd := exec.Command("kanopy-oidc", "login", "-n", "-f", "device")

	stdout, err := cmd.StdoutPipe()
	if err != nil {
		return "", errors.Wrap(err, "creating stdout pipe")
	}

	cmd.Stderr = os.Stderr // Show stderr output directly to the user

	// Start the command
	if err := cmd.Start(); err != nil {
		return "", errors.Wrap(err, "starting kanopy-oidc login")
	}

	// Process the output - display non-token outputs and capture the token
	var tokenBuf bytes.Buffer
	scanner := bufio.NewScanner(stdout)

	for scanner.Scan() {
		line := scanner.Text()

		// Check if the line contains a JWT (usually starts with "ey")
		if len(line) > 30 && strings.HasPrefix(line, "ey") {
			// This is likely the JWT token - capture but don't display
			tokenBuf.WriteString(line)
		} else {
			// This is not a JWT token - display to the user
			fmt.Println(line)
		}
	}

	// Wait for command to complete
	if err := cmd.Wait(); err != nil {
		return "", errors.Wrap(err, "waiting for kanopy-oidc login to complete")
	}

	if tokenBuf.Len() == 0 {
		return "", errors.New("no token received - ensure kanopy-oidc is installed and configured correctly")
	}

	return tokenBuf.String(), nil
}

func getUser() cli.Command {
	return cli.Command{
		Name:    "get-user",
		Aliases: []string{"user"},
		Usage:   "get username from client settings",
		Action: func(c *cli.Context) error {
			confPath := c.Parent().String(confFlagName)
			conf, err := NewClientSettings(confPath)
			if err != nil {
				return errors.Wrap(err, "loading configuration")
			}
			fmt.Println(conf.User)
			return nil
		},
	}
}

func getAPIKey() cli.Command {
	return cli.Command{
		Name:    "get-api-key",
		Aliases: []string{"key"},
		Usage:   "get API key from client settings",
		Action: func(c *cli.Context) error {
			confPath := c.Parent().String(confFlagName)
			conf, err := NewClientSettings(confPath)
			if err != nil {
				return errors.Wrap(err, "loading configuration")
			}
			fmt.Println(conf.APIKey)
			return nil
		},
	}
}

func getAPIUrl() cli.Command {
	return cli.Command{
		Name:    "get-api-url",
		Aliases: []string{"api"},
		Usage:   "get API URL from client settings",
		Action: func(c *cli.Context) error {
			confPath := c.Parent().String(confFlagName)
			conf, err := NewClientSettings(confPath)
			if err != nil {
				return errors.Wrap(err, "loading configuration")
			}
			fmt.Println(conf.APIServerHost)
			return nil
		},
	}
}

func getUIUrl() cli.Command {
	return cli.Command{
		Name:    "get-ui-url",
		Aliases: []string{"ui"},
		Usage:   "get UI URL from client settings",
		Action: func(c *cli.Context) error {
			confPath := c.Parent().String(confFlagName)
			conf, err := NewClientSettings(confPath)
			if err != nil {
				return errors.Wrap(err, "loading configuration")
			}
			fmt.Println(conf.UIServerHost)
			return nil
		},
	}
}

func getJWTFromKanopy() cli.Command {
	return cli.Command{
		Name:    "get-jwt",
		Usage:   "get a JWT generated by kanopy-oidc",
		Aliases: []string{"jwt"},
		Action: func(c *cli.Context) error {
			jwt, _ := runKanopyOIDCLogin()
			fmt.Println(jwt)
			return nil
		},
	}
}

// Setting the kanopy token in the Evergreen config file is helpful for services that already
// set up to read auth information from he Evergreen config file.
func setJWTInConfig() cli.Command {
	return cli.Command{
		Name:    "set-jwt",
		Usage:   "generate a JWT token through kanopy-oidc and set it as \"jwt\" in the evergreen config file",
		Aliases: []string{"sjwt"},
		Action: func(c *cli.Context) error {
			jwt, err := runKanopyOIDCLogin()
			if jwt == "" {
				return errors.New("no JWT received - ensure kanopy-oidc is installed and configured correctly")
			}
			if err != nil {
				return errors.Wrap(err, "running kanopy-oidc login")
			}

			confPath := c.Parent().String(confFlagName)
			conf, err := NewClientSettings(confPath)
			if err != nil {
				return errors.Wrap(err, "loading configuration")
			}

			conf.JWT = jwt

			if err := conf.Write(""); err != nil {
				return errors.Wrap(err, "failed to set a jwt token ")
			}

			grip.Info("The jwt token was set.")
			return nil
		},
	}
}
