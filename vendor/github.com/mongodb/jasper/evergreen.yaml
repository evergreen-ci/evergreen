command_type: test
stepback: false
ignore:
    - "*.md" # don't schedule tests if a commit only changes markdown files
    - "*.rst" # don't schedule tests if a commit only changes rst files
    - ".github/*" # github CODEOWNERS configuration

#######################################
#         YAML Templates              #
#######################################
variables:
  - &run-build
    # runs a build operations. The task name in evergreen should
    # correspond to a make target for the build operation.
    name: test
    commands:
      - command: git.get_project
        type: system
        params:
          directory: gopath/src/github.com/mongodb/jasper
      - func: run-make
        vars: { target: "${task_name}" }

#######################################
#              Functions              #
#######################################
functions:
  run-make:
    command: shell.exec
    type: test
    params:
       script: |
         set -o errexit
         set -o verbose

         # Configure a local go path for this build.
         export GOPATH=`pwd`/gopath

         # on windows we need to turn the slashes the other way
         if [ "Windows_NT" == "$OS" ]; then
            export GOPATH=$(cygpath -m $GOPATH)
         fi

         cd gopath/src/github.com/mongodb/jasper

         # Run make, called with proper environment variables set,
         # running the target.
         ${build_env|} make -k ${target}

#######################################
#                Tasks                #
#######################################
post:
  - command: gotest.parse_files
    type: setup
    params:
      files:
        - "gopath/src/github.com/mongodb/jasper/build/output.*"
        - "gopath/src/github.com/mongodb/jasper/build/test.*.out"
        - "gopath/src/github.com/mongodb/jasper/build/race.*.out"

tasks:
  - <<: *run-build
    tags: ["test"]
    name: test-jasper

  - <<: *run-build
    tags: ["test"]
    name: test-cli

  - <<: *run-build
    tags: ["test"]
    name: test-options

  - <<: *run-build
    tags: ["test"]
    name: test-mock

  - <<: *run-build
    tags: ["test"]
    name: test-rest

  - <<: *run-build
    tags: ["test"]
    name: test-rpc

  - <<: *run-build
    tags: ["legacy-check"]
    name: compile-base

  - <<: *run-build
    tags: ["bench"]
    name: benchmark

#######################################
#           Buildvariants             #
#######################################
buildvariants:
  - name: race-detector
    display_name: Race Detector (Arch Linux)
    expansions:
      build_env: "DISABLE_COVERAGE=true RACE_DETECTOR=true"
    run_on:
      - archlinux-test
      - archlinux-build
    tasks: 
      - name: ".test"

  - name: ubuntu1604
    display_name: Ubuntu 16.04
    expansions:
      build_env: "GOROOT=/opt/golang/go1.11/ PATH=/opt/golang/go1.11/bin:$PATH"
    run_on:
      - ubuntu1604-test
      - ubuntu1604-build
    tasks: 
      - name: ".test"
      - name: ".bench"

  - name: ubuntu1604-go1.9
    display_name: Ubuntu 16.04 (go1.9)
    expansions:
      build_env: "GOROOT=/opt/golang/go1.9/ PATH=/opt/golang/go1.9/bin:$PATH"
    run_on:
      - ubuntu1604-test
      - ubuntu1604-build
    tasks: 
      - name: ".legacy-check"

  - name: macos
    display_name: macOS
    expansions:
      build_env: "GOROOT=/opt/golang/go1.11/ PATH=/opt/golang/go1.11/bin:$PATH DISABLE_COVERAGE=true"
    run_on:
      - macos-1014
      - macos-1014-i7
    tasks:
      - name: ".test"
      - name: ".bench"

  - name: windows
    display_name: Windows
    run_on:
      - windows-64-vs2015-small
      - windows-64-vs2015-test
      - windows-64-vs2015-compile
      - windows-64-vs2015-large
      - windows-64-vs2010-compile
      - windows-64-vs2010-test
      - windows-64-vs2013-compile
      - windows-64-vs2013-test
    expansions:
      build_env: "GOROOT=c:/golang/go1.11 PATH=/cygdrive/c/golang/go1.11/bin:$PATH DISABLE_COVERAGE=true"
    tasks:
      - name: ".test"
      - name: ".bench"
