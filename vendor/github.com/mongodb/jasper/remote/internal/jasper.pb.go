// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.13.0
// source: jasper.proto

package internal

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LogFormat int32

const (
	LogFormat_LOGFORMATUNKNOWN LogFormat = 0
	LogFormat_LOGFORMATDEFAULT LogFormat = 1
	LogFormat_LOGFORMATJSON    LogFormat = 2
	LogFormat_LOGFORMATPLAIN   LogFormat = 3
)

// Enum value maps for LogFormat.
var (
	LogFormat_name = map[int32]string{
		0: "LOGFORMATUNKNOWN",
		1: "LOGFORMATDEFAULT",
		2: "LOGFORMATJSON",
		3: "LOGFORMATPLAIN",
	}
	LogFormat_value = map[string]int32{
		"LOGFORMATUNKNOWN": 0,
		"LOGFORMATDEFAULT": 1,
		"LOGFORMATJSON":    2,
		"LOGFORMATPLAIN":   3,
	}
)

func (x LogFormat) Enum() *LogFormat {
	p := new(LogFormat)
	*p = x
	return p
}

func (x LogFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jasper_proto_enumTypes[0].Descriptor()
}

func (LogFormat) Type() protoreflect.EnumType {
	return &file_jasper_proto_enumTypes[0]
}

func (x LogFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogFormat.Descriptor instead.
func (LogFormat) EnumDescriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{0}
}

type RawLoggerConfigFormat int32

const (
	RawLoggerConfigFormat_RAWLOGGERCONFIGFORMATJSON    RawLoggerConfigFormat = 0
	RawLoggerConfigFormat_RAWLOGGERCONFIGFORMATBSON    RawLoggerConfigFormat = 1
	RawLoggerConfigFormat_RAWLOGGERCONFIGFORMATUNKNOWN RawLoggerConfigFormat = 2
)

// Enum value maps for RawLoggerConfigFormat.
var (
	RawLoggerConfigFormat_name = map[int32]string{
		0: "RAWLOGGERCONFIGFORMATJSON",
		1: "RAWLOGGERCONFIGFORMATBSON",
		2: "RAWLOGGERCONFIGFORMATUNKNOWN",
	}
	RawLoggerConfigFormat_value = map[string]int32{
		"RAWLOGGERCONFIGFORMATJSON":    0,
		"RAWLOGGERCONFIGFORMATBSON":    1,
		"RAWLOGGERCONFIGFORMATUNKNOWN": 2,
	}
)

func (x RawLoggerConfigFormat) Enum() *RawLoggerConfigFormat {
	p := new(RawLoggerConfigFormat)
	*p = x
	return p
}

func (x RawLoggerConfigFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RawLoggerConfigFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jasper_proto_enumTypes[1].Descriptor()
}

func (RawLoggerConfigFormat) Type() protoreflect.EnumType {
	return &file_jasper_proto_enumTypes[1]
}

func (x RawLoggerConfigFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RawLoggerConfigFormat.Descriptor instead.
func (RawLoggerConfigFormat) EnumDescriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{1}
}

type FilterSpecifications int32

const (
	FilterSpecifications_ALL        FilterSpecifications = 0
	FilterSpecifications_RUNNING    FilterSpecifications = 1
	FilterSpecifications_TERMINATED FilterSpecifications = 2
	FilterSpecifications_FAILED     FilterSpecifications = 3
	FilterSpecifications_SUCCESSFUL FilterSpecifications = 4
)

// Enum value maps for FilterSpecifications.
var (
	FilterSpecifications_name = map[int32]string{
		0: "ALL",
		1: "RUNNING",
		2: "TERMINATED",
		3: "FAILED",
		4: "SUCCESSFUL",
	}
	FilterSpecifications_value = map[string]int32{
		"ALL":        0,
		"RUNNING":    1,
		"TERMINATED": 2,
		"FAILED":     3,
		"SUCCESSFUL": 4,
	}
)

func (x FilterSpecifications) Enum() *FilterSpecifications {
	p := new(FilterSpecifications)
	*p = x
	return p
}

func (x FilterSpecifications) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterSpecifications) Descriptor() protoreflect.EnumDescriptor {
	return file_jasper_proto_enumTypes[2].Descriptor()
}

func (FilterSpecifications) Type() protoreflect.EnumType {
	return &file_jasper_proto_enumTypes[2]
}

func (x FilterSpecifications) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterSpecifications.Descriptor instead.
func (FilterSpecifications) EnumDescriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{2}
}

type Signals int32

const (
	Signals_UNKNOWN   Signals = 0
	Signals_TERMINATE Signals = 1
	Signals_KILL      Signals = 2
	Signals_HANGUP    Signals = 3
	Signals_INIT      Signals = 4
	Signals_USER1     Signals = 5
	Signals_USER2     Signals = 6
	Signals_ABRT      Signals = 7
)

// Enum value maps for Signals.
var (
	Signals_name = map[int32]string{
		0: "UNKNOWN",
		1: "TERMINATE",
		2: "KILL",
		3: "HANGUP",
		4: "INIT",
		5: "USER1",
		6: "USER2",
		7: "ABRT",
	}
	Signals_value = map[string]int32{
		"UNKNOWN":   0,
		"TERMINATE": 1,
		"KILL":      2,
		"HANGUP":    3,
		"INIT":      4,
		"USER1":     5,
		"USER2":     6,
		"ABRT":      7,
	}
)

func (x Signals) Enum() *Signals {
	p := new(Signals)
	*p = x
	return p
}

func (x Signals) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Signals) Descriptor() protoreflect.EnumDescriptor {
	return file_jasper_proto_enumTypes[3].Descriptor()
}

func (Signals) Type() protoreflect.EnumType {
	return &file_jasper_proto_enumTypes[3]
}

func (x Signals) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Signals.Descriptor instead.
func (Signals) EnumDescriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{3}
}

type ArchiveFormat int32

const (
	ArchiveFormat_ARCHIVEUNKNOWN ArchiveFormat = 0
	ArchiveFormat_ARCHIVEAUTO    ArchiveFormat = 1
	ArchiveFormat_ARCHIVETARGZ   ArchiveFormat = 2
	ArchiveFormat_ARCHIVEZIP     ArchiveFormat = 3
)

// Enum value maps for ArchiveFormat.
var (
	ArchiveFormat_name = map[int32]string{
		0: "ARCHIVEUNKNOWN",
		1: "ARCHIVEAUTO",
		2: "ARCHIVETARGZ",
		3: "ARCHIVEZIP",
	}
	ArchiveFormat_value = map[string]int32{
		"ARCHIVEUNKNOWN": 0,
		"ARCHIVEAUTO":    1,
		"ARCHIVETARGZ":   2,
		"ARCHIVEZIP":     3,
	}
)

func (x ArchiveFormat) Enum() *ArchiveFormat {
	p := new(ArchiveFormat)
	*p = x
	return p
}

func (x ArchiveFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchiveFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jasper_proto_enumTypes[4].Descriptor()
}

func (ArchiveFormat) Type() protoreflect.EnumType {
	return &file_jasper_proto_enumTypes[4]
}

func (x ArchiveFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchiveFormat.Descriptor instead.
func (ArchiveFormat) EnumDescriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{4}
}

type SignalTriggerID int32

const (
	SignalTriggerID_NONE             SignalTriggerID = 0
	SignalTriggerID_CLEANTERMINATION SignalTriggerID = 1
)

// Enum value maps for SignalTriggerID.
var (
	SignalTriggerID_name = map[int32]string{
		0: "NONE",
		1: "CLEANTERMINATION",
	}
	SignalTriggerID_value = map[string]int32{
		"NONE":             0,
		"CLEANTERMINATION": 1,
	}
)

func (x SignalTriggerID) Enum() *SignalTriggerID {
	p := new(SignalTriggerID)
	*p = x
	return p
}

func (x SignalTriggerID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalTriggerID) Descriptor() protoreflect.EnumDescriptor {
	return file_jasper_proto_enumTypes[5].Descriptor()
}

func (SignalTriggerID) Type() protoreflect.EnumType {
	return &file_jasper_proto_enumTypes[5]
}

func (x SignalTriggerID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalTriggerID.Descriptor instead.
func (SignalTriggerID) EnumDescriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{5}
}

type LoggingPayloadFormat int32

const (
	LoggingPayloadFormat_FORMATUNKNONW LoggingPayloadFormat = 0
	LoggingPayloadFormat_FORMATBSON    LoggingPayloadFormat = 1
	LoggingPayloadFormat_FORMATJSON    LoggingPayloadFormat = 2
	LoggingPayloadFormat_FORMATSTRING  LoggingPayloadFormat = 3
)

// Enum value maps for LoggingPayloadFormat.
var (
	LoggingPayloadFormat_name = map[int32]string{
		0: "FORMATUNKNONW",
		1: "FORMATBSON",
		2: "FORMATJSON",
		3: "FORMATSTRING",
	}
	LoggingPayloadFormat_value = map[string]int32{
		"FORMATUNKNONW": 0,
		"FORMATBSON":    1,
		"FORMATJSON":    2,
		"FORMATSTRING":  3,
	}
)

func (x LoggingPayloadFormat) Enum() *LoggingPayloadFormat {
	p := new(LoggingPayloadFormat)
	*p = x
	return p
}

func (x LoggingPayloadFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingPayloadFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jasper_proto_enumTypes[6].Descriptor()
}

func (LoggingPayloadFormat) Type() protoreflect.EnumType {
	return &file_jasper_proto_enumTypes[6]
}

func (x LoggingPayloadFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingPayloadFormat.Descriptor instead.
func (LoggingPayloadFormat) EnumDescriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{6}
}

type LoggerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Producer:
	//	*LoggerConfig_Default
	//	*LoggerConfig_File
	//	*LoggerConfig_Inherited
	//	*LoggerConfig_Sumo
	//	*LoggerConfig_InMemory
	//	*LoggerConfig_Splunk
	//	*LoggerConfig_Buildloggerv2
	//	*LoggerConfig_Buildloggerv3
	//	*LoggerConfig_Raw
	Producer isLoggerConfig_Producer `protobuf_oneof:"producer"`
}

func (x *LoggerConfig) Reset() {
	*x = LoggerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggerConfig) ProtoMessage() {}

func (x *LoggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggerConfig.ProtoReflect.Descriptor instead.
func (*LoggerConfig) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{0}
}

func (m *LoggerConfig) GetProducer() isLoggerConfig_Producer {
	if m != nil {
		return m.Producer
	}
	return nil
}

func (x *LoggerConfig) GetDefault() *DefaultLoggerOptions {
	if x, ok := x.GetProducer().(*LoggerConfig_Default); ok {
		return x.Default
	}
	return nil
}

func (x *LoggerConfig) GetFile() *FileLoggerOptions {
	if x, ok := x.GetProducer().(*LoggerConfig_File); ok {
		return x.File
	}
	return nil
}

func (x *LoggerConfig) GetInherited() *InheritedLoggerOptions {
	if x, ok := x.GetProducer().(*LoggerConfig_Inherited); ok {
		return x.Inherited
	}
	return nil
}

func (x *LoggerConfig) GetSumo() *SumoLogicLoggerOptions {
	if x, ok := x.GetProducer().(*LoggerConfig_Sumo); ok {
		return x.Sumo
	}
	return nil
}

func (x *LoggerConfig) GetInMemory() *InMemoryLoggerOptions {
	if x, ok := x.GetProducer().(*LoggerConfig_InMemory); ok {
		return x.InMemory
	}
	return nil
}

func (x *LoggerConfig) GetSplunk() *SplunkLoggerOptions {
	if x, ok := x.GetProducer().(*LoggerConfig_Splunk); ok {
		return x.Splunk
	}
	return nil
}

func (x *LoggerConfig) GetBuildloggerv2() *BuildloggerV2Options {
	if x, ok := x.GetProducer().(*LoggerConfig_Buildloggerv2); ok {
		return x.Buildloggerv2
	}
	return nil
}

func (x *LoggerConfig) GetBuildloggerv3() *BuildloggerV3Options {
	if x, ok := x.GetProducer().(*LoggerConfig_Buildloggerv3); ok {
		return x.Buildloggerv3
	}
	return nil
}

func (x *LoggerConfig) GetRaw() *RawLoggerConfig {
	if x, ok := x.GetProducer().(*LoggerConfig_Raw); ok {
		return x.Raw
	}
	return nil
}

type isLoggerConfig_Producer interface {
	isLoggerConfig_Producer()
}

type LoggerConfig_Default struct {
	Default *DefaultLoggerOptions `protobuf:"bytes,1,opt,name=default,proto3,oneof"`
}

type LoggerConfig_File struct {
	File *FileLoggerOptions `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

type LoggerConfig_Inherited struct {
	Inherited *InheritedLoggerOptions `protobuf:"bytes,3,opt,name=inherited,proto3,oneof"`
}

type LoggerConfig_Sumo struct {
	Sumo *SumoLogicLoggerOptions `protobuf:"bytes,4,opt,name=sumo,proto3,oneof"`
}

type LoggerConfig_InMemory struct {
	InMemory *InMemoryLoggerOptions `protobuf:"bytes,5,opt,name=in_memory,json=inMemory,proto3,oneof"`
}

type LoggerConfig_Splunk struct {
	Splunk *SplunkLoggerOptions `protobuf:"bytes,6,opt,name=splunk,proto3,oneof"`
}

type LoggerConfig_Buildloggerv2 struct {
	Buildloggerv2 *BuildloggerV2Options `protobuf:"bytes,7,opt,name=buildloggerv2,proto3,oneof"`
}

type LoggerConfig_Buildloggerv3 struct {
	Buildloggerv3 *BuildloggerV3Options `protobuf:"bytes,8,opt,name=buildloggerv3,proto3,oneof"`
}

type LoggerConfig_Raw struct {
	Raw *RawLoggerConfig `protobuf:"bytes,9,opt,name=raw,proto3,oneof"`
}

func (*LoggerConfig_Default) isLoggerConfig_Producer() {}

func (*LoggerConfig_File) isLoggerConfig_Producer() {}

func (*LoggerConfig_Inherited) isLoggerConfig_Producer() {}

func (*LoggerConfig_Sumo) isLoggerConfig_Producer() {}

func (*LoggerConfig_InMemory) isLoggerConfig_Producer() {}

func (*LoggerConfig_Splunk) isLoggerConfig_Producer() {}

func (*LoggerConfig_Buildloggerv2) isLoggerConfig_Producer() {}

func (*LoggerConfig_Buildloggerv3) isLoggerConfig_Producer() {}

func (*LoggerConfig_Raw) isLoggerConfig_Producer() {}

type LogLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold int32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Default   int32 `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *LogLevel) Reset() {
	*x = LogLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLevel) ProtoMessage() {}

func (x *LogLevel) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLevel.ProtoReflect.Descriptor instead.
func (*LogLevel) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{1}
}

func (x *LogLevel) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *LogLevel) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

type BufferOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffered bool  `protobuf:"varint,1,opt,name=buffered,proto3" json:"buffered,omitempty"`
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	MaxSize  int64 `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *BufferOptions) Reset() {
	*x = BufferOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferOptions) ProtoMessage() {}

func (x *BufferOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferOptions.ProtoReflect.Descriptor instead.
func (*BufferOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{2}
}

func (x *BufferOptions) GetBuffered() bool {
	if x != nil {
		return x.Buffered
	}
	return false
}

func (x *BufferOptions) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BufferOptions) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type BaseOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  *LogLevel      `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Buffer *BufferOptions `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Format LogFormat      `protobuf:"varint,3,opt,name=format,proto3,enum=jasper.LogFormat" json:"format,omitempty"`
}

func (x *BaseOptions) Reset() {
	*x = BaseOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseOptions) ProtoMessage() {}

func (x *BaseOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseOptions.ProtoReflect.Descriptor instead.
func (*BaseOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{3}
}

func (x *BaseOptions) GetLevel() *LogLevel {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *BaseOptions) GetBuffer() *BufferOptions {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *BaseOptions) GetFormat() LogFormat {
	if x != nil {
		return x.Format
	}
	return LogFormat_LOGFORMATUNKNOWN
}

type DefaultLoggerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string       `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Base   *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *DefaultLoggerOptions) Reset() {
	*x = DefaultLoggerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultLoggerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultLoggerOptions) ProtoMessage() {}

func (x *DefaultLoggerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultLoggerOptions.ProtoReflect.Descriptor instead.
func (*DefaultLoggerOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{4}
}

func (x *DefaultLoggerOptions) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *DefaultLoggerOptions) GetBase() *BaseOptions {
	if x != nil {
		return x.Base
	}
	return nil
}

type FileLoggerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string       `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Base     *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *FileLoggerOptions) Reset() {
	*x = FileLoggerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLoggerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLoggerOptions) ProtoMessage() {}

func (x *FileLoggerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLoggerOptions.ProtoReflect.Descriptor instead.
func (*FileLoggerOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{5}
}

func (x *FileLoggerOptions) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileLoggerOptions) GetBase() *BaseOptions {
	if x != nil {
		return x.Base
	}
	return nil
}

type InheritedLoggerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseOptions `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *InheritedLoggerOptions) Reset() {
	*x = InheritedLoggerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InheritedLoggerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InheritedLoggerOptions) ProtoMessage() {}

func (x *InheritedLoggerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InheritedLoggerOptions.ProtoReflect.Descriptor instead.
func (*InheritedLoggerOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{6}
}

func (x *InheritedLoggerOptions) GetBase() *BaseOptions {
	if x != nil {
		return x.Base
	}
	return nil
}

type SumoLogicLoggerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SumoEndpoint string       `protobuf:"bytes,1,opt,name=sumo_endpoint,json=sumoEndpoint,proto3" json:"sumo_endpoint,omitempty"`
	Base         *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *SumoLogicLoggerOptions) Reset() {
	*x = SumoLogicLoggerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumoLogicLoggerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumoLogicLoggerOptions) ProtoMessage() {}

func (x *SumoLogicLoggerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumoLogicLoggerOptions.ProtoReflect.Descriptor instead.
func (*SumoLogicLoggerOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{7}
}

func (x *SumoLogicLoggerOptions) GetSumoEndpoint() string {
	if x != nil {
		return x.SumoEndpoint
	}
	return ""
}

func (x *SumoLogicLoggerOptions) GetBase() *BaseOptions {
	if x != nil {
		return x.Base
	}
	return nil
}

type InMemoryLoggerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InMemoryCap int64        `protobuf:"varint,1,opt,name=in_memory_cap,json=inMemoryCap,proto3" json:"in_memory_cap,omitempty"`
	Base        *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *InMemoryLoggerOptions) Reset() {
	*x = InMemoryLoggerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InMemoryLoggerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InMemoryLoggerOptions) ProtoMessage() {}

func (x *InMemoryLoggerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InMemoryLoggerOptions.ProtoReflect.Descriptor instead.
func (*InMemoryLoggerOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{8}
}

func (x *InMemoryLoggerOptions) GetInMemoryCap() int64 {
	if x != nil {
		return x.InMemoryCap
	}
	return 0
}

func (x *InMemoryLoggerOptions) GetBase() *BaseOptions {
	if x != nil {
		return x.Base
	}
	return nil
}

type SplunkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *SplunkInfo) Reset() {
	*x = SplunkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkInfo) ProtoMessage() {}

func (x *SplunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkInfo.ProtoReflect.Descriptor instead.
func (*SplunkInfo) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{9}
}

func (x *SplunkInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SplunkInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SplunkInfo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type SplunkLoggerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Splunk *SplunkInfo  `protobuf:"bytes,1,opt,name=splunk,proto3" json:"splunk,omitempty"`
	Base   *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *SplunkLoggerOptions) Reset() {
	*x = SplunkLoggerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplunkLoggerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplunkLoggerOptions) ProtoMessage() {}

func (x *SplunkLoggerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplunkLoggerOptions.ProtoReflect.Descriptor instead.
func (*SplunkLoggerOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{10}
}

func (x *SplunkLoggerOptions) GetSplunk() *SplunkInfo {
	if x != nil {
		return x.Splunk
	}
	return nil
}

func (x *SplunkLoggerOptions) GetBase() *BaseOptions {
	if x != nil {
		return x.Base
	}
	return nil
}

type BuildloggerV2Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTest bool   `protobuf:"varint,1,opt,name=create_test,json=createTest,proto3" json:"create_test,omitempty"`
	Url        string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Number     int64  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Phase      string `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	Builder    string `protobuf:"bytes,5,opt,name=builder,proto3" json:"builder,omitempty"`
	Test       string `protobuf:"bytes,6,opt,name=test,proto3" json:"test,omitempty"`
	Command    string `protobuf:"bytes,7,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *BuildloggerV2Info) Reset() {
	*x = BuildloggerV2Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildloggerV2Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildloggerV2Info) ProtoMessage() {}

func (x *BuildloggerV2Info) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildloggerV2Info.ProtoReflect.Descriptor instead.
func (*BuildloggerV2Info) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{11}
}

func (x *BuildloggerV2Info) GetCreateTest() bool {
	if x != nil {
		return x.CreateTest
	}
	return false
}

func (x *BuildloggerV2Info) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BuildloggerV2Info) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BuildloggerV2Info) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *BuildloggerV2Info) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

func (x *BuildloggerV2Info) GetTest() string {
	if x != nil {
		return x.Test
	}
	return ""
}

func (x *BuildloggerV2Info) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type BuildloggerV2Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buildlogger *BuildloggerV2Info `protobuf:"bytes,1,opt,name=buildlogger,proto3" json:"buildlogger,omitempty"`
	Base        *BaseOptions       `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *BuildloggerV2Options) Reset() {
	*x = BuildloggerV2Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildloggerV2Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildloggerV2Options) ProtoMessage() {}

func (x *BuildloggerV2Options) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildloggerV2Options.ProtoReflect.Descriptor instead.
func (*BuildloggerV2Options) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{12}
}

func (x *BuildloggerV2Options) GetBuildlogger() *BuildloggerV2Info {
	if x != nil {
		return x.Buildlogger
	}
	return nil
}

func (x *BuildloggerV2Options) GetBase() *BaseOptions {
	if x != nil {
		return x.Base
	}
	return nil
}

type BuildloggerV3Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project             string            `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Version             string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Variant             string            `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	TaskName            string            `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskId              string            `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Execution           int32             `protobuf:"varint,6,opt,name=execution,proto3" json:"execution,omitempty"`
	TestName            string            `protobuf:"bytes,7,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Trial               int32             `protobuf:"varint,8,opt,name=trial,proto3" json:"trial,omitempty"`
	ProcessName         string            `protobuf:"bytes,9,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	Format              LogFormat         `protobuf:"varint,10,opt,name=format,proto3,enum=jasper.LogFormat" json:"format,omitempty"`
	Tags                []string          `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	Args                map[string]string `protobuf:"bytes,12,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mainline            bool              `protobuf:"varint,13,opt,name=mainline,proto3" json:"mainline,omitempty"`
	MaxBufferSize       int64             `protobuf:"varint,14,opt,name=max_buffer_size,json=maxBufferSize,proto3" json:"max_buffer_size,omitempty"`
	FlushInterval       int64             `protobuf:"varint,15,opt,name=flush_interval,json=flushInterval,proto3" json:"flush_interval,omitempty"`
	DisableNewLineCheck bool              `protobuf:"varint,16,opt,name=disable_new_line_check,json=disableNewLineCheck,proto3" json:"disable_new_line_check,omitempty"`
	BaseAddress         string            `protobuf:"bytes,17,opt,name=base_address,json=baseAddress,proto3" json:"base_address,omitempty"`
	RpcPort             string            `protobuf:"bytes,18,opt,name=rpc_port,json=rpcPort,proto3" json:"rpc_port,omitempty"`
	Insecure            bool              `protobuf:"varint,19,opt,name=insecure,proto3" json:"insecure,omitempty"`
	Username            string            `protobuf:"bytes,20,opt,name=username,proto3" json:"username,omitempty"`
	ApiKey              string            `protobuf:"bytes,21,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *BuildloggerV3Info) Reset() {
	*x = BuildloggerV3Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildloggerV3Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildloggerV3Info) ProtoMessage() {}

func (x *BuildloggerV3Info) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildloggerV3Info.ProtoReflect.Descriptor instead.
func (*BuildloggerV3Info) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{13}
}

func (x *BuildloggerV3Info) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BuildloggerV3Info) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BuildloggerV3Info) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *BuildloggerV3Info) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *BuildloggerV3Info) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *BuildloggerV3Info) GetExecution() int32 {
	if x != nil {
		return x.Execution
	}
	return 0
}

func (x *BuildloggerV3Info) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *BuildloggerV3Info) GetTrial() int32 {
	if x != nil {
		return x.Trial
	}
	return 0
}

func (x *BuildloggerV3Info) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *BuildloggerV3Info) GetFormat() LogFormat {
	if x != nil {
		return x.Format
	}
	return LogFormat_LOGFORMATUNKNOWN
}

func (x *BuildloggerV3Info) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BuildloggerV3Info) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *BuildloggerV3Info) GetMainline() bool {
	if x != nil {
		return x.Mainline
	}
	return false
}

func (x *BuildloggerV3Info) GetMaxBufferSize() int64 {
	if x != nil {
		return x.MaxBufferSize
	}
	return 0
}

func (x *BuildloggerV3Info) GetFlushInterval() int64 {
	if x != nil {
		return x.FlushInterval
	}
	return 0
}

func (x *BuildloggerV3Info) GetDisableNewLineCheck() bool {
	if x != nil {
		return x.DisableNewLineCheck
	}
	return false
}

func (x *BuildloggerV3Info) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *BuildloggerV3Info) GetRpcPort() string {
	if x != nil {
		return x.RpcPort
	}
	return ""
}

func (x *BuildloggerV3Info) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *BuildloggerV3Info) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BuildloggerV3Info) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type BuildloggerV3Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buildloggerv3 *BuildloggerV3Info `protobuf:"bytes,1,opt,name=buildloggerv3,proto3" json:"buildloggerv3,omitempty"`
	Name          string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Level         *LogLevel          `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *BuildloggerV3Options) Reset() {
	*x = BuildloggerV3Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildloggerV3Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildloggerV3Options) ProtoMessage() {}

func (x *BuildloggerV3Options) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildloggerV3Options.ProtoReflect.Descriptor instead.
func (*BuildloggerV3Options) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{14}
}

func (x *BuildloggerV3Options) GetBuildloggerv3() *BuildloggerV3Info {
	if x != nil {
		return x.Buildloggerv3
	}
	return nil
}

func (x *BuildloggerV3Options) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuildloggerV3Options) GetLevel() *LogLevel {
	if x != nil {
		return x.Level
	}
	return nil
}

type RawLoggerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     RawLoggerConfigFormat `protobuf:"varint,1,opt,name=format,proto3,enum=jasper.RawLoggerConfigFormat" json:"format,omitempty"`
	ConfigData []byte                `protobuf:"bytes,2,opt,name=config_data,json=configData,proto3" json:"config_data,omitempty"`
}

func (x *RawLoggerConfig) Reset() {
	*x = RawLoggerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawLoggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawLoggerConfig) ProtoMessage() {}

func (x *RawLoggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawLoggerConfig.ProtoReflect.Descriptor instead.
func (*RawLoggerConfig) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{15}
}

func (x *RawLoggerConfig) GetFormat() RawLoggerConfigFormat {
	if x != nil {
		return x.Format
	}
	return RawLoggerConfigFormat_RAWLOGGERCONFIGFORMATJSON
}

func (x *RawLoggerConfig) GetConfigData() []byte {
	if x != nil {
		return x.ConfigData
	}
	return nil
}

type OutputOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loggers               []*LoggerConfig `protobuf:"bytes,1,rep,name=loggers,proto3" json:"loggers,omitempty"`
	SuppressOutput        bool            `protobuf:"varint,2,opt,name=suppress_output,json=suppressOutput,proto3" json:"suppress_output,omitempty"`
	SuppressError         bool            `protobuf:"varint,3,opt,name=suppress_error,json=suppressError,proto3" json:"suppress_error,omitempty"`
	RedirectOutputToError bool            `protobuf:"varint,4,opt,name=redirect_output_to_error,json=redirectOutputToError,proto3" json:"redirect_output_to_error,omitempty"`
	RedirectErrorToOutput bool            `protobuf:"varint,5,opt,name=redirect_error_to_output,json=redirectErrorToOutput,proto3" json:"redirect_error_to_output,omitempty"`
}

func (x *OutputOptions) Reset() {
	*x = OutputOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputOptions) ProtoMessage() {}

func (x *OutputOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputOptions.ProtoReflect.Descriptor instead.
func (*OutputOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{16}
}

func (x *OutputOptions) GetLoggers() []*LoggerConfig {
	if x != nil {
		return x.Loggers
	}
	return nil
}

func (x *OutputOptions) GetSuppressOutput() bool {
	if x != nil {
		return x.SuppressOutput
	}
	return false
}

func (x *OutputOptions) GetSuppressError() bool {
	if x != nil {
		return x.SuppressError
	}
	return false
}

func (x *OutputOptions) GetRedirectOutputToError() bool {
	if x != nil {
		return x.RedirectOutputToError
	}
	return false
}

func (x *OutputOptions) GetRedirectErrorToOutput() bool {
	if x != nil {
		return x.RedirectErrorToOutput
	}
	return false
}

type CreateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args               []string          `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	WorkingDirectory   string            `protobuf:"bytes,2,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	Environment        map[string]string `protobuf:"bytes,3,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OverrideEnviron    bool              `protobuf:"varint,4,opt,name=override_environ,json=overrideEnviron,proto3" json:"override_environ,omitempty"`
	TimeoutSeconds     int64             `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	Tags               []string          `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	OnSuccess          []*CreateOptions  `protobuf:"bytes,7,rep,name=on_success,json=onSuccess,proto3" json:"on_success,omitempty"`
	OnFailure          []*CreateOptions  `protobuf:"bytes,8,rep,name=on_failure,json=onFailure,proto3" json:"on_failure,omitempty"`
	OnTimeout          []*CreateOptions  `protobuf:"bytes,9,rep,name=on_timeout,json=onTimeout,proto3" json:"on_timeout,omitempty"`
	Output             *OutputOptions    `protobuf:"bytes,10,opt,name=output,proto3" json:"output,omitempty"`
	StandardInputBytes []byte            `protobuf:"bytes,11,opt,name=standard_input_bytes,json=standardInputBytes,proto3" json:"standard_input_bytes,omitempty"`
}

func (x *CreateOptions) Reset() {
	*x = CreateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOptions) ProtoMessage() {}

func (x *CreateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOptions.ProtoReflect.Descriptor instead.
func (*CreateOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{17}
}

func (x *CreateOptions) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CreateOptions) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *CreateOptions) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *CreateOptions) GetOverrideEnviron() bool {
	if x != nil {
		return x.OverrideEnviron
	}
	return false
}

func (x *CreateOptions) GetTimeoutSeconds() int64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *CreateOptions) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateOptions) GetOnSuccess() []*CreateOptions {
	if x != nil {
		return x.OnSuccess
	}
	return nil
}

func (x *CreateOptions) GetOnFailure() []*CreateOptions {
	if x != nil {
		return x.OnFailure
	}
	return nil
}

func (x *CreateOptions) GetOnTimeout() []*CreateOptions {
	if x != nil {
		return x.OnTimeout
	}
	return nil
}

func (x *CreateOptions) GetOutput() *OutputOptions {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *CreateOptions) GetStandardInputBytes() []byte {
	if x != nil {
		return x.StandardInputBytes
	}
	return nil
}

type IDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IDResponse) Reset() {
	*x = IDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDResponse) ProtoMessage() {}

func (x *IDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDResponse.ProtoReflect.Descriptor instead.
func (*IDResponse) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{18}
}

func (x *IDResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid        int64                `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	HostId     string               `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Running    bool                 `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	Successful bool                 `protobuf:"varint,5,opt,name=successful,proto3" json:"successful,omitempty"`
	Complete   bool                 `protobuf:"varint,6,opt,name=complete,proto3" json:"complete,omitempty"`
	Timedout   bool                 `protobuf:"varint,7,opt,name=timedout,proto3" json:"timedout,omitempty"`
	Options    *CreateOptions       `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	ExitCode   int32                `protobuf:"varint,9,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	StartAt    *timestamp.Timestamp `protobuf:"bytes,10,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt      *timestamp.Timestamp `protobuf:"bytes,11,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{19}
}

func (x *ProcessInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessInfo) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessInfo) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ProcessInfo) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *ProcessInfo) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *ProcessInfo) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *ProcessInfo) GetTimedout() bool {
	if x != nil {
		return x.Timedout
	}
	return false
}

func (x *ProcessInfo) GetOptions() *CreateOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ProcessInfo) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ProcessInfo) GetStartAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ProcessInfo) GetEndAt() *timestamp.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Active bool   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{20}
}

func (x *StatusResponse) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *StatusResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name FilterSpecifications `protobuf:"varint,1,opt,name=name,proto3,enum=jasper.FilterSpecifications" json:"name,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{21}
}

func (x *Filter) GetName() FilterSpecifications {
	if x != nil {
		return x.Name
	}
	return FilterSpecifications_ALL
}

type SignalProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessID *JasperProcessID `protobuf:"bytes,1,opt,name=ProcessID,proto3" json:"ProcessID,omitempty"`
	Signal    Signals          `protobuf:"varint,2,opt,name=signal,proto3,enum=jasper.Signals" json:"signal,omitempty"`
}

func (x *SignalProcess) Reset() {
	*x = SignalProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalProcess) ProtoMessage() {}

func (x *SignalProcess) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalProcess.ProtoReflect.Descriptor instead.
func (*SignalProcess) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{22}
}

func (x *SignalProcess) GetProcessID() *JasperProcessID {
	if x != nil {
		return x.ProcessID
	}
	return nil
}

func (x *SignalProcess) GetSignal() Signals {
	if x != nil {
		return x.Signal
	}
	return Signals_UNKNOWN
}

type TagName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TagName) Reset() {
	*x = TagName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagName) ProtoMessage() {}

func (x *TagName) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagName.ProtoReflect.Descriptor instead.
func (*TagName) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{23}
}

func (x *TagName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ProcessTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessID string   `protobuf:"bytes,1,opt,name=processID,proto3" json:"processID,omitempty"`
	Tags      []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ProcessTags) Reset() {
	*x = ProcessTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTags) ProtoMessage() {}

func (x *ProcessTags) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTags.ProtoReflect.Descriptor instead.
func (*ProcessTags) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{24}
}

func (x *ProcessTags) GetProcessID() string {
	if x != nil {
		return x.ProcessID
	}
	return ""
}

func (x *ProcessTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type JasperProcessID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *JasperProcessID) Reset() {
	*x = JasperProcessID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JasperProcessID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JasperProcessID) ProtoMessage() {}

func (x *JasperProcessID) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JasperProcessID.ProtoReflect.Descriptor instead.
func (*JasperProcessID) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{25}
}

func (x *JasperProcessID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type OperationOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ExitCode int32  `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *OperationOutcome) Reset() {
	*x = OperationOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationOutcome) ProtoMessage() {}

func (x *OperationOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationOutcome.ProtoReflect.Descriptor instead.
func (*OperationOutcome) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{26}
}

func (x *OperationOutcome) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *OperationOutcome) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *OperationOutcome) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type BuildOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Arch    string `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	Edition string `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Debug   bool   `protobuf:"varint,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *BuildOptions) Reset() {
	*x = BuildOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildOptions) ProtoMessage() {}

func (x *BuildOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildOptions.ProtoReflect.Descriptor instead.
func (*BuildOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{27}
}

func (x *BuildOptions) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *BuildOptions) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *BuildOptions) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *BuildOptions) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type MongoDBDownloadOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildOpts *BuildOptions `protobuf:"bytes,1,opt,name=build_opts,json=buildOpts,proto3" json:"build_opts,omitempty"`
	Path      string        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Releases  []string      `protobuf:"bytes,3,rep,name=releases,proto3" json:"releases,omitempty"`
}

func (x *MongoDBDownloadOptions) Reset() {
	*x = MongoDBDownloadOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoDBDownloadOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDBDownloadOptions) ProtoMessage() {}

func (x *MongoDBDownloadOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDBDownloadOptions.ProtoReflect.Descriptor instead.
func (*MongoDBDownloadOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{28}
}

func (x *MongoDBDownloadOptions) GetBuildOpts() *BuildOptions {
	if x != nil {
		return x.BuildOpts
	}
	return nil
}

func (x *MongoDBDownloadOptions) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MongoDBDownloadOptions) GetReleases() []string {
	if x != nil {
		return x.Releases
	}
	return nil
}

type CacheOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disabled          bool  `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	PruneDelaySeconds int64 `protobuf:"varint,2,opt,name=prune_delay_seconds,json=pruneDelaySeconds,proto3" json:"prune_delay_seconds,omitempty"`
	MaxSize           int64 `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *CacheOptions) Reset() {
	*x = CacheOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheOptions) ProtoMessage() {}

func (x *CacheOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheOptions.ProtoReflect.Descriptor instead.
func (*CacheOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{29}
}

func (x *CacheOptions) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *CacheOptions) GetPruneDelaySeconds() int64 {
	if x != nil {
		return x.PruneDelaySeconds
	}
	return 0
}

func (x *CacheOptions) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type ArchiveOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldExtract bool          `protobuf:"varint,1,opt,name=should_extract,json=shouldExtract,proto3" json:"should_extract,omitempty"`
	Format        ArchiveFormat `protobuf:"varint,2,opt,name=format,proto3,enum=jasper.ArchiveFormat" json:"format,omitempty"`
	TargetPath    string        `protobuf:"bytes,3,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
}

func (x *ArchiveOptions) Reset() {
	*x = ArchiveOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveOptions) ProtoMessage() {}

func (x *ArchiveOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveOptions.ProtoReflect.Descriptor instead.
func (*ArchiveOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{30}
}

func (x *ArchiveOptions) GetShouldExtract() bool {
	if x != nil {
		return x.ShouldExtract
	}
	return false
}

func (x *ArchiveOptions) GetFormat() ArchiveFormat {
	if x != nil {
		return x.Format
	}
	return ArchiveFormat_ARCHIVEUNKNOWN
}

func (x *ArchiveOptions) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type DownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string          `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Path        string          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ArchiveOpts *ArchiveOptions `protobuf:"bytes,3,opt,name=archive_opts,json=archiveOpts,proto3" json:"archive_opts,omitempty"`
}

func (x *DownloadInfo) Reset() {
	*x = DownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadInfo) ProtoMessage() {}

func (x *DownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadInfo.ProtoReflect.Descriptor instead.
func (*DownloadInfo) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{31}
}

func (x *DownloadInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DownloadInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DownloadInfo) GetArchiveOpts() *ArchiveOptions {
	if x != nil {
		return x.ArchiveOpts
	}
	return nil
}

type WriteFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Append  bool   `protobuf:"varint,4,opt,name=append,proto3" json:"append,omitempty"`
	Perm    uint32 `protobuf:"varint,3,opt,name=perm,proto3" json:"perm,omitempty"`
}

func (x *WriteFileInfo) Reset() {
	*x = WriteFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileInfo) ProtoMessage() {}

func (x *WriteFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileInfo.ProtoReflect.Descriptor instead.
func (*WriteFileInfo) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{32}
}

func (x *WriteFileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WriteFileInfo) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *WriteFileInfo) GetAppend() bool {
	if x != nil {
		return x.Append
	}
	return false
}

func (x *WriteFileInfo) GetPerm() uint32 {
	if x != nil {
		return x.Perm
	}
	return 0
}

type BuildloggerURLs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *BuildloggerURLs) Reset() {
	*x = BuildloggerURLs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildloggerURLs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildloggerURLs) ProtoMessage() {}

func (x *BuildloggerURLs) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildloggerURLs.ProtoReflect.Descriptor instead.
func (*BuildloggerURLs) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{33}
}

func (x *BuildloggerURLs) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *JasperProcessID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{34}
}

func (x *LogRequest) GetId() *JasperProcessID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LogRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LogStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []string `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	Done bool     `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *LogStream) Reset() {
	*x = LogStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStream) ProtoMessage() {}

func (x *LogStream) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStream.ProtoReflect.Descriptor instead.
func (*LogStream) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{35}
}

func (x *LogStream) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *LogStream) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type SignalTriggerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessID       *JasperProcessID `protobuf:"bytes,1,opt,name=processID,proto3" json:"processID,omitempty"`
	SignalTriggerID SignalTriggerID  `protobuf:"varint,2,opt,name=signalTriggerID,proto3,enum=jasper.SignalTriggerID" json:"signalTriggerID,omitempty"`
}

func (x *SignalTriggerParams) Reset() {
	*x = SignalTriggerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalTriggerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalTriggerParams) ProtoMessage() {}

func (x *SignalTriggerParams) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalTriggerParams.ProtoReflect.Descriptor instead.
func (*SignalTriggerParams) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{36}
}

func (x *SignalTriggerParams) GetProcessID() *JasperProcessID {
	if x != nil {
		return x.ProcessID
	}
	return nil
}

func (x *SignalTriggerParams) GetSignalTriggerID() SignalTriggerID {
	if x != nil {
		return x.SignalTriggerID
	}
	return SignalTriggerID_NONE
}

type EventName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EventName) Reset() {
	*x = EventName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventName) ProtoMessage() {}

func (x *EventName) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventName.ProtoReflect.Descriptor instead.
func (*EventName) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{37}
}

func (x *EventName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ScriptingHarnessID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ScriptingHarnessID) Reset() {
	*x = ScriptingHarnessID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessID) ProtoMessage() {}

func (x *ScriptingHarnessID) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessID.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessID) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{38}
}

func (x *ScriptingHarnessID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ScriptingOptionsGolang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gopath         string   `protobuf:"bytes,1,opt,name=gopath,proto3" json:"gopath,omitempty"`
	Goroot         string   `protobuf:"bytes,2,opt,name=goroot,proto3" json:"goroot,omitempty"`
	Packages       []string `protobuf:"bytes,3,rep,name=packages,proto3" json:"packages,omitempty"`
	Directory      string   `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	UpdatePackages bool     `protobuf:"varint,5,opt,name=update_packages,json=updatePackages,proto3" json:"update_packages,omitempty"`
}

func (x *ScriptingOptionsGolang) Reset() {
	*x = ScriptingOptionsGolang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingOptionsGolang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingOptionsGolang) ProtoMessage() {}

func (x *ScriptingOptionsGolang) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingOptionsGolang.ProtoReflect.Descriptor instead.
func (*ScriptingOptionsGolang) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{39}
}

func (x *ScriptingOptionsGolang) GetGopath() string {
	if x != nil {
		return x.Gopath
	}
	return ""
}

func (x *ScriptingOptionsGolang) GetGoroot() string {
	if x != nil {
		return x.Goroot
	}
	return ""
}

func (x *ScriptingOptionsGolang) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *ScriptingOptionsGolang) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ScriptingOptionsGolang) GetUpdatePackages() bool {
	if x != nil {
		return x.UpdatePackages
	}
	return false
}

type ScriptingOptionsPython struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualEnvPath    string   `protobuf:"bytes,1,opt,name=virtual_env_path,json=virtualEnvPath,proto3" json:"virtual_env_path,omitempty"`
	RequirementsPath  string   `protobuf:"bytes,2,opt,name=requirements_path,json=requirementsPath,proto3" json:"requirements_path,omitempty"`
	InterpreterBinary string   `protobuf:"bytes,3,opt,name=interpreter_binary,json=interpreterBinary,proto3" json:"interpreter_binary,omitempty"`
	Packages          []string `protobuf:"bytes,4,rep,name=packages,proto3" json:"packages,omitempty"`
	LegacyPython      bool     `protobuf:"varint,5,opt,name=legacy_python,json=legacyPython,proto3" json:"legacy_python,omitempty"`
	AddTestReqs       bool     `protobuf:"varint,6,opt,name=add_test_reqs,json=addTestReqs,proto3" json:"add_test_reqs,omitempty"`
}

func (x *ScriptingOptionsPython) Reset() {
	*x = ScriptingOptionsPython{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingOptionsPython) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingOptionsPython) ProtoMessage() {}

func (x *ScriptingOptionsPython) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingOptionsPython.ProtoReflect.Descriptor instead.
func (*ScriptingOptionsPython) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{40}
}

func (x *ScriptingOptionsPython) GetVirtualEnvPath() string {
	if x != nil {
		return x.VirtualEnvPath
	}
	return ""
}

func (x *ScriptingOptionsPython) GetRequirementsPath() string {
	if x != nil {
		return x.RequirementsPath
	}
	return ""
}

func (x *ScriptingOptionsPython) GetInterpreterBinary() string {
	if x != nil {
		return x.InterpreterBinary
	}
	return ""
}

func (x *ScriptingOptionsPython) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *ScriptingOptionsPython) GetLegacyPython() bool {
	if x != nil {
		return x.LegacyPython
	}
	return false
}

func (x *ScriptingOptionsPython) GetAddTestReqs() bool {
	if x != nil {
		return x.AddTestReqs
	}
	return false
}

type ScriptingOptionsRoswell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Systems []string `protobuf:"bytes,2,rep,name=systems,proto3" json:"systems,omitempty"`
	Lisp    string   `protobuf:"bytes,3,opt,name=lisp,proto3" json:"lisp,omitempty"`
}

func (x *ScriptingOptionsRoswell) Reset() {
	*x = ScriptingOptionsRoswell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingOptionsRoswell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingOptionsRoswell) ProtoMessage() {}

func (x *ScriptingOptionsRoswell) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingOptionsRoswell.ProtoReflect.Descriptor instead.
func (*ScriptingOptionsRoswell) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{41}
}

func (x *ScriptingOptionsRoswell) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ScriptingOptionsRoswell) GetSystems() []string {
	if x != nil {
		return x.Systems
	}
	return nil
}

func (x *ScriptingOptionsRoswell) GetLisp() string {
	if x != nil {
		return x.Lisp
	}
	return ""
}

type ScriptingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ScriptingOptions_Golang
	//	*ScriptingOptions_Python
	//	*ScriptingOptions_Roswell
	Value       isScriptingOptions_Value `protobuf_oneof:"value"`
	Environment map[string]string        `protobuf:"bytes,4,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Output      *OutputOptions           `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	Duration    int64                    `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ScriptingOptions) Reset() {
	*x = ScriptingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingOptions) ProtoMessage() {}

func (x *ScriptingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingOptions.ProtoReflect.Descriptor instead.
func (*ScriptingOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{42}
}

func (m *ScriptingOptions) GetValue() isScriptingOptions_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScriptingOptions) GetGolang() *ScriptingOptionsGolang {
	if x, ok := x.GetValue().(*ScriptingOptions_Golang); ok {
		return x.Golang
	}
	return nil
}

func (x *ScriptingOptions) GetPython() *ScriptingOptionsPython {
	if x, ok := x.GetValue().(*ScriptingOptions_Python); ok {
		return x.Python
	}
	return nil
}

func (x *ScriptingOptions) GetRoswell() *ScriptingOptionsRoswell {
	if x, ok := x.GetValue().(*ScriptingOptions_Roswell); ok {
		return x.Roswell
	}
	return nil
}

func (x *ScriptingOptions) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *ScriptingOptions) GetOutput() *OutputOptions {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ScriptingOptions) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type isScriptingOptions_Value interface {
	isScriptingOptions_Value()
}

type ScriptingOptions_Golang struct {
	Golang *ScriptingOptionsGolang `protobuf:"bytes,1,opt,name=golang,proto3,oneof"`
}

type ScriptingOptions_Python struct {
	Python *ScriptingOptionsPython `protobuf:"bytes,2,opt,name=python,proto3,oneof"`
}

type ScriptingOptions_Roswell struct {
	Roswell *ScriptingOptionsRoswell `protobuf:"bytes,3,opt,name=roswell,proto3,oneof"`
}

func (*ScriptingOptions_Golang) isScriptingOptions_Value() {}

func (*ScriptingOptions_Python) isScriptingOptions_Value() {}

func (*ScriptingOptions_Roswell) isScriptingOptions_Value() {}

type ScriptingHarnessRunArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ScriptingHarnessRunArgs) Reset() {
	*x = ScriptingHarnessRunArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessRunArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessRunArgs) ProtoMessage() {}

func (x *ScriptingHarnessRunArgs) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessRunArgs.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessRunArgs) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{43}
}

func (x *ScriptingHarnessRunArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScriptingHarnessRunArgs) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type ScriptingHarnessBuildArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Directory string   `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	Args      []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ScriptingHarnessBuildArgs) Reset() {
	*x = ScriptingHarnessBuildArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessBuildArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessBuildArgs) ProtoMessage() {}

func (x *ScriptingHarnessBuildArgs) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessBuildArgs.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessBuildArgs) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{44}
}

func (x *ScriptingHarnessBuildArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScriptingHarnessBuildArgs) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ScriptingHarnessBuildArgs) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type ScriptingHarnessBuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome *OperationOutcome `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Path    string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ScriptingHarnessBuildResponse) Reset() {
	*x = ScriptingHarnessBuildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessBuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessBuildResponse) ProtoMessage() {}

func (x *ScriptingHarnessBuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessBuildResponse.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessBuildResponse) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{45}
}

func (x *ScriptingHarnessBuildResponse) GetOutcome() *OperationOutcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *ScriptingHarnessBuildResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ScriptingHarnessRunScriptArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Script string `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *ScriptingHarnessRunScriptArgs) Reset() {
	*x = ScriptingHarnessRunScriptArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessRunScriptArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessRunScriptArgs) ProtoMessage() {}

func (x *ScriptingHarnessRunScriptArgs) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessRunScriptArgs.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessRunScriptArgs) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{46}
}

func (x *ScriptingHarnessRunScriptArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScriptingHarnessRunScriptArgs) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

type ScriptingHarnessTestArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Directory string                         `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	Options   []*ScriptingHarnessTestOptions `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *ScriptingHarnessTestArgs) Reset() {
	*x = ScriptingHarnessTestArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessTestArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessTestArgs) ProtoMessage() {}

func (x *ScriptingHarnessTestArgs) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessTestArgs.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessTestArgs) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{47}
}

func (x *ScriptingHarnessTestArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScriptingHarnessTestArgs) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ScriptingHarnessTestArgs) GetOptions() []*ScriptingHarnessTestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ScriptingHarnessTestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args    []string           `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Pattern string             `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Timeout *duration.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Count   int32              `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ScriptingHarnessTestOptions) Reset() {
	*x = ScriptingHarnessTestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessTestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessTestOptions) ProtoMessage() {}

func (x *ScriptingHarnessTestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessTestOptions.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessTestOptions) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{48}
}

func (x *ScriptingHarnessTestOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScriptingHarnessTestOptions) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ScriptingHarnessTestOptions) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ScriptingHarnessTestOptions) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ScriptingHarnessTestOptions) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ScriptingHarnessTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartAt  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Duration *duration.Duration   `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Outcome  string               `protobuf:"bytes,4,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *ScriptingHarnessTestResult) Reset() {
	*x = ScriptingHarnessTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessTestResult) ProtoMessage() {}

func (x *ScriptingHarnessTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessTestResult.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessTestResult) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{49}
}

func (x *ScriptingHarnessTestResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScriptingHarnessTestResult) GetStartAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ScriptingHarnessTestResult) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ScriptingHarnessTestResult) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

type ScriptingHarnessTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome *OperationOutcome             `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Results []*ScriptingHarnessTestResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ScriptingHarnessTestResponse) Reset() {
	*x = ScriptingHarnessTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptingHarnessTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptingHarnessTestResponse) ProtoMessage() {}

func (x *ScriptingHarnessTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptingHarnessTestResponse.ProtoReflect.Descriptor instead.
func (*ScriptingHarnessTestResponse) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{50}
}

func (x *ScriptingHarnessTestResponse) GetOutcome() *OperationOutcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *ScriptingHarnessTestResponse) GetResults() []*ScriptingHarnessTestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type LoggingCacheCreateArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Options *OutputOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *LoggingCacheCreateArgs) Reset() {
	*x = LoggingCacheCreateArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingCacheCreateArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingCacheCreateArgs) ProtoMessage() {}

func (x *LoggingCacheCreateArgs) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingCacheCreateArgs.ProtoReflect.Descriptor instead.
func (*LoggingCacheCreateArgs) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{51}
}

func (x *LoggingCacheCreateArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoggingCacheCreateArgs) GetOptions() *OutputOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type LoggingCacheArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LoggingCacheArgs) Reset() {
	*x = LoggingCacheArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingCacheArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingCacheArgs) ProtoMessage() {}

func (x *LoggingCacheArgs) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingCacheArgs.ProtoReflect.Descriptor instead.
func (*LoggingCacheArgs) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{52}
}

func (x *LoggingCacheArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LoggingCacheInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome   *OperationOutcome    `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Id        string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ManagerID string               `protobuf:"bytes,3,opt,name=managerID,proto3" json:"managerID,omitempty"`
	Accessed  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=accessed,proto3" json:"accessed,omitempty"`
}

func (x *LoggingCacheInstance) Reset() {
	*x = LoggingCacheInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingCacheInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingCacheInstance) ProtoMessage() {}

func (x *LoggingCacheInstance) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingCacheInstance.ProtoReflect.Descriptor instead.
func (*LoggingCacheInstance) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{53}
}

func (x *LoggingCacheInstance) GetOutcome() *OperationOutcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *LoggingCacheInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoggingCacheInstance) GetManagerID() string {
	if x != nil {
		return x.ManagerID
	}
	return ""
}

func (x *LoggingCacheInstance) GetAccessed() *timestamp.Timestamp {
	if x != nil {
		return x.Accessed
	}
	return nil
}

type LoggingCacheSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome *OperationOutcome `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Id      string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Size    int64             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *LoggingCacheSize) Reset() {
	*x = LoggingCacheSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingCacheSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingCacheSize) ProtoMessage() {}

func (x *LoggingCacheSize) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingCacheSize.ProtoReflect.Descriptor instead.
func (*LoggingCacheSize) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{54}
}

func (x *LoggingCacheSize) GetOutcome() *OperationOutcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *LoggingCacheSize) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoggingCacheSize) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type LoggingPayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*LoggingPayloadData_Msg
	//	*LoggingPayloadData_Raw
	Data isLoggingPayloadData_Data `protobuf_oneof:"data"`
}

func (x *LoggingPayloadData) Reset() {
	*x = LoggingPayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingPayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingPayloadData) ProtoMessage() {}

func (x *LoggingPayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingPayloadData.ProtoReflect.Descriptor instead.
func (*LoggingPayloadData) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{55}
}

func (m *LoggingPayloadData) GetData() isLoggingPayloadData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *LoggingPayloadData) GetMsg() string {
	if x, ok := x.GetData().(*LoggingPayloadData_Msg); ok {
		return x.Msg
	}
	return ""
}

func (x *LoggingPayloadData) GetRaw() []byte {
	if x, ok := x.GetData().(*LoggingPayloadData_Raw); ok {
		return x.Raw
	}
	return nil
}

type isLoggingPayloadData_Data interface {
	isLoggingPayloadData_Data()
}

type LoggingPayloadData_Msg struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3,oneof"`
}

type LoggingPayloadData_Raw struct {
	Raw []byte `protobuf:"bytes,2,opt,name=raw,proto3,oneof"`
}

func (*LoggingPayloadData_Msg) isLoggingPayloadData_Data() {}

func (*LoggingPayloadData_Raw) isLoggingPayloadData_Data() {}

type LoggingPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggerID          string                `protobuf:"bytes,1,opt,name=LoggerID,proto3" json:"LoggerID,omitempty"`
	Priority          int32                 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Format            LoggingPayloadFormat  `protobuf:"varint,3,opt,name=format,proto3,enum=jasper.LoggingPayloadFormat" json:"format,omitempty"`
	IsMulti           bool                  `protobuf:"varint,4,opt,name=is_multi,json=isMulti,proto3" json:"is_multi,omitempty"`
	PreferSendToError bool                  `protobuf:"varint,5,opt,name=prefer_send_to_error,json=preferSendToError,proto3" json:"prefer_send_to_error,omitempty"`
	AddMetadata       bool                  `protobuf:"varint,6,opt,name=add_metadata,json=addMetadata,proto3" json:"add_metadata,omitempty"`
	Data              []*LoggingPayloadData `protobuf:"bytes,7,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LoggingPayload) Reset() {
	*x = LoggingPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jasper_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingPayload) ProtoMessage() {}

func (x *LoggingPayload) ProtoReflect() protoreflect.Message {
	mi := &file_jasper_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingPayload.ProtoReflect.Descriptor instead.
func (*LoggingPayload) Descriptor() ([]byte, []int) {
	return file_jasper_proto_rawDescGZIP(), []int{56}
}

func (x *LoggingPayload) GetLoggerID() string {
	if x != nil {
		return x.LoggerID
	}
	return ""
}

func (x *LoggingPayload) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *LoggingPayload) GetFormat() LoggingPayloadFormat {
	if x != nil {
		return x.Format
	}
	return LoggingPayloadFormat_FORMATUNKNONW
}

func (x *LoggingPayload) GetIsMulti() bool {
	if x != nil {
		return x.IsMulti
	}
	return false
}

func (x *LoggingPayload) GetPreferSendToError() bool {
	if x != nil {
		return x.PreferSendToError
	}
	return false
}

func (x *LoggingPayload) GetAddMetadata() bool {
	if x != nil {
		return x.AddMetadata
	}
	return false
}

func (x *LoggingPayload) GetData() []*LoggingPayloadData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_jasper_proto protoreflect.FileDescriptor

var file_jasper_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x04, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x04, 0x73, 0x75, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x6d, 0x6f, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x75, 0x6d, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x70,
	0x6c, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x12, 0x44, 0x0a, 0x0d, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x76, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x76,
	0x32, 0x12, 0x44, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x76, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x33, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x76, 0x33, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x52, 0x61,
	0x77, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x22, 0x42, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x22, 0x62, 0x0a, 0x0d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x73,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2d, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x57, 0x0a, 0x14, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x41, 0x0a,
	0x16, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x22, 0x66, 0x0a, 0x16, 0x53, 0x75, 0x6d, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x6d, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x15, 0x49, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x63,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x43, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x4e,
	0x0a, 0x0a, 0x53, 0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x6a,
	0x0a, 0x13, 0x53, 0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x70, 0x6c, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x75, 0x6e,
	0x6b, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x32, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x7c, 0x0a, 0x14, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x32, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0xeb, 0x05, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x1a, 0x37, 0x0a, 0x09,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x33, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x76, 0x33, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x56, 0x33, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x76, 0x33, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x69, 0x0a, 0x0f, 0x52,
	0x61, 0x77, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc5, 0x04, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x34, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6f, 0x6e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x09, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x22, 0x0a, 0x0a, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64,
	0x6f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x41, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x3a,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x1f, 0x0a, 0x07, 0x54,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x27, 0x0a,
	0x0f, 0x4a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x7d, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x22, 0x75, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x75, 0x6e, 0x65,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x6f, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4f, 0x70,
	0x74, 0x73, 0x22, 0x69, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x22, 0x25, 0x0a,
	0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x72, 0x6c, 0x73, 0x22, 0x4b, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x33, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4a, 0x61, 0x73, 0x70, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6f,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x83, 0x02, 0x0a, 0x16, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x76,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x73, 0x22, 0x5b, 0x0a, 0x17, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f, 0x73, 0x77, 0x65, 0x6c, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x70, 0x22, 0xa4, 0x03, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x47, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x72,
	0x6f, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x6f, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d, 0x0a, 0x17, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x5d, 0x0a, 0x19, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x67, 0x0a, 0x1d, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x47, 0x0a, 0x1d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e,
	0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1c,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x59,
	0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x01,
	0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x22, 0x6a, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x44, 0x0a, 0x12,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x2f,
	0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x2a, 0x5e, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x4f, 0x47, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x50, 0x4c, 0x41, 0x49, 0x4e,
	0x10, 0x03, 0x2a, 0x77, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x41, 0x57, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x41,
	0x57, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x42, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x41, 0x57,
	0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x14, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52,
	0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x46, 0x55, 0x4c, 0x10, 0x04, 0x2a, 0x65, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x53, 0x45, 0x52, 0x31, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x42, 0x52, 0x54, 0x10, 0x07, 0x2a, 0x56, 0x0a, 0x0d,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x54, 0x41, 0x52,
	0x47, 0x5a, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5a,
	0x49, 0x50, 0x10, 0x03, 0x2a, 0x31, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x5b, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x4e, 0x57,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x42, 0x53, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x32, 0xaf, 0x13, 0x0a, 0x14, 0x4a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x02, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x6a, 0x61,
	0x73, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x13, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x30, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x13,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x18, 0x2e, 0x6a, 0x61,
	0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65,
	0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x28, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x54,
	0x61, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x18,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x17, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x1a, 0x18,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x17, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4a, 0x61, 0x73,
	0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x50, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x6a, 0x61,
	0x73, 0x70, 0x65, 0x72, 0x2e, 0x4a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x17, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x4a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x1a, 0x13, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x15, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x12, 0x1a, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x17, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x12, 0x1a, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x1a, 0x18, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x12, 0x1f,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e,
	0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x15, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x21, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x25, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x19,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x75, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x25, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x24, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x1c, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65,
	0x74, 0x12, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x6a, 0x61,
	0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18,
	0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x12, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x16, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x13, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x48, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x6a, 0x61, 0x73,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x14, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0f,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x12,
	0x1e, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x18, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x6a, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x17, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e,
	0x4a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x1a,
	0x17, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x18, 0x2e, 0x6a, 0x61, 0x73,
	0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x6a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x18, 0x2e, 0x6a,
	0x61, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jasper_proto_rawDescOnce sync.Once
	file_jasper_proto_rawDescData = file_jasper_proto_rawDesc
)

func file_jasper_proto_rawDescGZIP() []byte {
	file_jasper_proto_rawDescOnce.Do(func() {
		file_jasper_proto_rawDescData = protoimpl.X.CompressGZIP(file_jasper_proto_rawDescData)
	})
	return file_jasper_proto_rawDescData
}

var file_jasper_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_jasper_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_jasper_proto_goTypes = []interface{}{
	(LogFormat)(0),                        // 0: jasper.LogFormat
	(RawLoggerConfigFormat)(0),            // 1: jasper.RawLoggerConfigFormat
	(FilterSpecifications)(0),             // 2: jasper.FilterSpecifications
	(Signals)(0),                          // 3: jasper.Signals
	(ArchiveFormat)(0),                    // 4: jasper.ArchiveFormat
	(SignalTriggerID)(0),                  // 5: jasper.SignalTriggerID
	(LoggingPayloadFormat)(0),             // 6: jasper.LoggingPayloadFormat
	(*LoggerConfig)(nil),                  // 7: jasper.LoggerConfig
	(*LogLevel)(nil),                      // 8: jasper.LogLevel
	(*BufferOptions)(nil),                 // 9: jasper.BufferOptions
	(*BaseOptions)(nil),                   // 10: jasper.BaseOptions
	(*DefaultLoggerOptions)(nil),          // 11: jasper.DefaultLoggerOptions
	(*FileLoggerOptions)(nil),             // 12: jasper.FileLoggerOptions
	(*InheritedLoggerOptions)(nil),        // 13: jasper.InheritedLoggerOptions
	(*SumoLogicLoggerOptions)(nil),        // 14: jasper.SumoLogicLoggerOptions
	(*InMemoryLoggerOptions)(nil),         // 15: jasper.InMemoryLoggerOptions
	(*SplunkInfo)(nil),                    // 16: jasper.SplunkInfo
	(*SplunkLoggerOptions)(nil),           // 17: jasper.SplunkLoggerOptions
	(*BuildloggerV2Info)(nil),             // 18: jasper.BuildloggerV2Info
	(*BuildloggerV2Options)(nil),          // 19: jasper.BuildloggerV2Options
	(*BuildloggerV3Info)(nil),             // 20: jasper.BuildloggerV3Info
	(*BuildloggerV3Options)(nil),          // 21: jasper.BuildloggerV3Options
	(*RawLoggerConfig)(nil),               // 22: jasper.RawLoggerConfig
	(*OutputOptions)(nil),                 // 23: jasper.OutputOptions
	(*CreateOptions)(nil),                 // 24: jasper.CreateOptions
	(*IDResponse)(nil),                    // 25: jasper.IDResponse
	(*ProcessInfo)(nil),                   // 26: jasper.ProcessInfo
	(*StatusResponse)(nil),                // 27: jasper.StatusResponse
	(*Filter)(nil),                        // 28: jasper.Filter
	(*SignalProcess)(nil),                 // 29: jasper.SignalProcess
	(*TagName)(nil),                       // 30: jasper.TagName
	(*ProcessTags)(nil),                   // 31: jasper.ProcessTags
	(*JasperProcessID)(nil),               // 32: jasper.JasperProcessID
	(*OperationOutcome)(nil),              // 33: jasper.OperationOutcome
	(*BuildOptions)(nil),                  // 34: jasper.BuildOptions
	(*MongoDBDownloadOptions)(nil),        // 35: jasper.MongoDBDownloadOptions
	(*CacheOptions)(nil),                  // 36: jasper.CacheOptions
	(*ArchiveOptions)(nil),                // 37: jasper.ArchiveOptions
	(*DownloadInfo)(nil),                  // 38: jasper.DownloadInfo
	(*WriteFileInfo)(nil),                 // 39: jasper.WriteFileInfo
	(*BuildloggerURLs)(nil),               // 40: jasper.BuildloggerURLs
	(*LogRequest)(nil),                    // 41: jasper.LogRequest
	(*LogStream)(nil),                     // 42: jasper.LogStream
	(*SignalTriggerParams)(nil),           // 43: jasper.SignalTriggerParams
	(*EventName)(nil),                     // 44: jasper.EventName
	(*ScriptingHarnessID)(nil),            // 45: jasper.ScriptingHarnessID
	(*ScriptingOptionsGolang)(nil),        // 46: jasper.ScriptingOptionsGolang
	(*ScriptingOptionsPython)(nil),        // 47: jasper.ScriptingOptionsPython
	(*ScriptingOptionsRoswell)(nil),       // 48: jasper.ScriptingOptionsRoswell
	(*ScriptingOptions)(nil),              // 49: jasper.ScriptingOptions
	(*ScriptingHarnessRunArgs)(nil),       // 50: jasper.ScriptingHarnessRunArgs
	(*ScriptingHarnessBuildArgs)(nil),     // 51: jasper.ScriptingHarnessBuildArgs
	(*ScriptingHarnessBuildResponse)(nil), // 52: jasper.ScriptingHarnessBuildResponse
	(*ScriptingHarnessRunScriptArgs)(nil), // 53: jasper.ScriptingHarnessRunScriptArgs
	(*ScriptingHarnessTestArgs)(nil),      // 54: jasper.ScriptingHarnessTestArgs
	(*ScriptingHarnessTestOptions)(nil),   // 55: jasper.ScriptingHarnessTestOptions
	(*ScriptingHarnessTestResult)(nil),    // 56: jasper.ScriptingHarnessTestResult
	(*ScriptingHarnessTestResponse)(nil),  // 57: jasper.ScriptingHarnessTestResponse
	(*LoggingCacheCreateArgs)(nil),        // 58: jasper.LoggingCacheCreateArgs
	(*LoggingCacheArgs)(nil),              // 59: jasper.LoggingCacheArgs
	(*LoggingCacheInstance)(nil),          // 60: jasper.LoggingCacheInstance
	(*LoggingCacheSize)(nil),              // 61: jasper.LoggingCacheSize
	(*LoggingPayloadData)(nil),            // 62: jasper.LoggingPayloadData
	(*LoggingPayload)(nil),                // 63: jasper.LoggingPayload
	nil,                                   // 64: jasper.BuildloggerV3Info.ArgsEntry
	nil,                                   // 65: jasper.CreateOptions.EnvironmentEntry
	nil,                                   // 66: jasper.ScriptingOptions.EnvironmentEntry
	(*timestamp.Timestamp)(nil),           // 67: google.protobuf.Timestamp
	(*duration.Duration)(nil),             // 68: google.protobuf.Duration
	(*empty.Empty)(nil),                   // 69: google.protobuf.Empty
}
var file_jasper_proto_depIdxs = []int32{
	11, // 0: jasper.LoggerConfig.default:type_name -> jasper.DefaultLoggerOptions
	12, // 1: jasper.LoggerConfig.file:type_name -> jasper.FileLoggerOptions
	13, // 2: jasper.LoggerConfig.inherited:type_name -> jasper.InheritedLoggerOptions
	14, // 3: jasper.LoggerConfig.sumo:type_name -> jasper.SumoLogicLoggerOptions
	15, // 4: jasper.LoggerConfig.in_memory:type_name -> jasper.InMemoryLoggerOptions
	17, // 5: jasper.LoggerConfig.splunk:type_name -> jasper.SplunkLoggerOptions
	19, // 6: jasper.LoggerConfig.buildloggerv2:type_name -> jasper.BuildloggerV2Options
	21, // 7: jasper.LoggerConfig.buildloggerv3:type_name -> jasper.BuildloggerV3Options
	22, // 8: jasper.LoggerConfig.raw:type_name -> jasper.RawLoggerConfig
	8,  // 9: jasper.BaseOptions.level:type_name -> jasper.LogLevel
	9,  // 10: jasper.BaseOptions.buffer:type_name -> jasper.BufferOptions
	0,  // 11: jasper.BaseOptions.format:type_name -> jasper.LogFormat
	10, // 12: jasper.DefaultLoggerOptions.base:type_name -> jasper.BaseOptions
	10, // 13: jasper.FileLoggerOptions.base:type_name -> jasper.BaseOptions
	10, // 14: jasper.InheritedLoggerOptions.base:type_name -> jasper.BaseOptions
	10, // 15: jasper.SumoLogicLoggerOptions.base:type_name -> jasper.BaseOptions
	10, // 16: jasper.InMemoryLoggerOptions.base:type_name -> jasper.BaseOptions
	16, // 17: jasper.SplunkLoggerOptions.splunk:type_name -> jasper.SplunkInfo
	10, // 18: jasper.SplunkLoggerOptions.base:type_name -> jasper.BaseOptions
	18, // 19: jasper.BuildloggerV2Options.buildlogger:type_name -> jasper.BuildloggerV2Info
	10, // 20: jasper.BuildloggerV2Options.base:type_name -> jasper.BaseOptions
	0,  // 21: jasper.BuildloggerV3Info.format:type_name -> jasper.LogFormat
	64, // 22: jasper.BuildloggerV3Info.args:type_name -> jasper.BuildloggerV3Info.ArgsEntry
	20, // 23: jasper.BuildloggerV3Options.buildloggerv3:type_name -> jasper.BuildloggerV3Info
	8,  // 24: jasper.BuildloggerV3Options.level:type_name -> jasper.LogLevel
	1,  // 25: jasper.RawLoggerConfig.format:type_name -> jasper.RawLoggerConfigFormat
	7,  // 26: jasper.OutputOptions.loggers:type_name -> jasper.LoggerConfig
	65, // 27: jasper.CreateOptions.environment:type_name -> jasper.CreateOptions.EnvironmentEntry
	24, // 28: jasper.CreateOptions.on_success:type_name -> jasper.CreateOptions
	24, // 29: jasper.CreateOptions.on_failure:type_name -> jasper.CreateOptions
	24, // 30: jasper.CreateOptions.on_timeout:type_name -> jasper.CreateOptions
	23, // 31: jasper.CreateOptions.output:type_name -> jasper.OutputOptions
	24, // 32: jasper.ProcessInfo.options:type_name -> jasper.CreateOptions
	67, // 33: jasper.ProcessInfo.start_at:type_name -> google.protobuf.Timestamp
	67, // 34: jasper.ProcessInfo.end_at:type_name -> google.protobuf.Timestamp
	2,  // 35: jasper.Filter.name:type_name -> jasper.FilterSpecifications
	32, // 36: jasper.SignalProcess.ProcessID:type_name -> jasper.JasperProcessID
	3,  // 37: jasper.SignalProcess.signal:type_name -> jasper.Signals
	34, // 38: jasper.MongoDBDownloadOptions.build_opts:type_name -> jasper.BuildOptions
	4,  // 39: jasper.ArchiveOptions.format:type_name -> jasper.ArchiveFormat
	37, // 40: jasper.DownloadInfo.archive_opts:type_name -> jasper.ArchiveOptions
	32, // 41: jasper.LogRequest.id:type_name -> jasper.JasperProcessID
	32, // 42: jasper.SignalTriggerParams.processID:type_name -> jasper.JasperProcessID
	5,  // 43: jasper.SignalTriggerParams.signalTriggerID:type_name -> jasper.SignalTriggerID
	46, // 44: jasper.ScriptingOptions.golang:type_name -> jasper.ScriptingOptionsGolang
	47, // 45: jasper.ScriptingOptions.python:type_name -> jasper.ScriptingOptionsPython
	48, // 46: jasper.ScriptingOptions.roswell:type_name -> jasper.ScriptingOptionsRoswell
	66, // 47: jasper.ScriptingOptions.environment:type_name -> jasper.ScriptingOptions.EnvironmentEntry
	23, // 48: jasper.ScriptingOptions.output:type_name -> jasper.OutputOptions
	33, // 49: jasper.ScriptingHarnessBuildResponse.outcome:type_name -> jasper.OperationOutcome
	55, // 50: jasper.ScriptingHarnessTestArgs.options:type_name -> jasper.ScriptingHarnessTestOptions
	68, // 51: jasper.ScriptingHarnessTestOptions.timeout:type_name -> google.protobuf.Duration
	67, // 52: jasper.ScriptingHarnessTestResult.start_at:type_name -> google.protobuf.Timestamp
	68, // 53: jasper.ScriptingHarnessTestResult.duration:type_name -> google.protobuf.Duration
	33, // 54: jasper.ScriptingHarnessTestResponse.outcome:type_name -> jasper.OperationOutcome
	56, // 55: jasper.ScriptingHarnessTestResponse.results:type_name -> jasper.ScriptingHarnessTestResult
	23, // 56: jasper.LoggingCacheCreateArgs.options:type_name -> jasper.OutputOptions
	33, // 57: jasper.LoggingCacheInstance.outcome:type_name -> jasper.OperationOutcome
	67, // 58: jasper.LoggingCacheInstance.accessed:type_name -> google.protobuf.Timestamp
	33, // 59: jasper.LoggingCacheSize.outcome:type_name -> jasper.OperationOutcome
	6,  // 60: jasper.LoggingPayload.format:type_name -> jasper.LoggingPayloadFormat
	62, // 61: jasper.LoggingPayload.data:type_name -> jasper.LoggingPayloadData
	69, // 62: jasper.JasperProcessManager.ID:input_type -> google.protobuf.Empty
	24, // 63: jasper.JasperProcessManager.Create:input_type -> jasper.CreateOptions
	28, // 64: jasper.JasperProcessManager.List:input_type -> jasper.Filter
	30, // 65: jasper.JasperProcessManager.Group:input_type -> jasper.TagName
	32, // 66: jasper.JasperProcessManager.Get:input_type -> jasper.JasperProcessID
	29, // 67: jasper.JasperProcessManager.Signal:input_type -> jasper.SignalProcess
	69, // 68: jasper.JasperProcessManager.Clear:input_type -> google.protobuf.Empty
	69, // 69: jasper.JasperProcessManager.Close:input_type -> google.protobuf.Empty
	39, // 70: jasper.JasperProcessManager.WriteFile:input_type -> jasper.WriteFileInfo
	31, // 71: jasper.JasperProcessManager.TagProcess:input_type -> jasper.ProcessTags
	32, // 72: jasper.JasperProcessManager.ResetTags:input_type -> jasper.JasperProcessID
	32, // 73: jasper.JasperProcessManager.GetTags:input_type -> jasper.JasperProcessID
	43, // 74: jasper.JasperProcessManager.RegisterSignalTriggerID:input_type -> jasper.SignalTriggerParams
	32, // 75: jasper.JasperProcessManager.Wait:input_type -> jasper.JasperProcessID
	32, // 76: jasper.JasperProcessManager.Respawn:input_type -> jasper.JasperProcessID
	45, // 77: jasper.JasperProcessManager.ScriptingHarnessSetup:input_type -> jasper.ScriptingHarnessID
	45, // 78: jasper.JasperProcessManager.ScriptingHarnessCleanup:input_type -> jasper.ScriptingHarnessID
	50, // 79: jasper.JasperProcessManager.ScriptingHarnessRun:input_type -> jasper.ScriptingHarnessRunArgs
	51, // 80: jasper.JasperProcessManager.ScriptingHarnessBuild:input_type -> jasper.ScriptingHarnessBuildArgs
	53, // 81: jasper.JasperProcessManager.ScriptingHarnessRunScript:input_type -> jasper.ScriptingHarnessRunScriptArgs
	54, // 82: jasper.JasperProcessManager.ScriptingHarnessTest:input_type -> jasper.ScriptingHarnessTestArgs
	58, // 83: jasper.JasperProcessManager.LoggingCacheCreate:input_type -> jasper.LoggingCacheCreateArgs
	59, // 84: jasper.JasperProcessManager.LoggingCacheGet:input_type -> jasper.LoggingCacheArgs
	59, // 85: jasper.JasperProcessManager.LoggingCacheRemove:input_type -> jasper.LoggingCacheArgs
	69, // 86: jasper.JasperProcessManager.LoggingCacheLen:input_type -> google.protobuf.Empty
	67, // 87: jasper.JasperProcessManager.LoggingCachePrune:input_type -> google.protobuf.Timestamp
	49, // 88: jasper.JasperProcessManager.ScriptingHarnessCreate:input_type -> jasper.ScriptingOptions
	45, // 89: jasper.JasperProcessManager.ScriptingHarnessGet:input_type -> jasper.ScriptingHarnessID
	69, // 90: jasper.JasperProcessManager.Status:input_type -> google.protobuf.Empty
	36, // 91: jasper.JasperProcessManager.ConfigureCache:input_type -> jasper.CacheOptions
	38, // 92: jasper.JasperProcessManager.DownloadFile:input_type -> jasper.DownloadInfo
	35, // 93: jasper.JasperProcessManager.DownloadMongoDB:input_type -> jasper.MongoDBDownloadOptions
	41, // 94: jasper.JasperProcessManager.GetLogStream:input_type -> jasper.LogRequest
	32, // 95: jasper.JasperProcessManager.GetBuildloggerURLs:input_type -> jasper.JasperProcessID
	44, // 96: jasper.JasperProcessManager.SignalEvent:input_type -> jasper.EventName
	63, // 97: jasper.JasperProcessManager.SendMessages:input_type -> jasper.LoggingPayload
	25, // 98: jasper.JasperProcessManager.ID:output_type -> jasper.IDResponse
	26, // 99: jasper.JasperProcessManager.Create:output_type -> jasper.ProcessInfo
	26, // 100: jasper.JasperProcessManager.List:output_type -> jasper.ProcessInfo
	26, // 101: jasper.JasperProcessManager.Group:output_type -> jasper.ProcessInfo
	26, // 102: jasper.JasperProcessManager.Get:output_type -> jasper.ProcessInfo
	33, // 103: jasper.JasperProcessManager.Signal:output_type -> jasper.OperationOutcome
	33, // 104: jasper.JasperProcessManager.Clear:output_type -> jasper.OperationOutcome
	33, // 105: jasper.JasperProcessManager.Close:output_type -> jasper.OperationOutcome
	33, // 106: jasper.JasperProcessManager.WriteFile:output_type -> jasper.OperationOutcome
	33, // 107: jasper.JasperProcessManager.TagProcess:output_type -> jasper.OperationOutcome
	33, // 108: jasper.JasperProcessManager.ResetTags:output_type -> jasper.OperationOutcome
	31, // 109: jasper.JasperProcessManager.GetTags:output_type -> jasper.ProcessTags
	33, // 110: jasper.JasperProcessManager.RegisterSignalTriggerID:output_type -> jasper.OperationOutcome
	33, // 111: jasper.JasperProcessManager.Wait:output_type -> jasper.OperationOutcome
	26, // 112: jasper.JasperProcessManager.Respawn:output_type -> jasper.ProcessInfo
	33, // 113: jasper.JasperProcessManager.ScriptingHarnessSetup:output_type -> jasper.OperationOutcome
	33, // 114: jasper.JasperProcessManager.ScriptingHarnessCleanup:output_type -> jasper.OperationOutcome
	33, // 115: jasper.JasperProcessManager.ScriptingHarnessRun:output_type -> jasper.OperationOutcome
	52, // 116: jasper.JasperProcessManager.ScriptingHarnessBuild:output_type -> jasper.ScriptingHarnessBuildResponse
	33, // 117: jasper.JasperProcessManager.ScriptingHarnessRunScript:output_type -> jasper.OperationOutcome
	57, // 118: jasper.JasperProcessManager.ScriptingHarnessTest:output_type -> jasper.ScriptingHarnessTestResponse
	60, // 119: jasper.JasperProcessManager.LoggingCacheCreate:output_type -> jasper.LoggingCacheInstance
	60, // 120: jasper.JasperProcessManager.LoggingCacheGet:output_type -> jasper.LoggingCacheInstance
	33, // 121: jasper.JasperProcessManager.LoggingCacheRemove:output_type -> jasper.OperationOutcome
	61, // 122: jasper.JasperProcessManager.LoggingCacheLen:output_type -> jasper.LoggingCacheSize
	33, // 123: jasper.JasperProcessManager.LoggingCachePrune:output_type -> jasper.OperationOutcome
	45, // 124: jasper.JasperProcessManager.ScriptingHarnessCreate:output_type -> jasper.ScriptingHarnessID
	33, // 125: jasper.JasperProcessManager.ScriptingHarnessGet:output_type -> jasper.OperationOutcome
	27, // 126: jasper.JasperProcessManager.Status:output_type -> jasper.StatusResponse
	33, // 127: jasper.JasperProcessManager.ConfigureCache:output_type -> jasper.OperationOutcome
	33, // 128: jasper.JasperProcessManager.DownloadFile:output_type -> jasper.OperationOutcome
	33, // 129: jasper.JasperProcessManager.DownloadMongoDB:output_type -> jasper.OperationOutcome
	42, // 130: jasper.JasperProcessManager.GetLogStream:output_type -> jasper.LogStream
	40, // 131: jasper.JasperProcessManager.GetBuildloggerURLs:output_type -> jasper.BuildloggerURLs
	33, // 132: jasper.JasperProcessManager.SignalEvent:output_type -> jasper.OperationOutcome
	33, // 133: jasper.JasperProcessManager.SendMessages:output_type -> jasper.OperationOutcome
	98, // [98:134] is the sub-list for method output_type
	62, // [62:98] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_jasper_proto_init() }
func file_jasper_proto_init() {
	if File_jasper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jasper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultLoggerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLoggerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InheritedLoggerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumoLogicLoggerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InMemoryLoggerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplunkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplunkLoggerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildloggerV2Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildloggerV2Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildloggerV3Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildloggerV3Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawLoggerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JasperProcessID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoDBDownloadOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildloggerURLs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalTriggerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingOptionsGolang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingOptionsPython); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingOptionsRoswell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessRunArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessBuildArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessBuildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessRunScriptArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessTestArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessTestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptingHarnessTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingCacheCreateArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingCacheArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingCacheInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingCacheSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingPayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jasper_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jasper_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LoggerConfig_Default)(nil),
		(*LoggerConfig_File)(nil),
		(*LoggerConfig_Inherited)(nil),
		(*LoggerConfig_Sumo)(nil),
		(*LoggerConfig_InMemory)(nil),
		(*LoggerConfig_Splunk)(nil),
		(*LoggerConfig_Buildloggerv2)(nil),
		(*LoggerConfig_Buildloggerv3)(nil),
		(*LoggerConfig_Raw)(nil),
	}
	file_jasper_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*ScriptingOptions_Golang)(nil),
		(*ScriptingOptions_Python)(nil),
		(*ScriptingOptions_Roswell)(nil),
	}
	file_jasper_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*LoggingPayloadData_Msg)(nil),
		(*LoggingPayloadData_Raw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jasper_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jasper_proto_goTypes,
		DependencyIndexes: file_jasper_proto_depIdxs,
		EnumInfos:         file_jasper_proto_enumTypes,
		MessageInfos:      file_jasper_proto_msgTypes,
	}.Build()
	File_jasper_proto = out.File
	file_jasper_proto_rawDesc = nil
	file_jasper_proto_goTypes = nil
	file_jasper_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JasperProcessManagerClient is the client API for JasperProcessManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JasperProcessManagerClient interface {
	// Manager functions
	ID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IDResponse, error)
	Create(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*ProcessInfo, error)
	List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (JasperProcessManager_ListClient, error)
	Group(ctx context.Context, in *TagName, opts ...grpc.CallOption) (JasperProcessManager_GroupClient, error)
	Get(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error)
	Signal(ctx context.Context, in *SignalProcess, opts ...grpc.CallOption) (*OperationOutcome, error)
	Clear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error)
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error)
	WriteFile(ctx context.Context, opts ...grpc.CallOption) (JasperProcessManager_WriteFileClient, error)
	// Process functions
	TagProcess(ctx context.Context, in *ProcessTags, opts ...grpc.CallOption) (*OperationOutcome, error)
	ResetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	GetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessTags, error)
	RegisterSignalTriggerID(ctx context.Context, in *SignalTriggerParams, opts ...grpc.CallOption) (*OperationOutcome, error)
	Wait(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	Respawn(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error)
	// scripting.Harness functions
	ScriptingHarnessSetup(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	ScriptingHarnessCleanup(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	ScriptingHarnessRun(ctx context.Context, in *ScriptingHarnessRunArgs, opts ...grpc.CallOption) (*OperationOutcome, error)
	ScriptingHarnessBuild(ctx context.Context, in *ScriptingHarnessBuildArgs, opts ...grpc.CallOption) (*ScriptingHarnessBuildResponse, error)
	ScriptingHarnessRunScript(ctx context.Context, in *ScriptingHarnessRunScriptArgs, opts ...grpc.CallOption) (*OperationOutcome, error)
	ScriptingHarnessTest(ctx context.Context, in *ScriptingHarnessTestArgs, opts ...grpc.CallOption) (*ScriptingHarnessTestResponse, error)
	// LoggingCache functions
	LoggingCacheCreate(ctx context.Context, in *LoggingCacheCreateArgs, opts ...grpc.CallOption) (*LoggingCacheInstance, error)
	LoggingCacheGet(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*LoggingCacheInstance, error)
	LoggingCacheRemove(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*OperationOutcome, error)
	LoggingCacheLen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LoggingCacheSize, error)
	LoggingCachePrune(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*OperationOutcome, error)
	// Remote specific functions
	ScriptingHarnessCreate(ctx context.Context, in *ScriptingOptions, opts ...grpc.CallOption) (*ScriptingHarnessID, error)
	ScriptingHarnessGet(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	ConfigureCache(ctx context.Context, in *CacheOptions, opts ...grpc.CallOption) (*OperationOutcome, error)
	DownloadFile(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error)
	DownloadMongoDB(ctx context.Context, in *MongoDBDownloadOptions, opts ...grpc.CallOption) (*OperationOutcome, error)
	GetLogStream(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogStream, error)
	GetBuildloggerURLs(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*BuildloggerURLs, error)
	SignalEvent(ctx context.Context, in *EventName, opts ...grpc.CallOption) (*OperationOutcome, error)
	SendMessages(ctx context.Context, in *LoggingPayload, opts ...grpc.CallOption) (*OperationOutcome, error)
}

type jasperProcessManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJasperProcessManagerClient(cc grpc.ClientConnInterface) JasperProcessManagerClient {
	return &jasperProcessManagerClient{cc}
}

func (c *jasperProcessManagerClient) ID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Create(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (JasperProcessManager_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[0], "/jasper.JasperProcessManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JasperProcessManager_ListClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type jasperProcessManagerListClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerListClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) Group(ctx context.Context, in *TagName, opts ...grpc.CallOption) (JasperProcessManager_GroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[1], "/jasper.JasperProcessManager/Group", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JasperProcessManager_GroupClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type jasperProcessManagerGroupClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerGroupClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) Get(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Signal(ctx context.Context, in *SignalProcess, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Signal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Clear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) WriteFile(ctx context.Context, opts ...grpc.CallOption) (JasperProcessManager_WriteFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[2], "/jasper.JasperProcessManager/WriteFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerWriteFileClient{stream}
	return x, nil
}

type JasperProcessManager_WriteFileClient interface {
	Send(*WriteFileInfo) error
	CloseAndRecv() (*OperationOutcome, error)
	grpc.ClientStream
}

type jasperProcessManagerWriteFileClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerWriteFileClient) Send(m *WriteFileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jasperProcessManagerWriteFileClient) CloseAndRecv() (*OperationOutcome, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OperationOutcome)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) TagProcess(ctx context.Context, in *ProcessTags, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/TagProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ResetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ResetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessTags, error) {
	out := new(ProcessTags)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) RegisterSignalTriggerID(ctx context.Context, in *SignalTriggerParams, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/RegisterSignalTriggerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Wait(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Respawn(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Respawn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessSetup(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessCleanup(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessCleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessRun(ctx context.Context, in *ScriptingHarnessRunArgs, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessBuild(ctx context.Context, in *ScriptingHarnessBuildArgs, opts ...grpc.CallOption) (*ScriptingHarnessBuildResponse, error) {
	out := new(ScriptingHarnessBuildResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessRunScript(ctx context.Context, in *ScriptingHarnessRunScriptArgs, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessRunScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessTest(ctx context.Context, in *ScriptingHarnessTestArgs, opts ...grpc.CallOption) (*ScriptingHarnessTestResponse, error) {
	out := new(ScriptingHarnessTestResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheCreate(ctx context.Context, in *LoggingCacheCreateArgs, opts ...grpc.CallOption) (*LoggingCacheInstance, error) {
	out := new(LoggingCacheInstance)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheGet(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*LoggingCacheInstance, error) {
	out := new(LoggingCacheInstance)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheRemove(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheLen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LoggingCacheSize, error) {
	out := new(LoggingCacheSize)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCachePrune(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCachePrune", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessCreate(ctx context.Context, in *ScriptingOptions, opts ...grpc.CallOption) (*ScriptingHarnessID, error) {
	out := new(ScriptingHarnessID)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessGet(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ConfigureCache(ctx context.Context, in *CacheOptions, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ConfigureCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadFile(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadMongoDB(ctx context.Context, in *MongoDBDownloadOptions, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadMongoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetLogStream(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogStream, error) {
	out := new(LogStream)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetLogStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetBuildloggerURLs(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*BuildloggerURLs, error) {
	out := new(BuildloggerURLs)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetBuildloggerURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) SignalEvent(ctx context.Context, in *EventName, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/SignalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) SendMessages(ctx context.Context, in *LoggingPayload, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/SendMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JasperProcessManagerServer is the server API for JasperProcessManager service.
type JasperProcessManagerServer interface {
	// Manager functions
	ID(context.Context, *empty.Empty) (*IDResponse, error)
	Create(context.Context, *CreateOptions) (*ProcessInfo, error)
	List(*Filter, JasperProcessManager_ListServer) error
	Group(*TagName, JasperProcessManager_GroupServer) error
	Get(context.Context, *JasperProcessID) (*ProcessInfo, error)
	Signal(context.Context, *SignalProcess) (*OperationOutcome, error)
	Clear(context.Context, *empty.Empty) (*OperationOutcome, error)
	Close(context.Context, *empty.Empty) (*OperationOutcome, error)
	WriteFile(JasperProcessManager_WriteFileServer) error
	// Process functions
	TagProcess(context.Context, *ProcessTags) (*OperationOutcome, error)
	ResetTags(context.Context, *JasperProcessID) (*OperationOutcome, error)
	GetTags(context.Context, *JasperProcessID) (*ProcessTags, error)
	RegisterSignalTriggerID(context.Context, *SignalTriggerParams) (*OperationOutcome, error)
	Wait(context.Context, *JasperProcessID) (*OperationOutcome, error)
	Respawn(context.Context, *JasperProcessID) (*ProcessInfo, error)
	// scripting.Harness functions
	ScriptingHarnessSetup(context.Context, *ScriptingHarnessID) (*OperationOutcome, error)
	ScriptingHarnessCleanup(context.Context, *ScriptingHarnessID) (*OperationOutcome, error)
	ScriptingHarnessRun(context.Context, *ScriptingHarnessRunArgs) (*OperationOutcome, error)
	ScriptingHarnessBuild(context.Context, *ScriptingHarnessBuildArgs) (*ScriptingHarnessBuildResponse, error)
	ScriptingHarnessRunScript(context.Context, *ScriptingHarnessRunScriptArgs) (*OperationOutcome, error)
	ScriptingHarnessTest(context.Context, *ScriptingHarnessTestArgs) (*ScriptingHarnessTestResponse, error)
	// LoggingCache functions
	LoggingCacheCreate(context.Context, *LoggingCacheCreateArgs) (*LoggingCacheInstance, error)
	LoggingCacheGet(context.Context, *LoggingCacheArgs) (*LoggingCacheInstance, error)
	LoggingCacheRemove(context.Context, *LoggingCacheArgs) (*OperationOutcome, error)
	LoggingCacheLen(context.Context, *empty.Empty) (*LoggingCacheSize, error)
	LoggingCachePrune(context.Context, *timestamp.Timestamp) (*OperationOutcome, error)
	// Remote specific functions
	ScriptingHarnessCreate(context.Context, *ScriptingOptions) (*ScriptingHarnessID, error)
	ScriptingHarnessGet(context.Context, *ScriptingHarnessID) (*OperationOutcome, error)
	Status(context.Context, *empty.Empty) (*StatusResponse, error)
	ConfigureCache(context.Context, *CacheOptions) (*OperationOutcome, error)
	DownloadFile(context.Context, *DownloadInfo) (*OperationOutcome, error)
	DownloadMongoDB(context.Context, *MongoDBDownloadOptions) (*OperationOutcome, error)
	GetLogStream(context.Context, *LogRequest) (*LogStream, error)
	GetBuildloggerURLs(context.Context, *JasperProcessID) (*BuildloggerURLs, error)
	SignalEvent(context.Context, *EventName) (*OperationOutcome, error)
	SendMessages(context.Context, *LoggingPayload) (*OperationOutcome, error)
}

// UnimplementedJasperProcessManagerServer can be embedded to have forward compatible implementations.
type UnimplementedJasperProcessManagerServer struct {
}

func (*UnimplementedJasperProcessManagerServer) ID(context.Context, *empty.Empty) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ID not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Create(context.Context, *CreateOptions) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedJasperProcessManagerServer) List(*Filter, JasperProcessManager_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Group(*TagName, JasperProcessManager_GroupServer) error {
	return status.Errorf(codes.Unimplemented, "method Group not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Get(context.Context, *JasperProcessID) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Signal(context.Context, *SignalProcess) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Clear(context.Context, *empty.Empty) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Close(context.Context, *empty.Empty) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedJasperProcessManagerServer) WriteFile(JasperProcessManager_WriteFileServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (*UnimplementedJasperProcessManagerServer) TagProcess(context.Context, *ProcessTags) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagProcess not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ResetTags(context.Context, *JasperProcessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetTags not implemented")
}
func (*UnimplementedJasperProcessManagerServer) GetTags(context.Context, *JasperProcessID) (*ProcessTags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (*UnimplementedJasperProcessManagerServer) RegisterSignalTriggerID(context.Context, *SignalTriggerParams) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSignalTriggerID not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Wait(context.Context, *JasperProcessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Respawn(context.Context, *JasperProcessID) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respawn not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessSetup(context.Context, *ScriptingHarnessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessSetup not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessCleanup(context.Context, *ScriptingHarnessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessCleanup not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessRun(context.Context, *ScriptingHarnessRunArgs) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessRun not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessBuild(context.Context, *ScriptingHarnessBuildArgs) (*ScriptingHarnessBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessBuild not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessRunScript(context.Context, *ScriptingHarnessRunScriptArgs) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessRunScript not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessTest(context.Context, *ScriptingHarnessTestArgs) (*ScriptingHarnessTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessTest not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheCreate(context.Context, *LoggingCacheCreateArgs) (*LoggingCacheInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheCreate not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheGet(context.Context, *LoggingCacheArgs) (*LoggingCacheInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheGet not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheRemove(context.Context, *LoggingCacheArgs) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheRemove not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheLen(context.Context, *empty.Empty) (*LoggingCacheSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheLen not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCachePrune(context.Context, *timestamp.Timestamp) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCachePrune not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessCreate(context.Context, *ScriptingOptions) (*ScriptingHarnessID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessCreate not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessGet(context.Context, *ScriptingHarnessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessGet not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Status(context.Context, *empty.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ConfigureCache(context.Context, *CacheOptions) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCache not implemented")
}
func (*UnimplementedJasperProcessManagerServer) DownloadFile(context.Context, *DownloadInfo) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (*UnimplementedJasperProcessManagerServer) DownloadMongoDB(context.Context, *MongoDBDownloadOptions) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMongoDB not implemented")
}
func (*UnimplementedJasperProcessManagerServer) GetLogStream(context.Context, *LogRequest) (*LogStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogStream not implemented")
}
func (*UnimplementedJasperProcessManagerServer) GetBuildloggerURLs(context.Context, *JasperProcessID) (*BuildloggerURLs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildloggerURLs not implemented")
}
func (*UnimplementedJasperProcessManagerServer) SignalEvent(context.Context, *EventName) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalEvent not implemented")
}
func (*UnimplementedJasperProcessManagerServer) SendMessages(context.Context, *LoggingPayload) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}

func RegisterJasperProcessManagerServer(s *grpc.Server, srv JasperProcessManagerServer) {
	s.RegisterService(&_JasperProcessManager_serviceDesc, srv)
}

func _JasperProcessManager_ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Create(ctx, req.(*CreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JasperProcessManagerServer).List(m, &jasperProcessManagerListServer{stream})
}

type JasperProcessManager_ListServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type jasperProcessManagerListServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerListServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _JasperProcessManager_Group_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JasperProcessManagerServer).Group(m, &jasperProcessManagerGroupServer{stream})
}

type JasperProcessManager_GroupServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type jasperProcessManagerGroupServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerGroupServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _JasperProcessManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Get(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Signal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Signal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Signal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Signal(ctx, req.(*SignalProcess))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Clear(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_WriteFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JasperProcessManagerServer).WriteFile(&jasperProcessManagerWriteFileServer{stream})
}

type JasperProcessManager_WriteFileServer interface {
	SendAndClose(*OperationOutcome) error
	Recv() (*WriteFileInfo, error)
	grpc.ServerStream
}

type jasperProcessManagerWriteFileServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerWriteFileServer) SendAndClose(m *OperationOutcome) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jasperProcessManagerWriteFileServer) Recv() (*WriteFileInfo, error) {
	m := new(WriteFileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JasperProcessManager_TagProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).TagProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/TagProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).TagProcess(ctx, req.(*ProcessTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ResetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ResetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ResetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ResetTags(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetTags(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_RegisterSignalTriggerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalTriggerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).RegisterSignalTriggerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/RegisterSignalTriggerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).RegisterSignalTriggerID(ctx, req.(*SignalTriggerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Wait(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Respawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Respawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Respawn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Respawn(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessSetup(ctx, req.(*ScriptingHarnessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessCleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessCleanup(ctx, req.(*ScriptingHarnessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessRunArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessRun(ctx, req.(*ScriptingHarnessRunArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessBuildArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessBuild(ctx, req.(*ScriptingHarnessBuildArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessRunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessRunScriptArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessRunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessRunScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessRunScript(ctx, req.(*ScriptingHarnessRunScriptArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessTestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessTest(ctx, req.(*ScriptingHarnessTestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingCacheCreateArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheCreate(ctx, req.(*LoggingCacheCreateArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingCacheArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheGet(ctx, req.(*LoggingCacheArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingCacheArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheRemove(ctx, req.(*LoggingCacheArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheLen(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCachePrune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCachePrune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCachePrune",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCachePrune(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessCreate(ctx, req.(*ScriptingOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessGet(ctx, req.(*ScriptingHarnessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ConfigureCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ConfigureCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ConfigureCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ConfigureCache(ctx, req.(*CacheOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadFile(ctx, req.(*DownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadMongoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoDBDownloadOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadMongoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadMongoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadMongoDB(ctx, req.(*MongoDBDownloadOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetLogStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetLogStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetLogStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetLogStream(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetBuildloggerURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetBuildloggerURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetBuildloggerURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetBuildloggerURLs(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_SignalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).SignalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/SignalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).SignalEvent(ctx, req.(*EventName))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_SendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).SendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/SendMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).SendMessages(ctx, req.(*LoggingPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _JasperProcessManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jasper.JasperProcessManager",
	HandlerType: (*JasperProcessManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ID",
			Handler:    _JasperProcessManager_ID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _JasperProcessManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _JasperProcessManager_Get_Handler,
		},
		{
			MethodName: "Signal",
			Handler:    _JasperProcessManager_Signal_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _JasperProcessManager_Clear_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _JasperProcessManager_Close_Handler,
		},
		{
			MethodName: "TagProcess",
			Handler:    _JasperProcessManager_TagProcess_Handler,
		},
		{
			MethodName: "ResetTags",
			Handler:    _JasperProcessManager_ResetTags_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _JasperProcessManager_GetTags_Handler,
		},
		{
			MethodName: "RegisterSignalTriggerID",
			Handler:    _JasperProcessManager_RegisterSignalTriggerID_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _JasperProcessManager_Wait_Handler,
		},
		{
			MethodName: "Respawn",
			Handler:    _JasperProcessManager_Respawn_Handler,
		},
		{
			MethodName: "ScriptingHarnessSetup",
			Handler:    _JasperProcessManager_ScriptingHarnessSetup_Handler,
		},
		{
			MethodName: "ScriptingHarnessCleanup",
			Handler:    _JasperProcessManager_ScriptingHarnessCleanup_Handler,
		},
		{
			MethodName: "ScriptingHarnessRun",
			Handler:    _JasperProcessManager_ScriptingHarnessRun_Handler,
		},
		{
			MethodName: "ScriptingHarnessBuild",
			Handler:    _JasperProcessManager_ScriptingHarnessBuild_Handler,
		},
		{
			MethodName: "ScriptingHarnessRunScript",
			Handler:    _JasperProcessManager_ScriptingHarnessRunScript_Handler,
		},
		{
			MethodName: "ScriptingHarnessTest",
			Handler:    _JasperProcessManager_ScriptingHarnessTest_Handler,
		},
		{
			MethodName: "LoggingCacheCreate",
			Handler:    _JasperProcessManager_LoggingCacheCreate_Handler,
		},
		{
			MethodName: "LoggingCacheGet",
			Handler:    _JasperProcessManager_LoggingCacheGet_Handler,
		},
		{
			MethodName: "LoggingCacheRemove",
			Handler:    _JasperProcessManager_LoggingCacheRemove_Handler,
		},
		{
			MethodName: "LoggingCacheLen",
			Handler:    _JasperProcessManager_LoggingCacheLen_Handler,
		},
		{
			MethodName: "LoggingCachePrune",
			Handler:    _JasperProcessManager_LoggingCachePrune_Handler,
		},
		{
			MethodName: "ScriptingHarnessCreate",
			Handler:    _JasperProcessManager_ScriptingHarnessCreate_Handler,
		},
		{
			MethodName: "ScriptingHarnessGet",
			Handler:    _JasperProcessManager_ScriptingHarnessGet_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _JasperProcessManager_Status_Handler,
		},
		{
			MethodName: "ConfigureCache",
			Handler:    _JasperProcessManager_ConfigureCache_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _JasperProcessManager_DownloadFile_Handler,
		},
		{
			MethodName: "DownloadMongoDB",
			Handler:    _JasperProcessManager_DownloadMongoDB_Handler,
		},
		{
			MethodName: "GetLogStream",
			Handler:    _JasperProcessManager_GetLogStream_Handler,
		},
		{
			MethodName: "GetBuildloggerURLs",
			Handler:    _JasperProcessManager_GetBuildloggerURLs_Handler,
		},
		{
			MethodName: "SignalEvent",
			Handler:    _JasperProcessManager_SignalEvent_Handler,
		},
		{
			MethodName: "SendMessages",
			Handler:    _JasperProcessManager_SendMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _JasperProcessManager_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Group",
			Handler:       _JasperProcessManager_Group_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteFile",
			Handler:       _JasperProcessManager_WriteFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "jasper.proto",
}
