// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jasper.proto

package internal

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogFormat int32

const (
	LogFormat_LOGFORMATUNKNOWN LogFormat = 0
	LogFormat_LOGFORMATPLAIN   LogFormat = 1
	LogFormat_LOGFORMATJSON    LogFormat = 2
	LogFormat_LOGFORMATBSON    LogFormat = 3
	LogFormat_LOGFORMATDEFAULT LogFormat = 4
)

var LogFormat_name = map[int32]string{
	0: "LOGFORMATUNKNOWN",
	1: "LOGFORMATPLAIN",
	2: "LOGFORMATJSON",
	3: "LOGFORMATBSON",
	4: "LOGFORMATDEFAULT",
}

var LogFormat_value = map[string]int32{
	"LOGFORMATUNKNOWN": 0,
	"LOGFORMATPLAIN":   1,
	"LOGFORMATJSON":    2,
	"LOGFORMATBSON":    3,
	"LOGFORMATDEFAULT": 4,
}

func (x LogFormat) String() string {
	return proto.EnumName(LogFormat_name, int32(x))
}

func (LogFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{0}
}

type RawLoggerConfigFormat int32

const (
	RawLoggerConfigFormat_RAWLOGGERCONFIGFORMATJSON    RawLoggerConfigFormat = 0
	RawLoggerConfigFormat_RAWLOGGERCONFIGFORMATBSON    RawLoggerConfigFormat = 1
	RawLoggerConfigFormat_RAWLOGGERCONFIGFORMATUNKNOWN RawLoggerConfigFormat = 2
)

var RawLoggerConfigFormat_name = map[int32]string{
	0: "RAWLOGGERCONFIGFORMATJSON",
	1: "RAWLOGGERCONFIGFORMATBSON",
	2: "RAWLOGGERCONFIGFORMATUNKNOWN",
}

var RawLoggerConfigFormat_value = map[string]int32{
	"RAWLOGGERCONFIGFORMATJSON":    0,
	"RAWLOGGERCONFIGFORMATBSON":    1,
	"RAWLOGGERCONFIGFORMATUNKNOWN": 2,
}

func (x RawLoggerConfigFormat) String() string {
	return proto.EnumName(RawLoggerConfigFormat_name, int32(x))
}

func (RawLoggerConfigFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{1}
}

type FilterSpecifications int32

const (
	FilterSpecifications_ALL        FilterSpecifications = 0
	FilterSpecifications_RUNNING    FilterSpecifications = 1
	FilterSpecifications_TERMINATED FilterSpecifications = 2
	FilterSpecifications_FAILED     FilterSpecifications = 3
	FilterSpecifications_SUCCESSFUL FilterSpecifications = 4
)

var FilterSpecifications_name = map[int32]string{
	0: "ALL",
	1: "RUNNING",
	2: "TERMINATED",
	3: "FAILED",
	4: "SUCCESSFUL",
}

var FilterSpecifications_value = map[string]int32{
	"ALL":        0,
	"RUNNING":    1,
	"TERMINATED": 2,
	"FAILED":     3,
	"SUCCESSFUL": 4,
}

func (x FilterSpecifications) String() string {
	return proto.EnumName(FilterSpecifications_name, int32(x))
}

func (FilterSpecifications) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{2}
}

type Signals int32

const (
	Signals_UNKNOWN   Signals = 0
	Signals_TERMINATE Signals = 1
	Signals_KILL      Signals = 2
	Signals_HANGUP    Signals = 3
	Signals_INIT      Signals = 4
	Signals_USER1     Signals = 5
	Signals_USER2     Signals = 6
	Signals_ABRT      Signals = 7
)

var Signals_name = map[int32]string{
	0: "UNKNOWN",
	1: "TERMINATE",
	2: "KILL",
	3: "HANGUP",
	4: "INIT",
	5: "USER1",
	6: "USER2",
	7: "ABRT",
}

var Signals_value = map[string]int32{
	"UNKNOWN":   0,
	"TERMINATE": 1,
	"KILL":      2,
	"HANGUP":    3,
	"INIT":      4,
	"USER1":     5,
	"USER2":     6,
	"ABRT":      7,
}

func (x Signals) String() string {
	return proto.EnumName(Signals_name, int32(x))
}

func (Signals) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{3}
}

type ArchiveFormat int32

const (
	ArchiveFormat_ARCHIVEUNKNOWN ArchiveFormat = 0
	ArchiveFormat_ARCHIVEAUTO    ArchiveFormat = 1
	ArchiveFormat_ARCHIVETARGZ   ArchiveFormat = 2
	ArchiveFormat_ARCHIVEZIP     ArchiveFormat = 3
)

var ArchiveFormat_name = map[int32]string{
	0: "ARCHIVEUNKNOWN",
	1: "ARCHIVEAUTO",
	2: "ARCHIVETARGZ",
	3: "ARCHIVEZIP",
}

var ArchiveFormat_value = map[string]int32{
	"ARCHIVEUNKNOWN": 0,
	"ARCHIVEAUTO":    1,
	"ARCHIVETARGZ":   2,
	"ARCHIVEZIP":     3,
}

func (x ArchiveFormat) String() string {
	return proto.EnumName(ArchiveFormat_name, int32(x))
}

func (ArchiveFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{4}
}

type SignalTriggerID int32

const (
	SignalTriggerID_NONE             SignalTriggerID = 0
	SignalTriggerID_CLEANTERMINATION SignalTriggerID = 1
)

var SignalTriggerID_name = map[int32]string{
	0: "NONE",
	1: "CLEANTERMINATION",
}

var SignalTriggerID_value = map[string]int32{
	"NONE":             0,
	"CLEANTERMINATION": 1,
}

func (x SignalTriggerID) String() string {
	return proto.EnumName(SignalTriggerID_name, int32(x))
}

func (SignalTriggerID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{5}
}

type LoggingPayloadFormat int32

const (
	LoggingPayloadFormat_FORMATUNKNONW LoggingPayloadFormat = 0
	LoggingPayloadFormat_FORMATBSON    LoggingPayloadFormat = 1
	LoggingPayloadFormat_FORMATJSON    LoggingPayloadFormat = 2
	LoggingPayloadFormat_FORMATSTRING  LoggingPayloadFormat = 3
)

var LoggingPayloadFormat_name = map[int32]string{
	0: "FORMATUNKNONW",
	1: "FORMATBSON",
	2: "FORMATJSON",
	3: "FORMATSTRING",
}

var LoggingPayloadFormat_value = map[string]int32{
	"FORMATUNKNONW": 0,
	"FORMATBSON":    1,
	"FORMATJSON":    2,
	"FORMATSTRING":  3,
}

func (x LoggingPayloadFormat) String() string {
	return proto.EnumName(LoggingPayloadFormat_name, int32(x))
}

func (LoggingPayloadFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{6}
}

type LoggerConfig struct {
	// Types that are valid to be assigned to Producer:
	//	*LoggerConfig_Default
	//	*LoggerConfig_File
	//	*LoggerConfig_Inherited
	//	*LoggerConfig_InMemory
	//	*LoggerConfig_Splunk
	//	*LoggerConfig_Buildloggerv2
	//	*LoggerConfig_Buildloggerv3
	//	*LoggerConfig_Raw
	Producer             isLoggerConfig_Producer `protobuf_oneof:"producer"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LoggerConfig) Reset()         { *m = LoggerConfig{} }
func (m *LoggerConfig) String() string { return proto.CompactTextString(m) }
func (*LoggerConfig) ProtoMessage()    {}
func (*LoggerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{0}
}

func (m *LoggerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggerConfig.Unmarshal(m, b)
}
func (m *LoggerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggerConfig.Marshal(b, m, deterministic)
}
func (m *LoggerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggerConfig.Merge(m, src)
}
func (m *LoggerConfig) XXX_Size() int {
	return xxx_messageInfo_LoggerConfig.Size(m)
}
func (m *LoggerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LoggerConfig proto.InternalMessageInfo

type isLoggerConfig_Producer interface {
	isLoggerConfig_Producer()
}

type LoggerConfig_Default struct {
	Default *DefaultLoggerOptions `protobuf:"bytes,1,opt,name=default,proto3,oneof"`
}

type LoggerConfig_File struct {
	File *FileLoggerOptions `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

type LoggerConfig_Inherited struct {
	Inherited *InheritedLoggerOptions `protobuf:"bytes,3,opt,name=inherited,proto3,oneof"`
}

type LoggerConfig_InMemory struct {
	InMemory *InMemoryLoggerOptions `protobuf:"bytes,4,opt,name=in_memory,json=inMemory,proto3,oneof"`
}

type LoggerConfig_Splunk struct {
	Splunk *SplunkLoggerOptions `protobuf:"bytes,5,opt,name=splunk,proto3,oneof"`
}

type LoggerConfig_Buildloggerv2 struct {
	Buildloggerv2 *BuildloggerV2Options `protobuf:"bytes,6,opt,name=buildloggerv2,proto3,oneof"`
}

type LoggerConfig_Buildloggerv3 struct {
	Buildloggerv3 *BuildloggerV3Options `protobuf:"bytes,7,opt,name=buildloggerv3,proto3,oneof"`
}

type LoggerConfig_Raw struct {
	Raw *RawLoggerConfig `protobuf:"bytes,9,opt,name=raw,proto3,oneof"`
}

func (*LoggerConfig_Default) isLoggerConfig_Producer() {}

func (*LoggerConfig_File) isLoggerConfig_Producer() {}

func (*LoggerConfig_Inherited) isLoggerConfig_Producer() {}

func (*LoggerConfig_InMemory) isLoggerConfig_Producer() {}

func (*LoggerConfig_Splunk) isLoggerConfig_Producer() {}

func (*LoggerConfig_Buildloggerv2) isLoggerConfig_Producer() {}

func (*LoggerConfig_Buildloggerv3) isLoggerConfig_Producer() {}

func (*LoggerConfig_Raw) isLoggerConfig_Producer() {}

func (m *LoggerConfig) GetProducer() isLoggerConfig_Producer {
	if m != nil {
		return m.Producer
	}
	return nil
}

func (m *LoggerConfig) GetDefault() *DefaultLoggerOptions {
	if x, ok := m.GetProducer().(*LoggerConfig_Default); ok {
		return x.Default
	}
	return nil
}

func (m *LoggerConfig) GetFile() *FileLoggerOptions {
	if x, ok := m.GetProducer().(*LoggerConfig_File); ok {
		return x.File
	}
	return nil
}

func (m *LoggerConfig) GetInherited() *InheritedLoggerOptions {
	if x, ok := m.GetProducer().(*LoggerConfig_Inherited); ok {
		return x.Inherited
	}
	return nil
}

func (m *LoggerConfig) GetInMemory() *InMemoryLoggerOptions {
	if x, ok := m.GetProducer().(*LoggerConfig_InMemory); ok {
		return x.InMemory
	}
	return nil
}

func (m *LoggerConfig) GetSplunk() *SplunkLoggerOptions {
	if x, ok := m.GetProducer().(*LoggerConfig_Splunk); ok {
		return x.Splunk
	}
	return nil
}

func (m *LoggerConfig) GetBuildloggerv2() *BuildloggerV2Options {
	if x, ok := m.GetProducer().(*LoggerConfig_Buildloggerv2); ok {
		return x.Buildloggerv2
	}
	return nil
}

func (m *LoggerConfig) GetBuildloggerv3() *BuildloggerV3Options {
	if x, ok := m.GetProducer().(*LoggerConfig_Buildloggerv3); ok {
		return x.Buildloggerv3
	}
	return nil
}

func (m *LoggerConfig) GetRaw() *RawLoggerConfig {
	if x, ok := m.GetProducer().(*LoggerConfig_Raw); ok {
		return x.Raw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LoggerConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LoggerConfig_Default)(nil),
		(*LoggerConfig_File)(nil),
		(*LoggerConfig_Inherited)(nil),
		(*LoggerConfig_InMemory)(nil),
		(*LoggerConfig_Splunk)(nil),
		(*LoggerConfig_Buildloggerv2)(nil),
		(*LoggerConfig_Buildloggerv3)(nil),
		(*LoggerConfig_Raw)(nil),
	}
}

type LogLevel struct {
	Threshold            int32    `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Default              int32    `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogLevel) Reset()         { *m = LogLevel{} }
func (m *LogLevel) String() string { return proto.CompactTextString(m) }
func (*LogLevel) ProtoMessage()    {}
func (*LogLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{1}
}

func (m *LogLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLevel.Unmarshal(m, b)
}
func (m *LogLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLevel.Marshal(b, m, deterministic)
}
func (m *LogLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLevel.Merge(m, src)
}
func (m *LogLevel) XXX_Size() int {
	return xxx_messageInfo_LogLevel.Size(m)
}
func (m *LogLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLevel.DiscardUnknown(m)
}

var xxx_messageInfo_LogLevel proto.InternalMessageInfo

func (m *LogLevel) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *LogLevel) GetDefault() int32 {
	if m != nil {
		return m.Default
	}
	return 0
}

type BufferOptions struct {
	Buffered             bool     `protobuf:"varint,1,opt,name=buffered,proto3" json:"buffered,omitempty"`
	Duration             int64    `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	MaxSize              int64    `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BufferOptions) Reset()         { *m = BufferOptions{} }
func (m *BufferOptions) String() string { return proto.CompactTextString(m) }
func (*BufferOptions) ProtoMessage()    {}
func (*BufferOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{2}
}

func (m *BufferOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BufferOptions.Unmarshal(m, b)
}
func (m *BufferOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BufferOptions.Marshal(b, m, deterministic)
}
func (m *BufferOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferOptions.Merge(m, src)
}
func (m *BufferOptions) XXX_Size() int {
	return xxx_messageInfo_BufferOptions.Size(m)
}
func (m *BufferOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BufferOptions proto.InternalMessageInfo

func (m *BufferOptions) GetBuffered() bool {
	if m != nil {
		return m.Buffered
	}
	return false
}

func (m *BufferOptions) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *BufferOptions) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type BaseOptions struct {
	Level                *LogLevel      `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Buffer               *BufferOptions `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Format               LogFormat      `protobuf:"varint,3,opt,name=format,proto3,enum=jasper.LogFormat" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BaseOptions) Reset()         { *m = BaseOptions{} }
func (m *BaseOptions) String() string { return proto.CompactTextString(m) }
func (*BaseOptions) ProtoMessage()    {}
func (*BaseOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{3}
}

func (m *BaseOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseOptions.Unmarshal(m, b)
}
func (m *BaseOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseOptions.Marshal(b, m, deterministic)
}
func (m *BaseOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseOptions.Merge(m, src)
}
func (m *BaseOptions) XXX_Size() int {
	return xxx_messageInfo_BaseOptions.Size(m)
}
func (m *BaseOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BaseOptions proto.InternalMessageInfo

func (m *BaseOptions) GetLevel() *LogLevel {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *BaseOptions) GetBuffer() *BufferOptions {
	if m != nil {
		return m.Buffer
	}
	return nil
}

func (m *BaseOptions) GetFormat() LogFormat {
	if m != nil {
		return m.Format
	}
	return LogFormat_LOGFORMATUNKNOWN
}

type DefaultLoggerOptions struct {
	Prefix               string       `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Base                 *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DefaultLoggerOptions) Reset()         { *m = DefaultLoggerOptions{} }
func (m *DefaultLoggerOptions) String() string { return proto.CompactTextString(m) }
func (*DefaultLoggerOptions) ProtoMessage()    {}
func (*DefaultLoggerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{4}
}

func (m *DefaultLoggerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefaultLoggerOptions.Unmarshal(m, b)
}
func (m *DefaultLoggerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefaultLoggerOptions.Marshal(b, m, deterministic)
}
func (m *DefaultLoggerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultLoggerOptions.Merge(m, src)
}
func (m *DefaultLoggerOptions) XXX_Size() int {
	return xxx_messageInfo_DefaultLoggerOptions.Size(m)
}
func (m *DefaultLoggerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultLoggerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultLoggerOptions proto.InternalMessageInfo

func (m *DefaultLoggerOptions) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *DefaultLoggerOptions) GetBase() *BaseOptions {
	if m != nil {
		return m.Base
	}
	return nil
}

type FileLoggerOptions struct {
	Filename             string       `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Base                 *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FileLoggerOptions) Reset()         { *m = FileLoggerOptions{} }
func (m *FileLoggerOptions) String() string { return proto.CompactTextString(m) }
func (*FileLoggerOptions) ProtoMessage()    {}
func (*FileLoggerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{5}
}

func (m *FileLoggerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileLoggerOptions.Unmarshal(m, b)
}
func (m *FileLoggerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileLoggerOptions.Marshal(b, m, deterministic)
}
func (m *FileLoggerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileLoggerOptions.Merge(m, src)
}
func (m *FileLoggerOptions) XXX_Size() int {
	return xxx_messageInfo_FileLoggerOptions.Size(m)
}
func (m *FileLoggerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FileLoggerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FileLoggerOptions proto.InternalMessageInfo

func (m *FileLoggerOptions) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileLoggerOptions) GetBase() *BaseOptions {
	if m != nil {
		return m.Base
	}
	return nil
}

type InheritedLoggerOptions struct {
	Base                 *BaseOptions `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *InheritedLoggerOptions) Reset()         { *m = InheritedLoggerOptions{} }
func (m *InheritedLoggerOptions) String() string { return proto.CompactTextString(m) }
func (*InheritedLoggerOptions) ProtoMessage()    {}
func (*InheritedLoggerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{6}
}

func (m *InheritedLoggerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InheritedLoggerOptions.Unmarshal(m, b)
}
func (m *InheritedLoggerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InheritedLoggerOptions.Marshal(b, m, deterministic)
}
func (m *InheritedLoggerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InheritedLoggerOptions.Merge(m, src)
}
func (m *InheritedLoggerOptions) XXX_Size() int {
	return xxx_messageInfo_InheritedLoggerOptions.Size(m)
}
func (m *InheritedLoggerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InheritedLoggerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InheritedLoggerOptions proto.InternalMessageInfo

func (m *InheritedLoggerOptions) GetBase() *BaseOptions {
	if m != nil {
		return m.Base
	}
	return nil
}

type InMemoryLoggerOptions struct {
	InMemoryCap          int64        `protobuf:"varint,1,opt,name=in_memory_cap,json=inMemoryCap,proto3" json:"in_memory_cap,omitempty"`
	Base                 *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *InMemoryLoggerOptions) Reset()         { *m = InMemoryLoggerOptions{} }
func (m *InMemoryLoggerOptions) String() string { return proto.CompactTextString(m) }
func (*InMemoryLoggerOptions) ProtoMessage()    {}
func (*InMemoryLoggerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{7}
}

func (m *InMemoryLoggerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InMemoryLoggerOptions.Unmarshal(m, b)
}
func (m *InMemoryLoggerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InMemoryLoggerOptions.Marshal(b, m, deterministic)
}
func (m *InMemoryLoggerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InMemoryLoggerOptions.Merge(m, src)
}
func (m *InMemoryLoggerOptions) XXX_Size() int {
	return xxx_messageInfo_InMemoryLoggerOptions.Size(m)
}
func (m *InMemoryLoggerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InMemoryLoggerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InMemoryLoggerOptions proto.InternalMessageInfo

func (m *InMemoryLoggerOptions) GetInMemoryCap() int64 {
	if m != nil {
		return m.InMemoryCap
	}
	return 0
}

func (m *InMemoryLoggerOptions) GetBase() *BaseOptions {
	if m != nil {
		return m.Base
	}
	return nil
}

type SplunkInfo struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Channel              string   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplunkInfo) Reset()         { *m = SplunkInfo{} }
func (m *SplunkInfo) String() string { return proto.CompactTextString(m) }
func (*SplunkInfo) ProtoMessage()    {}
func (*SplunkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{8}
}

func (m *SplunkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplunkInfo.Unmarshal(m, b)
}
func (m *SplunkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplunkInfo.Marshal(b, m, deterministic)
}
func (m *SplunkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplunkInfo.Merge(m, src)
}
func (m *SplunkInfo) XXX_Size() int {
	return xxx_messageInfo_SplunkInfo.Size(m)
}
func (m *SplunkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SplunkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SplunkInfo proto.InternalMessageInfo

func (m *SplunkInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SplunkInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SplunkInfo) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type SplunkLoggerOptions struct {
	Splunk               *SplunkInfo  `protobuf:"bytes,1,opt,name=splunk,proto3" json:"splunk,omitempty"`
	Base                 *BaseOptions `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SplunkLoggerOptions) Reset()         { *m = SplunkLoggerOptions{} }
func (m *SplunkLoggerOptions) String() string { return proto.CompactTextString(m) }
func (*SplunkLoggerOptions) ProtoMessage()    {}
func (*SplunkLoggerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{9}
}

func (m *SplunkLoggerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplunkLoggerOptions.Unmarshal(m, b)
}
func (m *SplunkLoggerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplunkLoggerOptions.Marshal(b, m, deterministic)
}
func (m *SplunkLoggerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplunkLoggerOptions.Merge(m, src)
}
func (m *SplunkLoggerOptions) XXX_Size() int {
	return xxx_messageInfo_SplunkLoggerOptions.Size(m)
}
func (m *SplunkLoggerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SplunkLoggerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SplunkLoggerOptions proto.InternalMessageInfo

func (m *SplunkLoggerOptions) GetSplunk() *SplunkInfo {
	if m != nil {
		return m.Splunk
	}
	return nil
}

func (m *SplunkLoggerOptions) GetBase() *BaseOptions {
	if m != nil {
		return m.Base
	}
	return nil
}

type BuildloggerV2Info struct {
	CreateTest           bool     `protobuf:"varint,1,opt,name=create_test,json=createTest,proto3" json:"create_test,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Number               int64    `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Phase                string   `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	Builder              string   `protobuf:"bytes,5,opt,name=builder,proto3" json:"builder,omitempty"`
	Test                 string   `protobuf:"bytes,6,opt,name=test,proto3" json:"test,omitempty"`
	Command              string   `protobuf:"bytes,7,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildloggerV2Info) Reset()         { *m = BuildloggerV2Info{} }
func (m *BuildloggerV2Info) String() string { return proto.CompactTextString(m) }
func (*BuildloggerV2Info) ProtoMessage()    {}
func (*BuildloggerV2Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{10}
}

func (m *BuildloggerV2Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildloggerV2Info.Unmarshal(m, b)
}
func (m *BuildloggerV2Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildloggerV2Info.Marshal(b, m, deterministic)
}
func (m *BuildloggerV2Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildloggerV2Info.Merge(m, src)
}
func (m *BuildloggerV2Info) XXX_Size() int {
	return xxx_messageInfo_BuildloggerV2Info.Size(m)
}
func (m *BuildloggerV2Info) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildloggerV2Info.DiscardUnknown(m)
}

var xxx_messageInfo_BuildloggerV2Info proto.InternalMessageInfo

func (m *BuildloggerV2Info) GetCreateTest() bool {
	if m != nil {
		return m.CreateTest
	}
	return false
}

func (m *BuildloggerV2Info) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BuildloggerV2Info) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BuildloggerV2Info) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *BuildloggerV2Info) GetBuilder() string {
	if m != nil {
		return m.Builder
	}
	return ""
}

func (m *BuildloggerV2Info) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

func (m *BuildloggerV2Info) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type BuildloggerV2Options struct {
	Buildlogger          *BuildloggerV2Info `protobuf:"bytes,1,opt,name=buildlogger,proto3" json:"buildlogger,omitempty"`
	Base                 *BaseOptions       `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BuildloggerV2Options) Reset()         { *m = BuildloggerV2Options{} }
func (m *BuildloggerV2Options) String() string { return proto.CompactTextString(m) }
func (*BuildloggerV2Options) ProtoMessage()    {}
func (*BuildloggerV2Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{11}
}

func (m *BuildloggerV2Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildloggerV2Options.Unmarshal(m, b)
}
func (m *BuildloggerV2Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildloggerV2Options.Marshal(b, m, deterministic)
}
func (m *BuildloggerV2Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildloggerV2Options.Merge(m, src)
}
func (m *BuildloggerV2Options) XXX_Size() int {
	return xxx_messageInfo_BuildloggerV2Options.Size(m)
}
func (m *BuildloggerV2Options) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildloggerV2Options.DiscardUnknown(m)
}

var xxx_messageInfo_BuildloggerV2Options proto.InternalMessageInfo

func (m *BuildloggerV2Options) GetBuildlogger() *BuildloggerV2Info {
	if m != nil {
		return m.Buildlogger
	}
	return nil
}

func (m *BuildloggerV2Options) GetBase() *BaseOptions {
	if m != nil {
		return m.Base
	}
	return nil
}

type BuildloggerV3Info struct {
	Project              string            `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Version              string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Variant              string            `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	TaskName             string            `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskId               string            `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Execution            int32             `protobuf:"varint,6,opt,name=execution,proto3" json:"execution,omitempty"`
	TestName             string            `protobuf:"bytes,7,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Trial                int32             `protobuf:"varint,8,opt,name=trial,proto3" json:"trial,omitempty"`
	ProcName             string            `protobuf:"bytes,9,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`
	Format               LogFormat         `protobuf:"varint,10,opt,name=format,proto3,enum=jasper.LogFormat" json:"format,omitempty"`
	Tags                 []string          `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	Args                 map[string]string `protobuf:"bytes,12,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mainline             bool              `protobuf:"varint,13,opt,name=mainline,proto3" json:"mainline,omitempty"`
	Prefix               string            `protobuf:"bytes,14,opt,name=prefix,proto3" json:"prefix,omitempty"`
	MaxBufferSize        int64             `protobuf:"varint,15,opt,name=max_buffer_size,json=maxBufferSize,proto3" json:"max_buffer_size,omitempty"`
	FlushInterval        int64             `protobuf:"varint,16,opt,name=flush_interval,json=flushInterval,proto3" json:"flush_interval,omitempty"`
	DisableNewLineCheck  bool              `protobuf:"varint,17,opt,name=disable_new_line_check,json=disableNewLineCheck,proto3" json:"disable_new_line_check,omitempty"`
	BaseAddress          string            `protobuf:"bytes,18,opt,name=base_address,json=baseAddress,proto3" json:"base_address,omitempty"`
	RpcPort              string            `protobuf:"bytes,19,opt,name=rpc_port,json=rpcPort,proto3" json:"rpc_port,omitempty"`
	Insecure             bool              `protobuf:"varint,20,opt,name=insecure,proto3" json:"insecure,omitempty"`
	Username             string            `protobuf:"bytes,21,opt,name=username,proto3" json:"username,omitempty"`
	ApiKey               string            `protobuf:"bytes,22,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BuildloggerV3Info) Reset()         { *m = BuildloggerV3Info{} }
func (m *BuildloggerV3Info) String() string { return proto.CompactTextString(m) }
func (*BuildloggerV3Info) ProtoMessage()    {}
func (*BuildloggerV3Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{12}
}

func (m *BuildloggerV3Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildloggerV3Info.Unmarshal(m, b)
}
func (m *BuildloggerV3Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildloggerV3Info.Marshal(b, m, deterministic)
}
func (m *BuildloggerV3Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildloggerV3Info.Merge(m, src)
}
func (m *BuildloggerV3Info) XXX_Size() int {
	return xxx_messageInfo_BuildloggerV3Info.Size(m)
}
func (m *BuildloggerV3Info) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildloggerV3Info.DiscardUnknown(m)
}

var xxx_messageInfo_BuildloggerV3Info proto.InternalMessageInfo

func (m *BuildloggerV3Info) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *BuildloggerV3Info) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BuildloggerV3Info) GetVariant() string {
	if m != nil {
		return m.Variant
	}
	return ""
}

func (m *BuildloggerV3Info) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *BuildloggerV3Info) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *BuildloggerV3Info) GetExecution() int32 {
	if m != nil {
		return m.Execution
	}
	return 0
}

func (m *BuildloggerV3Info) GetTestName() string {
	if m != nil {
		return m.TestName
	}
	return ""
}

func (m *BuildloggerV3Info) GetTrial() int32 {
	if m != nil {
		return m.Trial
	}
	return 0
}

func (m *BuildloggerV3Info) GetProcName() string {
	if m != nil {
		return m.ProcName
	}
	return ""
}

func (m *BuildloggerV3Info) GetFormat() LogFormat {
	if m != nil {
		return m.Format
	}
	return LogFormat_LOGFORMATUNKNOWN
}

func (m *BuildloggerV3Info) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *BuildloggerV3Info) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *BuildloggerV3Info) GetMainline() bool {
	if m != nil {
		return m.Mainline
	}
	return false
}

func (m *BuildloggerV3Info) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *BuildloggerV3Info) GetMaxBufferSize() int64 {
	if m != nil {
		return m.MaxBufferSize
	}
	return 0
}

func (m *BuildloggerV3Info) GetFlushInterval() int64 {
	if m != nil {
		return m.FlushInterval
	}
	return 0
}

func (m *BuildloggerV3Info) GetDisableNewLineCheck() bool {
	if m != nil {
		return m.DisableNewLineCheck
	}
	return false
}

func (m *BuildloggerV3Info) GetBaseAddress() string {
	if m != nil {
		return m.BaseAddress
	}
	return ""
}

func (m *BuildloggerV3Info) GetRpcPort() string {
	if m != nil {
		return m.RpcPort
	}
	return ""
}

func (m *BuildloggerV3Info) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *BuildloggerV3Info) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *BuildloggerV3Info) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type BuildloggerV3Options struct {
	Buildloggerv3        *BuildloggerV3Info `protobuf:"bytes,1,opt,name=buildloggerv3,proto3" json:"buildloggerv3,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Level                *LogLevel          `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BuildloggerV3Options) Reset()         { *m = BuildloggerV3Options{} }
func (m *BuildloggerV3Options) String() string { return proto.CompactTextString(m) }
func (*BuildloggerV3Options) ProtoMessage()    {}
func (*BuildloggerV3Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{13}
}

func (m *BuildloggerV3Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildloggerV3Options.Unmarshal(m, b)
}
func (m *BuildloggerV3Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildloggerV3Options.Marshal(b, m, deterministic)
}
func (m *BuildloggerV3Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildloggerV3Options.Merge(m, src)
}
func (m *BuildloggerV3Options) XXX_Size() int {
	return xxx_messageInfo_BuildloggerV3Options.Size(m)
}
func (m *BuildloggerV3Options) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildloggerV3Options.DiscardUnknown(m)
}

var xxx_messageInfo_BuildloggerV3Options proto.InternalMessageInfo

func (m *BuildloggerV3Options) GetBuildloggerv3() *BuildloggerV3Info {
	if m != nil {
		return m.Buildloggerv3
	}
	return nil
}

func (m *BuildloggerV3Options) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuildloggerV3Options) GetLevel() *LogLevel {
	if m != nil {
		return m.Level
	}
	return nil
}

type RawLoggerConfig struct {
	Format               RawLoggerConfigFormat `protobuf:"varint,1,opt,name=format,proto3,enum=jasper.RawLoggerConfigFormat" json:"format,omitempty"`
	ConfigData           []byte                `protobuf:"bytes,2,opt,name=config_data,json=configData,proto3" json:"config_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RawLoggerConfig) Reset()         { *m = RawLoggerConfig{} }
func (m *RawLoggerConfig) String() string { return proto.CompactTextString(m) }
func (*RawLoggerConfig) ProtoMessage()    {}
func (*RawLoggerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{14}
}

func (m *RawLoggerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawLoggerConfig.Unmarshal(m, b)
}
func (m *RawLoggerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawLoggerConfig.Marshal(b, m, deterministic)
}
func (m *RawLoggerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawLoggerConfig.Merge(m, src)
}
func (m *RawLoggerConfig) XXX_Size() int {
	return xxx_messageInfo_RawLoggerConfig.Size(m)
}
func (m *RawLoggerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RawLoggerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RawLoggerConfig proto.InternalMessageInfo

func (m *RawLoggerConfig) GetFormat() RawLoggerConfigFormat {
	if m != nil {
		return m.Format
	}
	return RawLoggerConfigFormat_RAWLOGGERCONFIGFORMATJSON
}

func (m *RawLoggerConfig) GetConfigData() []byte {
	if m != nil {
		return m.ConfigData
	}
	return nil
}

type OutputOptions struct {
	Loggers               []*LoggerConfig `protobuf:"bytes,1,rep,name=loggers,proto3" json:"loggers,omitempty"`
	SuppressOutput        bool            `protobuf:"varint,2,opt,name=suppress_output,json=suppressOutput,proto3" json:"suppress_output,omitempty"`
	SuppressError         bool            `protobuf:"varint,3,opt,name=suppress_error,json=suppressError,proto3" json:"suppress_error,omitempty"`
	RedirectOutputToError bool            `protobuf:"varint,4,opt,name=redirect_output_to_error,json=redirectOutputToError,proto3" json:"redirect_output_to_error,omitempty"`
	RedirectErrorToOutput bool            `protobuf:"varint,5,opt,name=redirect_error_to_output,json=redirectErrorToOutput,proto3" json:"redirect_error_to_output,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}        `json:"-"`
	XXX_unrecognized      []byte          `json:"-"`
	XXX_sizecache         int32           `json:"-"`
}

func (m *OutputOptions) Reset()         { *m = OutputOptions{} }
func (m *OutputOptions) String() string { return proto.CompactTextString(m) }
func (*OutputOptions) ProtoMessage()    {}
func (*OutputOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{15}
}

func (m *OutputOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputOptions.Unmarshal(m, b)
}
func (m *OutputOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputOptions.Marshal(b, m, deterministic)
}
func (m *OutputOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputOptions.Merge(m, src)
}
func (m *OutputOptions) XXX_Size() int {
	return xxx_messageInfo_OutputOptions.Size(m)
}
func (m *OutputOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OutputOptions proto.InternalMessageInfo

func (m *OutputOptions) GetLoggers() []*LoggerConfig {
	if m != nil {
		return m.Loggers
	}
	return nil
}

func (m *OutputOptions) GetSuppressOutput() bool {
	if m != nil {
		return m.SuppressOutput
	}
	return false
}

func (m *OutputOptions) GetSuppressError() bool {
	if m != nil {
		return m.SuppressError
	}
	return false
}

func (m *OutputOptions) GetRedirectOutputToError() bool {
	if m != nil {
		return m.RedirectOutputToError
	}
	return false
}

func (m *OutputOptions) GetRedirectErrorToOutput() bool {
	if m != nil {
		return m.RedirectErrorToOutput
	}
	return false
}

type CreateOptions struct {
	Args                 []string          `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	WorkingDirectory     string            `protobuf:"bytes,2,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	Environment          map[string]string `protobuf:"bytes,3,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OverrideEnviron      bool              `protobuf:"varint,4,opt,name=override_environ,json=overrideEnviron,proto3" json:"override_environ,omitempty"`
	TimeoutSeconds       int64             `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	Tags                 []string          `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	OnSuccess            []*CreateOptions  `protobuf:"bytes,7,rep,name=on_success,json=onSuccess,proto3" json:"on_success,omitempty"`
	OnFailure            []*CreateOptions  `protobuf:"bytes,8,rep,name=on_failure,json=onFailure,proto3" json:"on_failure,omitempty"`
	OnTimeout            []*CreateOptions  `protobuf:"bytes,9,rep,name=on_timeout,json=onTimeout,proto3" json:"on_timeout,omitempty"`
	Output               *OutputOptions    `protobuf:"bytes,10,opt,name=output,proto3" json:"output,omitempty"`
	StandardInputBytes   []byte            `protobuf:"bytes,11,opt,name=standard_input_bytes,json=standardInputBytes,proto3" json:"standard_input_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateOptions) Reset()         { *m = CreateOptions{} }
func (m *CreateOptions) String() string { return proto.CompactTextString(m) }
func (*CreateOptions) ProtoMessage()    {}
func (*CreateOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{16}
}

func (m *CreateOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOptions.Unmarshal(m, b)
}
func (m *CreateOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOptions.Marshal(b, m, deterministic)
}
func (m *CreateOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOptions.Merge(m, src)
}
func (m *CreateOptions) XXX_Size() int {
	return xxx_messageInfo_CreateOptions.Size(m)
}
func (m *CreateOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOptions proto.InternalMessageInfo

func (m *CreateOptions) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CreateOptions) GetWorkingDirectory() string {
	if m != nil {
		return m.WorkingDirectory
	}
	return ""
}

func (m *CreateOptions) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *CreateOptions) GetOverrideEnviron() bool {
	if m != nil {
		return m.OverrideEnviron
	}
	return false
}

func (m *CreateOptions) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *CreateOptions) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateOptions) GetOnSuccess() []*CreateOptions {
	if m != nil {
		return m.OnSuccess
	}
	return nil
}

func (m *CreateOptions) GetOnFailure() []*CreateOptions {
	if m != nil {
		return m.OnFailure
	}
	return nil
}

func (m *CreateOptions) GetOnTimeout() []*CreateOptions {
	if m != nil {
		return m.OnTimeout
	}
	return nil
}

func (m *CreateOptions) GetOutput() *OutputOptions {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *CreateOptions) GetStandardInputBytes() []byte {
	if m != nil {
		return m.StandardInputBytes
	}
	return nil
}

type IDResponse struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDResponse) Reset()         { *m = IDResponse{} }
func (m *IDResponse) String() string { return proto.CompactTextString(m) }
func (*IDResponse) ProtoMessage()    {}
func (*IDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{17}
}

func (m *IDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDResponse.Unmarshal(m, b)
}
func (m *IDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDResponse.Marshal(b, m, deterministic)
}
func (m *IDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDResponse.Merge(m, src)
}
func (m *IDResponse) XXX_Size() int {
	return xxx_messageInfo_IDResponse.Size(m)
}
func (m *IDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IDResponse proto.InternalMessageInfo

func (m *IDResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ProcessInfo struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid                  int64                `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	HostId               string               `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Running              bool                 `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	Successful           bool                 `protobuf:"varint,5,opt,name=successful,proto3" json:"successful,omitempty"`
	Complete             bool                 `protobuf:"varint,6,opt,name=complete,proto3" json:"complete,omitempty"`
	Timedout             bool                 `protobuf:"varint,7,opt,name=timedout,proto3" json:"timedout,omitempty"`
	Options              *CreateOptions       `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	ExitCode             int32                `protobuf:"varint,9,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	StartAt              *timestamp.Timestamp `protobuf:"bytes,10,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt                *timestamp.Timestamp `protobuf:"bytes,11,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProcessInfo) Reset()         { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()    {}
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{18}
}

func (m *ProcessInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessInfo.Unmarshal(m, b)
}
func (m *ProcessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessInfo.Marshal(b, m, deterministic)
}
func (m *ProcessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessInfo.Merge(m, src)
}
func (m *ProcessInfo) XXX_Size() int {
	return xxx_messageInfo_ProcessInfo.Size(m)
}
func (m *ProcessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessInfo proto.InternalMessageInfo

func (m *ProcessInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessInfo) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessInfo) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *ProcessInfo) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *ProcessInfo) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *ProcessInfo) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *ProcessInfo) GetTimedout() bool {
	if m != nil {
		return m.Timedout
	}
	return false
}

func (m *ProcessInfo) GetOptions() *CreateOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ProcessInfo) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ProcessInfo) GetStartAt() *timestamp.Timestamp {
	if m != nil {
		return m.StartAt
	}
	return nil
}

func (m *ProcessInfo) GetEndAt() *timestamp.Timestamp {
	if m != nil {
		return m.EndAt
	}
	return nil
}

type StatusResponse struct {
	HostId               string   `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Active               bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{19}
}

func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *StatusResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Filter struct {
	Name                 FilterSpecifications `protobuf:"varint,1,opt,name=name,proto3,enum=jasper.FilterSpecifications" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{20}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetName() FilterSpecifications {
	if m != nil {
		return m.Name
	}
	return FilterSpecifications_ALL
}

type SignalProcess struct {
	ProcessID            *JasperProcessID `protobuf:"bytes,1,opt,name=ProcessID,proto3" json:"ProcessID,omitempty"`
	Signal               Signals          `protobuf:"varint,2,opt,name=signal,proto3,enum=jasper.Signals" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SignalProcess) Reset()         { *m = SignalProcess{} }
func (m *SignalProcess) String() string { return proto.CompactTextString(m) }
func (*SignalProcess) ProtoMessage()    {}
func (*SignalProcess) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{21}
}

func (m *SignalProcess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalProcess.Unmarshal(m, b)
}
func (m *SignalProcess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalProcess.Marshal(b, m, deterministic)
}
func (m *SignalProcess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalProcess.Merge(m, src)
}
func (m *SignalProcess) XXX_Size() int {
	return xxx_messageInfo_SignalProcess.Size(m)
}
func (m *SignalProcess) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalProcess.DiscardUnknown(m)
}

var xxx_messageInfo_SignalProcess proto.InternalMessageInfo

func (m *SignalProcess) GetProcessID() *JasperProcessID {
	if m != nil {
		return m.ProcessID
	}
	return nil
}

func (m *SignalProcess) GetSignal() Signals {
	if m != nil {
		return m.Signal
	}
	return Signals_UNKNOWN
}

type TagName struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagName) Reset()         { *m = TagName{} }
func (m *TagName) String() string { return proto.CompactTextString(m) }
func (*TagName) ProtoMessage()    {}
func (*TagName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{22}
}

func (m *TagName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagName.Unmarshal(m, b)
}
func (m *TagName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagName.Marshal(b, m, deterministic)
}
func (m *TagName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagName.Merge(m, src)
}
func (m *TagName) XXX_Size() int {
	return xxx_messageInfo_TagName.Size(m)
}
func (m *TagName) XXX_DiscardUnknown() {
	xxx_messageInfo_TagName.DiscardUnknown(m)
}

var xxx_messageInfo_TagName proto.InternalMessageInfo

func (m *TagName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ProcessTags struct {
	ProcessID            string   `protobuf:"bytes,1,opt,name=processID,proto3" json:"processID,omitempty"`
	Tags                 []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessTags) Reset()         { *m = ProcessTags{} }
func (m *ProcessTags) String() string { return proto.CompactTextString(m) }
func (*ProcessTags) ProtoMessage()    {}
func (*ProcessTags) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{23}
}

func (m *ProcessTags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessTags.Unmarshal(m, b)
}
func (m *ProcessTags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessTags.Marshal(b, m, deterministic)
}
func (m *ProcessTags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTags.Merge(m, src)
}
func (m *ProcessTags) XXX_Size() int {
	return xxx_messageInfo_ProcessTags.Size(m)
}
func (m *ProcessTags) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTags.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTags proto.InternalMessageInfo

func (m *ProcessTags) GetProcessID() string {
	if m != nil {
		return m.ProcessID
	}
	return ""
}

func (m *ProcessTags) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type JasperProcessID struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JasperProcessID) Reset()         { *m = JasperProcessID{} }
func (m *JasperProcessID) String() string { return proto.CompactTextString(m) }
func (*JasperProcessID) ProtoMessage()    {}
func (*JasperProcessID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{24}
}

func (m *JasperProcessID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JasperProcessID.Unmarshal(m, b)
}
func (m *JasperProcessID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JasperProcessID.Marshal(b, m, deterministic)
}
func (m *JasperProcessID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JasperProcessID.Merge(m, src)
}
func (m *JasperProcessID) XXX_Size() int {
	return xxx_messageInfo_JasperProcessID.Size(m)
}
func (m *JasperProcessID) XXX_DiscardUnknown() {
	xxx_messageInfo_JasperProcessID.DiscardUnknown(m)
}

var xxx_messageInfo_JasperProcessID proto.InternalMessageInfo

func (m *JasperProcessID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type OperationOutcome struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ExitCode             int32    `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationOutcome) Reset()         { *m = OperationOutcome{} }
func (m *OperationOutcome) String() string { return proto.CompactTextString(m) }
func (*OperationOutcome) ProtoMessage()    {}
func (*OperationOutcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{25}
}

func (m *OperationOutcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationOutcome.Unmarshal(m, b)
}
func (m *OperationOutcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationOutcome.Marshal(b, m, deterministic)
}
func (m *OperationOutcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationOutcome.Merge(m, src)
}
func (m *OperationOutcome) XXX_Size() int {
	return xxx_messageInfo_OperationOutcome.Size(m)
}
func (m *OperationOutcome) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationOutcome.DiscardUnknown(m)
}

var xxx_messageInfo_OperationOutcome proto.InternalMessageInfo

func (m *OperationOutcome) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *OperationOutcome) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *OperationOutcome) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type BuildOptions struct {
	Target               string   `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Arch                 string   `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	Edition              string   `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Debug                bool     `protobuf:"varint,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildOptions) Reset()         { *m = BuildOptions{} }
func (m *BuildOptions) String() string { return proto.CompactTextString(m) }
func (*BuildOptions) ProtoMessage()    {}
func (*BuildOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{26}
}

func (m *BuildOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildOptions.Unmarshal(m, b)
}
func (m *BuildOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildOptions.Marshal(b, m, deterministic)
}
func (m *BuildOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildOptions.Merge(m, src)
}
func (m *BuildOptions) XXX_Size() int {
	return xxx_messageInfo_BuildOptions.Size(m)
}
func (m *BuildOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BuildOptions proto.InternalMessageInfo

func (m *BuildOptions) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *BuildOptions) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *BuildOptions) GetEdition() string {
	if m != nil {
		return m.Edition
	}
	return ""
}

func (m *BuildOptions) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type MongoDBDownloadOptions struct {
	BuildOpts            *BuildOptions `protobuf:"bytes,1,opt,name=build_opts,json=buildOpts,proto3" json:"build_opts,omitempty"`
	Path                 string        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Releases             []string      `protobuf:"bytes,3,rep,name=releases,proto3" json:"releases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MongoDBDownloadOptions) Reset()         { *m = MongoDBDownloadOptions{} }
func (m *MongoDBDownloadOptions) String() string { return proto.CompactTextString(m) }
func (*MongoDBDownloadOptions) ProtoMessage()    {}
func (*MongoDBDownloadOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{27}
}

func (m *MongoDBDownloadOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MongoDBDownloadOptions.Unmarshal(m, b)
}
func (m *MongoDBDownloadOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MongoDBDownloadOptions.Marshal(b, m, deterministic)
}
func (m *MongoDBDownloadOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBDownloadOptions.Merge(m, src)
}
func (m *MongoDBDownloadOptions) XXX_Size() int {
	return xxx_messageInfo_MongoDBDownloadOptions.Size(m)
}
func (m *MongoDBDownloadOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBDownloadOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBDownloadOptions proto.InternalMessageInfo

func (m *MongoDBDownloadOptions) GetBuildOpts() *BuildOptions {
	if m != nil {
		return m.BuildOpts
	}
	return nil
}

func (m *MongoDBDownloadOptions) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MongoDBDownloadOptions) GetReleases() []string {
	if m != nil {
		return m.Releases
	}
	return nil
}

type CacheOptions struct {
	Disabled             bool     `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	PruneDelaySeconds    int64    `protobuf:"varint,2,opt,name=prune_delay_seconds,json=pruneDelaySeconds,proto3" json:"prune_delay_seconds,omitempty"`
	MaxSize              int64    `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheOptions) Reset()         { *m = CacheOptions{} }
func (m *CacheOptions) String() string { return proto.CompactTextString(m) }
func (*CacheOptions) ProtoMessage()    {}
func (*CacheOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{28}
}

func (m *CacheOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheOptions.Unmarshal(m, b)
}
func (m *CacheOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheOptions.Marshal(b, m, deterministic)
}
func (m *CacheOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheOptions.Merge(m, src)
}
func (m *CacheOptions) XXX_Size() int {
	return xxx_messageInfo_CacheOptions.Size(m)
}
func (m *CacheOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CacheOptions proto.InternalMessageInfo

func (m *CacheOptions) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *CacheOptions) GetPruneDelaySeconds() int64 {
	if m != nil {
		return m.PruneDelaySeconds
	}
	return 0
}

func (m *CacheOptions) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type ArchiveOptions struct {
	ShouldExtract        bool          `protobuf:"varint,1,opt,name=should_extract,json=shouldExtract,proto3" json:"should_extract,omitempty"`
	Format               ArchiveFormat `protobuf:"varint,2,opt,name=format,proto3,enum=jasper.ArchiveFormat" json:"format,omitempty"`
	TargetPath           string        `protobuf:"bytes,3,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ArchiveOptions) Reset()         { *m = ArchiveOptions{} }
func (m *ArchiveOptions) String() string { return proto.CompactTextString(m) }
func (*ArchiveOptions) ProtoMessage()    {}
func (*ArchiveOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{29}
}

func (m *ArchiveOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveOptions.Unmarshal(m, b)
}
func (m *ArchiveOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveOptions.Marshal(b, m, deterministic)
}
func (m *ArchiveOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveOptions.Merge(m, src)
}
func (m *ArchiveOptions) XXX_Size() int {
	return xxx_messageInfo_ArchiveOptions.Size(m)
}
func (m *ArchiveOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveOptions proto.InternalMessageInfo

func (m *ArchiveOptions) GetShouldExtract() bool {
	if m != nil {
		return m.ShouldExtract
	}
	return false
}

func (m *ArchiveOptions) GetFormat() ArchiveFormat {
	if m != nil {
		return m.Format
	}
	return ArchiveFormat_ARCHIVEUNKNOWN
}

func (m *ArchiveOptions) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

type DownloadInfo struct {
	Url                  string          `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Path                 string          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ArchiveOpts          *ArchiveOptions `protobuf:"bytes,3,opt,name=archive_opts,json=archiveOpts,proto3" json:"archive_opts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DownloadInfo) Reset()         { *m = DownloadInfo{} }
func (m *DownloadInfo) String() string { return proto.CompactTextString(m) }
func (*DownloadInfo) ProtoMessage()    {}
func (*DownloadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{30}
}

func (m *DownloadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadInfo.Unmarshal(m, b)
}
func (m *DownloadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadInfo.Marshal(b, m, deterministic)
}
func (m *DownloadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadInfo.Merge(m, src)
}
func (m *DownloadInfo) XXX_Size() int {
	return xxx_messageInfo_DownloadInfo.Size(m)
}
func (m *DownloadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadInfo proto.InternalMessageInfo

func (m *DownloadInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DownloadInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DownloadInfo) GetArchiveOpts() *ArchiveOptions {
	if m != nil {
		return m.ArchiveOpts
	}
	return nil
}

type WriteFileInfo struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Append               bool     `protobuf:"varint,4,opt,name=append,proto3" json:"append,omitempty"`
	Perm                 uint32   `protobuf:"varint,3,opt,name=perm,proto3" json:"perm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteFileInfo) Reset()         { *m = WriteFileInfo{} }
func (m *WriteFileInfo) String() string { return proto.CompactTextString(m) }
func (*WriteFileInfo) ProtoMessage()    {}
func (*WriteFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{31}
}

func (m *WriteFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteFileInfo.Unmarshal(m, b)
}
func (m *WriteFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteFileInfo.Marshal(b, m, deterministic)
}
func (m *WriteFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteFileInfo.Merge(m, src)
}
func (m *WriteFileInfo) XXX_Size() int {
	return xxx_messageInfo_WriteFileInfo.Size(m)
}
func (m *WriteFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WriteFileInfo proto.InternalMessageInfo

func (m *WriteFileInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *WriteFileInfo) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *WriteFileInfo) GetAppend() bool {
	if m != nil {
		return m.Append
	}
	return false
}

func (m *WriteFileInfo) GetPerm() uint32 {
	if m != nil {
		return m.Perm
	}
	return 0
}

type BuildloggerURLs struct {
	Urls                 []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildloggerURLs) Reset()         { *m = BuildloggerURLs{} }
func (m *BuildloggerURLs) String() string { return proto.CompactTextString(m) }
func (*BuildloggerURLs) ProtoMessage()    {}
func (*BuildloggerURLs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{32}
}

func (m *BuildloggerURLs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildloggerURLs.Unmarshal(m, b)
}
func (m *BuildloggerURLs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildloggerURLs.Marshal(b, m, deterministic)
}
func (m *BuildloggerURLs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildloggerURLs.Merge(m, src)
}
func (m *BuildloggerURLs) XXX_Size() int {
	return xxx_messageInfo_BuildloggerURLs.Size(m)
}
func (m *BuildloggerURLs) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildloggerURLs.DiscardUnknown(m)
}

var xxx_messageInfo_BuildloggerURLs proto.InternalMessageInfo

func (m *BuildloggerURLs) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type LogRequest struct {
	Id                   *JasperProcessID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                int64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{33}
}

func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetId() *JasperProcessID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LogRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type LogStream struct {
	Logs                 []string `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	Done                 bool     `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogStream) Reset()         { *m = LogStream{} }
func (m *LogStream) String() string { return proto.CompactTextString(m) }
func (*LogStream) ProtoMessage()    {}
func (*LogStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{34}
}

func (m *LogStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogStream.Unmarshal(m, b)
}
func (m *LogStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogStream.Marshal(b, m, deterministic)
}
func (m *LogStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStream.Merge(m, src)
}
func (m *LogStream) XXX_Size() int {
	return xxx_messageInfo_LogStream.Size(m)
}
func (m *LogStream) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStream.DiscardUnknown(m)
}

var xxx_messageInfo_LogStream proto.InternalMessageInfo

func (m *LogStream) GetLogs() []string {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *LogStream) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type SignalTriggerParams struct {
	ProcessID            *JasperProcessID `protobuf:"bytes,1,opt,name=processID,proto3" json:"processID,omitempty"`
	SignalTriggerID      SignalTriggerID  `protobuf:"varint,2,opt,name=signalTriggerID,proto3,enum=jasper.SignalTriggerID" json:"signalTriggerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SignalTriggerParams) Reset()         { *m = SignalTriggerParams{} }
func (m *SignalTriggerParams) String() string { return proto.CompactTextString(m) }
func (*SignalTriggerParams) ProtoMessage()    {}
func (*SignalTriggerParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{35}
}

func (m *SignalTriggerParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalTriggerParams.Unmarshal(m, b)
}
func (m *SignalTriggerParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalTriggerParams.Marshal(b, m, deterministic)
}
func (m *SignalTriggerParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalTriggerParams.Merge(m, src)
}
func (m *SignalTriggerParams) XXX_Size() int {
	return xxx_messageInfo_SignalTriggerParams.Size(m)
}
func (m *SignalTriggerParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalTriggerParams.DiscardUnknown(m)
}

var xxx_messageInfo_SignalTriggerParams proto.InternalMessageInfo

func (m *SignalTriggerParams) GetProcessID() *JasperProcessID {
	if m != nil {
		return m.ProcessID
	}
	return nil
}

func (m *SignalTriggerParams) GetSignalTriggerID() SignalTriggerID {
	if m != nil {
		return m.SignalTriggerID
	}
	return SignalTriggerID_NONE
}

type EventName struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventName) Reset()         { *m = EventName{} }
func (m *EventName) String() string { return proto.CompactTextString(m) }
func (*EventName) ProtoMessage()    {}
func (*EventName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{36}
}

func (m *EventName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventName.Unmarshal(m, b)
}
func (m *EventName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventName.Marshal(b, m, deterministic)
}
func (m *EventName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventName.Merge(m, src)
}
func (m *EventName) XXX_Size() int {
	return xxx_messageInfo_EventName.Size(m)
}
func (m *EventName) XXX_DiscardUnknown() {
	xxx_messageInfo_EventName.DiscardUnknown(m)
}

var xxx_messageInfo_EventName proto.InternalMessageInfo

func (m *EventName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ScriptingHarnessID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScriptingHarnessID) Reset()         { *m = ScriptingHarnessID{} }
func (m *ScriptingHarnessID) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessID) ProtoMessage()    {}
func (*ScriptingHarnessID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{37}
}

func (m *ScriptingHarnessID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessID.Unmarshal(m, b)
}
func (m *ScriptingHarnessID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessID.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessID.Merge(m, src)
}
func (m *ScriptingHarnessID) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessID.Size(m)
}
func (m *ScriptingHarnessID) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessID.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessID proto.InternalMessageInfo

func (m *ScriptingHarnessID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ScriptingOptionsGolang struct {
	Gopath               string   `protobuf:"bytes,1,opt,name=gopath,proto3" json:"gopath,omitempty"`
	Goroot               string   `protobuf:"bytes,2,opt,name=goroot,proto3" json:"goroot,omitempty"`
	Packages             []string `protobuf:"bytes,3,rep,name=packages,proto3" json:"packages,omitempty"`
	Directory            string   `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	UpdatePackages       bool     `protobuf:"varint,5,opt,name=update_packages,json=updatePackages,proto3" json:"update_packages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScriptingOptionsGolang) Reset()         { *m = ScriptingOptionsGolang{} }
func (m *ScriptingOptionsGolang) String() string { return proto.CompactTextString(m) }
func (*ScriptingOptionsGolang) ProtoMessage()    {}
func (*ScriptingOptionsGolang) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{38}
}

func (m *ScriptingOptionsGolang) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingOptionsGolang.Unmarshal(m, b)
}
func (m *ScriptingOptionsGolang) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingOptionsGolang.Marshal(b, m, deterministic)
}
func (m *ScriptingOptionsGolang) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingOptionsGolang.Merge(m, src)
}
func (m *ScriptingOptionsGolang) XXX_Size() int {
	return xxx_messageInfo_ScriptingOptionsGolang.Size(m)
}
func (m *ScriptingOptionsGolang) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingOptionsGolang.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingOptionsGolang proto.InternalMessageInfo

func (m *ScriptingOptionsGolang) GetGopath() string {
	if m != nil {
		return m.Gopath
	}
	return ""
}

func (m *ScriptingOptionsGolang) GetGoroot() string {
	if m != nil {
		return m.Goroot
	}
	return ""
}

func (m *ScriptingOptionsGolang) GetPackages() []string {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *ScriptingOptionsGolang) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *ScriptingOptionsGolang) GetUpdatePackages() bool {
	if m != nil {
		return m.UpdatePackages
	}
	return false
}

type ScriptingOptionsPython struct {
	VirtualEnvPath       string   `protobuf:"bytes,1,opt,name=virtual_env_path,json=virtualEnvPath,proto3" json:"virtual_env_path,omitempty"`
	RequirementsPath     string   `protobuf:"bytes,2,opt,name=requirements_path,json=requirementsPath,proto3" json:"requirements_path,omitempty"`
	InterpreterBinary    string   `protobuf:"bytes,3,opt,name=interpreter_binary,json=interpreterBinary,proto3" json:"interpreter_binary,omitempty"`
	Packages             []string `protobuf:"bytes,4,rep,name=packages,proto3" json:"packages,omitempty"`
	LegacyPython         bool     `protobuf:"varint,5,opt,name=legacy_python,json=legacyPython,proto3" json:"legacy_python,omitempty"`
	AddTestReqs          bool     `protobuf:"varint,6,opt,name=add_test_reqs,json=addTestReqs,proto3" json:"add_test_reqs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScriptingOptionsPython) Reset()         { *m = ScriptingOptionsPython{} }
func (m *ScriptingOptionsPython) String() string { return proto.CompactTextString(m) }
func (*ScriptingOptionsPython) ProtoMessage()    {}
func (*ScriptingOptionsPython) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{39}
}

func (m *ScriptingOptionsPython) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingOptionsPython.Unmarshal(m, b)
}
func (m *ScriptingOptionsPython) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingOptionsPython.Marshal(b, m, deterministic)
}
func (m *ScriptingOptionsPython) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingOptionsPython.Merge(m, src)
}
func (m *ScriptingOptionsPython) XXX_Size() int {
	return xxx_messageInfo_ScriptingOptionsPython.Size(m)
}
func (m *ScriptingOptionsPython) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingOptionsPython.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingOptionsPython proto.InternalMessageInfo

func (m *ScriptingOptionsPython) GetVirtualEnvPath() string {
	if m != nil {
		return m.VirtualEnvPath
	}
	return ""
}

func (m *ScriptingOptionsPython) GetRequirementsPath() string {
	if m != nil {
		return m.RequirementsPath
	}
	return ""
}

func (m *ScriptingOptionsPython) GetInterpreterBinary() string {
	if m != nil {
		return m.InterpreterBinary
	}
	return ""
}

func (m *ScriptingOptionsPython) GetPackages() []string {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *ScriptingOptionsPython) GetLegacyPython() bool {
	if m != nil {
		return m.LegacyPython
	}
	return false
}

func (m *ScriptingOptionsPython) GetAddTestReqs() bool {
	if m != nil {
		return m.AddTestReqs
	}
	return false
}

type ScriptingOptionsRoswell struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Systems              []string `protobuf:"bytes,2,rep,name=systems,proto3" json:"systems,omitempty"`
	Lisp                 string   `protobuf:"bytes,3,opt,name=lisp,proto3" json:"lisp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScriptingOptionsRoswell) Reset()         { *m = ScriptingOptionsRoswell{} }
func (m *ScriptingOptionsRoswell) String() string { return proto.CompactTextString(m) }
func (*ScriptingOptionsRoswell) ProtoMessage()    {}
func (*ScriptingOptionsRoswell) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{40}
}

func (m *ScriptingOptionsRoswell) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingOptionsRoswell.Unmarshal(m, b)
}
func (m *ScriptingOptionsRoswell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingOptionsRoswell.Marshal(b, m, deterministic)
}
func (m *ScriptingOptionsRoswell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingOptionsRoswell.Merge(m, src)
}
func (m *ScriptingOptionsRoswell) XXX_Size() int {
	return xxx_messageInfo_ScriptingOptionsRoswell.Size(m)
}
func (m *ScriptingOptionsRoswell) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingOptionsRoswell.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingOptionsRoswell proto.InternalMessageInfo

func (m *ScriptingOptionsRoswell) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ScriptingOptionsRoswell) GetSystems() []string {
	if m != nil {
		return m.Systems
	}
	return nil
}

func (m *ScriptingOptionsRoswell) GetLisp() string {
	if m != nil {
		return m.Lisp
	}
	return ""
}

type ScriptingOptions struct {
	// Types that are valid to be assigned to Value:
	//	*ScriptingOptions_Golang
	//	*ScriptingOptions_Python
	//	*ScriptingOptions_Roswell
	Value                isScriptingOptions_Value `protobuf_oneof:"value"`
	Environment          map[string]string        `protobuf:"bytes,4,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Output               *OutputOptions           `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	Duration             int64                    `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ScriptingOptions) Reset()         { *m = ScriptingOptions{} }
func (m *ScriptingOptions) String() string { return proto.CompactTextString(m) }
func (*ScriptingOptions) ProtoMessage()    {}
func (*ScriptingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{41}
}

func (m *ScriptingOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingOptions.Unmarshal(m, b)
}
func (m *ScriptingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingOptions.Marshal(b, m, deterministic)
}
func (m *ScriptingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingOptions.Merge(m, src)
}
func (m *ScriptingOptions) XXX_Size() int {
	return xxx_messageInfo_ScriptingOptions.Size(m)
}
func (m *ScriptingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingOptions proto.InternalMessageInfo

type isScriptingOptions_Value interface {
	isScriptingOptions_Value()
}

type ScriptingOptions_Golang struct {
	Golang *ScriptingOptionsGolang `protobuf:"bytes,1,opt,name=golang,proto3,oneof"`
}

type ScriptingOptions_Python struct {
	Python *ScriptingOptionsPython `protobuf:"bytes,2,opt,name=python,proto3,oneof"`
}

type ScriptingOptions_Roswell struct {
	Roswell *ScriptingOptionsRoswell `protobuf:"bytes,3,opt,name=roswell,proto3,oneof"`
}

func (*ScriptingOptions_Golang) isScriptingOptions_Value() {}

func (*ScriptingOptions_Python) isScriptingOptions_Value() {}

func (*ScriptingOptions_Roswell) isScriptingOptions_Value() {}

func (m *ScriptingOptions) GetValue() isScriptingOptions_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ScriptingOptions) GetGolang() *ScriptingOptionsGolang {
	if x, ok := m.GetValue().(*ScriptingOptions_Golang); ok {
		return x.Golang
	}
	return nil
}

func (m *ScriptingOptions) GetPython() *ScriptingOptionsPython {
	if x, ok := m.GetValue().(*ScriptingOptions_Python); ok {
		return x.Python
	}
	return nil
}

func (m *ScriptingOptions) GetRoswell() *ScriptingOptionsRoswell {
	if x, ok := m.GetValue().(*ScriptingOptions_Roswell); ok {
		return x.Roswell
	}
	return nil
}

func (m *ScriptingOptions) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *ScriptingOptions) GetOutput() *OutputOptions {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ScriptingOptions) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ScriptingOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ScriptingOptions_Golang)(nil),
		(*ScriptingOptions_Python)(nil),
		(*ScriptingOptions_Roswell)(nil),
	}
}

type ScriptingHarnessRunArgs struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScriptingHarnessRunArgs) Reset()         { *m = ScriptingHarnessRunArgs{} }
func (m *ScriptingHarnessRunArgs) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessRunArgs) ProtoMessage()    {}
func (*ScriptingHarnessRunArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{42}
}

func (m *ScriptingHarnessRunArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessRunArgs.Unmarshal(m, b)
}
func (m *ScriptingHarnessRunArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessRunArgs.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessRunArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessRunArgs.Merge(m, src)
}
func (m *ScriptingHarnessRunArgs) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessRunArgs.Size(m)
}
func (m *ScriptingHarnessRunArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessRunArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessRunArgs proto.InternalMessageInfo

func (m *ScriptingHarnessRunArgs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ScriptingHarnessRunArgs) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ScriptingHarnessBuildArgs struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Directory            string   `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	Args                 []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScriptingHarnessBuildArgs) Reset()         { *m = ScriptingHarnessBuildArgs{} }
func (m *ScriptingHarnessBuildArgs) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessBuildArgs) ProtoMessage()    {}
func (*ScriptingHarnessBuildArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{43}
}

func (m *ScriptingHarnessBuildArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessBuildArgs.Unmarshal(m, b)
}
func (m *ScriptingHarnessBuildArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessBuildArgs.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessBuildArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessBuildArgs.Merge(m, src)
}
func (m *ScriptingHarnessBuildArgs) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessBuildArgs.Size(m)
}
func (m *ScriptingHarnessBuildArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessBuildArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessBuildArgs proto.InternalMessageInfo

func (m *ScriptingHarnessBuildArgs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ScriptingHarnessBuildArgs) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *ScriptingHarnessBuildArgs) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ScriptingHarnessBuildResponse struct {
	Outcome              *OperationOutcome `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Path                 string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ScriptingHarnessBuildResponse) Reset()         { *m = ScriptingHarnessBuildResponse{} }
func (m *ScriptingHarnessBuildResponse) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessBuildResponse) ProtoMessage()    {}
func (*ScriptingHarnessBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{44}
}

func (m *ScriptingHarnessBuildResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessBuildResponse.Unmarshal(m, b)
}
func (m *ScriptingHarnessBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessBuildResponse.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessBuildResponse.Merge(m, src)
}
func (m *ScriptingHarnessBuildResponse) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessBuildResponse.Size(m)
}
func (m *ScriptingHarnessBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessBuildResponse proto.InternalMessageInfo

func (m *ScriptingHarnessBuildResponse) GetOutcome() *OperationOutcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *ScriptingHarnessBuildResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ScriptingHarnessRunScriptArgs struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Script               string   `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScriptingHarnessRunScriptArgs) Reset()         { *m = ScriptingHarnessRunScriptArgs{} }
func (m *ScriptingHarnessRunScriptArgs) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessRunScriptArgs) ProtoMessage()    {}
func (*ScriptingHarnessRunScriptArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{45}
}

func (m *ScriptingHarnessRunScriptArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessRunScriptArgs.Unmarshal(m, b)
}
func (m *ScriptingHarnessRunScriptArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessRunScriptArgs.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessRunScriptArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessRunScriptArgs.Merge(m, src)
}
func (m *ScriptingHarnessRunScriptArgs) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessRunScriptArgs.Size(m)
}
func (m *ScriptingHarnessRunScriptArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessRunScriptArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessRunScriptArgs proto.InternalMessageInfo

func (m *ScriptingHarnessRunScriptArgs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ScriptingHarnessRunScriptArgs) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

type ScriptingHarnessTestArgs struct {
	Id                   string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Directory            string                         `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	Options              []*ScriptingHarnessTestOptions `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ScriptingHarnessTestArgs) Reset()         { *m = ScriptingHarnessTestArgs{} }
func (m *ScriptingHarnessTestArgs) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessTestArgs) ProtoMessage()    {}
func (*ScriptingHarnessTestArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{46}
}

func (m *ScriptingHarnessTestArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessTestArgs.Unmarshal(m, b)
}
func (m *ScriptingHarnessTestArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessTestArgs.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessTestArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessTestArgs.Merge(m, src)
}
func (m *ScriptingHarnessTestArgs) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessTestArgs.Size(m)
}
func (m *ScriptingHarnessTestArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessTestArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessTestArgs proto.InternalMessageInfo

func (m *ScriptingHarnessTestArgs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ScriptingHarnessTestArgs) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *ScriptingHarnessTestArgs) GetOptions() []*ScriptingHarnessTestOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type ScriptingHarnessTestOptions struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args                 []string           `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Pattern              string             `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Timeout              *duration.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Count                int32              `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ScriptingHarnessTestOptions) Reset()         { *m = ScriptingHarnessTestOptions{} }
func (m *ScriptingHarnessTestOptions) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessTestOptions) ProtoMessage()    {}
func (*ScriptingHarnessTestOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{47}
}

func (m *ScriptingHarnessTestOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessTestOptions.Unmarshal(m, b)
}
func (m *ScriptingHarnessTestOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessTestOptions.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessTestOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessTestOptions.Merge(m, src)
}
func (m *ScriptingHarnessTestOptions) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessTestOptions.Size(m)
}
func (m *ScriptingHarnessTestOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessTestOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessTestOptions proto.InternalMessageInfo

func (m *ScriptingHarnessTestOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScriptingHarnessTestOptions) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ScriptingHarnessTestOptions) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *ScriptingHarnessTestOptions) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *ScriptingHarnessTestOptions) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ScriptingHarnessTestResult struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartAt              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Duration             *duration.Duration   `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Outcome              string               `protobuf:"bytes,4,opt,name=outcome,proto3" json:"outcome,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ScriptingHarnessTestResult) Reset()         { *m = ScriptingHarnessTestResult{} }
func (m *ScriptingHarnessTestResult) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessTestResult) ProtoMessage()    {}
func (*ScriptingHarnessTestResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{48}
}

func (m *ScriptingHarnessTestResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessTestResult.Unmarshal(m, b)
}
func (m *ScriptingHarnessTestResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessTestResult.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessTestResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessTestResult.Merge(m, src)
}
func (m *ScriptingHarnessTestResult) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessTestResult.Size(m)
}
func (m *ScriptingHarnessTestResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessTestResult.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessTestResult proto.InternalMessageInfo

func (m *ScriptingHarnessTestResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScriptingHarnessTestResult) GetStartAt() *timestamp.Timestamp {
	if m != nil {
		return m.StartAt
	}
	return nil
}

func (m *ScriptingHarnessTestResult) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *ScriptingHarnessTestResult) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

type ScriptingHarnessTestResponse struct {
	Outcome              *OperationOutcome             `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Results              []*ScriptingHarnessTestResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ScriptingHarnessTestResponse) Reset()         { *m = ScriptingHarnessTestResponse{} }
func (m *ScriptingHarnessTestResponse) String() string { return proto.CompactTextString(m) }
func (*ScriptingHarnessTestResponse) ProtoMessage()    {}
func (*ScriptingHarnessTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{49}
}

func (m *ScriptingHarnessTestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptingHarnessTestResponse.Unmarshal(m, b)
}
func (m *ScriptingHarnessTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptingHarnessTestResponse.Marshal(b, m, deterministic)
}
func (m *ScriptingHarnessTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptingHarnessTestResponse.Merge(m, src)
}
func (m *ScriptingHarnessTestResponse) XXX_Size() int {
	return xxx_messageInfo_ScriptingHarnessTestResponse.Size(m)
}
func (m *ScriptingHarnessTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptingHarnessTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptingHarnessTestResponse proto.InternalMessageInfo

func (m *ScriptingHarnessTestResponse) GetOutcome() *OperationOutcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *ScriptingHarnessTestResponse) GetResults() []*ScriptingHarnessTestResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type LoggingCacheCreateArgs struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Options              *OutputOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LoggingCacheCreateArgs) Reset()         { *m = LoggingCacheCreateArgs{} }
func (m *LoggingCacheCreateArgs) String() string { return proto.CompactTextString(m) }
func (*LoggingCacheCreateArgs) ProtoMessage()    {}
func (*LoggingCacheCreateArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{50}
}

func (m *LoggingCacheCreateArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggingCacheCreateArgs.Unmarshal(m, b)
}
func (m *LoggingCacheCreateArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggingCacheCreateArgs.Marshal(b, m, deterministic)
}
func (m *LoggingCacheCreateArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingCacheCreateArgs.Merge(m, src)
}
func (m *LoggingCacheCreateArgs) XXX_Size() int {
	return xxx_messageInfo_LoggingCacheCreateArgs.Size(m)
}
func (m *LoggingCacheCreateArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingCacheCreateArgs.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingCacheCreateArgs proto.InternalMessageInfo

func (m *LoggingCacheCreateArgs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LoggingCacheCreateArgs) GetOptions() *OutputOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type LoggingCacheArgs struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoggingCacheArgs) Reset()         { *m = LoggingCacheArgs{} }
func (m *LoggingCacheArgs) String() string { return proto.CompactTextString(m) }
func (*LoggingCacheArgs) ProtoMessage()    {}
func (*LoggingCacheArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{51}
}

func (m *LoggingCacheArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggingCacheArgs.Unmarshal(m, b)
}
func (m *LoggingCacheArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggingCacheArgs.Marshal(b, m, deterministic)
}
func (m *LoggingCacheArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingCacheArgs.Merge(m, src)
}
func (m *LoggingCacheArgs) XXX_Size() int {
	return xxx_messageInfo_LoggingCacheArgs.Size(m)
}
func (m *LoggingCacheArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingCacheArgs.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingCacheArgs proto.InternalMessageInfo

func (m *LoggingCacheArgs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type LoggingCacheInstance struct {
	Outcome              *OperationOutcome    `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Id                   string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ManagerID            string               `protobuf:"bytes,3,opt,name=managerID,proto3" json:"managerID,omitempty"`
	Accessed             *timestamp.Timestamp `protobuf:"bytes,4,opt,name=accessed,proto3" json:"accessed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LoggingCacheInstance) Reset()         { *m = LoggingCacheInstance{} }
func (m *LoggingCacheInstance) String() string { return proto.CompactTextString(m) }
func (*LoggingCacheInstance) ProtoMessage()    {}
func (*LoggingCacheInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{52}
}

func (m *LoggingCacheInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggingCacheInstance.Unmarshal(m, b)
}
func (m *LoggingCacheInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggingCacheInstance.Marshal(b, m, deterministic)
}
func (m *LoggingCacheInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingCacheInstance.Merge(m, src)
}
func (m *LoggingCacheInstance) XXX_Size() int {
	return xxx_messageInfo_LoggingCacheInstance.Size(m)
}
func (m *LoggingCacheInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingCacheInstance.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingCacheInstance proto.InternalMessageInfo

func (m *LoggingCacheInstance) GetOutcome() *OperationOutcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *LoggingCacheInstance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LoggingCacheInstance) GetManagerID() string {
	if m != nil {
		return m.ManagerID
	}
	return ""
}

func (m *LoggingCacheInstance) GetAccessed() *timestamp.Timestamp {
	if m != nil {
		return m.Accessed
	}
	return nil
}

type LoggingCacheLenResponse struct {
	Outcome              *OperationOutcome `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Len                  int64             `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LoggingCacheLenResponse) Reset()         { *m = LoggingCacheLenResponse{} }
func (m *LoggingCacheLenResponse) String() string { return proto.CompactTextString(m) }
func (*LoggingCacheLenResponse) ProtoMessage()    {}
func (*LoggingCacheLenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{53}
}

func (m *LoggingCacheLenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggingCacheLenResponse.Unmarshal(m, b)
}
func (m *LoggingCacheLenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggingCacheLenResponse.Marshal(b, m, deterministic)
}
func (m *LoggingCacheLenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingCacheLenResponse.Merge(m, src)
}
func (m *LoggingCacheLenResponse) XXX_Size() int {
	return xxx_messageInfo_LoggingCacheLenResponse.Size(m)
}
func (m *LoggingCacheLenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingCacheLenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingCacheLenResponse proto.InternalMessageInfo

func (m *LoggingCacheLenResponse) GetOutcome() *OperationOutcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *LoggingCacheLenResponse) GetLen() int64 {
	if m != nil {
		return m.Len
	}
	return 0
}

type LoggingPayloadData struct {
	// Types that are valid to be assigned to Data:
	//	*LoggingPayloadData_Msg
	//	*LoggingPayloadData_Raw
	Data                 isLoggingPayloadData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *LoggingPayloadData) Reset()         { *m = LoggingPayloadData{} }
func (m *LoggingPayloadData) String() string { return proto.CompactTextString(m) }
func (*LoggingPayloadData) ProtoMessage()    {}
func (*LoggingPayloadData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{54}
}

func (m *LoggingPayloadData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggingPayloadData.Unmarshal(m, b)
}
func (m *LoggingPayloadData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggingPayloadData.Marshal(b, m, deterministic)
}
func (m *LoggingPayloadData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingPayloadData.Merge(m, src)
}
func (m *LoggingPayloadData) XXX_Size() int {
	return xxx_messageInfo_LoggingPayloadData.Size(m)
}
func (m *LoggingPayloadData) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingPayloadData.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingPayloadData proto.InternalMessageInfo

type isLoggingPayloadData_Data interface {
	isLoggingPayloadData_Data()
}

type LoggingPayloadData_Msg struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3,oneof"`
}

type LoggingPayloadData_Raw struct {
	Raw []byte `protobuf:"bytes,2,opt,name=raw,proto3,oneof"`
}

func (*LoggingPayloadData_Msg) isLoggingPayloadData_Data() {}

func (*LoggingPayloadData_Raw) isLoggingPayloadData_Data() {}

func (m *LoggingPayloadData) GetData() isLoggingPayloadData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LoggingPayloadData) GetMsg() string {
	if x, ok := m.GetData().(*LoggingPayloadData_Msg); ok {
		return x.Msg
	}
	return ""
}

func (m *LoggingPayloadData) GetRaw() []byte {
	if x, ok := m.GetData().(*LoggingPayloadData_Raw); ok {
		return x.Raw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LoggingPayloadData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LoggingPayloadData_Msg)(nil),
		(*LoggingPayloadData_Raw)(nil),
	}
}

type LoggingPayload struct {
	LoggerID             string                `protobuf:"bytes,1,opt,name=LoggerID,proto3" json:"LoggerID,omitempty"`
	Priority             int32                 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Format               LoggingPayloadFormat  `protobuf:"varint,3,opt,name=format,proto3,enum=jasper.LoggingPayloadFormat" json:"format,omitempty"`
	IsMulti              bool                  `protobuf:"varint,4,opt,name=is_multi,json=isMulti,proto3" json:"is_multi,omitempty"`
	PreferSendToError    bool                  `protobuf:"varint,5,opt,name=prefer_send_to_error,json=preferSendToError,proto3" json:"prefer_send_to_error,omitempty"`
	AddMetadata          bool                  `protobuf:"varint,6,opt,name=add_metadata,json=addMetadata,proto3" json:"add_metadata,omitempty"`
	Data                 []*LoggingPayloadData `protobuf:"bytes,7,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LoggingPayload) Reset()         { *m = LoggingPayload{} }
func (m *LoggingPayload) String() string { return proto.CompactTextString(m) }
func (*LoggingPayload) ProtoMessage()    {}
func (*LoggingPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{55}
}

func (m *LoggingPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggingPayload.Unmarshal(m, b)
}
func (m *LoggingPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggingPayload.Marshal(b, m, deterministic)
}
func (m *LoggingPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingPayload.Merge(m, src)
}
func (m *LoggingPayload) XXX_Size() int {
	return xxx_messageInfo_LoggingPayload.Size(m)
}
func (m *LoggingPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingPayload.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingPayload proto.InternalMessageInfo

func (m *LoggingPayload) GetLoggerID() string {
	if m != nil {
		return m.LoggerID
	}
	return ""
}

func (m *LoggingPayload) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *LoggingPayload) GetFormat() LoggingPayloadFormat {
	if m != nil {
		return m.Format
	}
	return LoggingPayloadFormat_FORMATUNKNONW
}

func (m *LoggingPayload) GetIsMulti() bool {
	if m != nil {
		return m.IsMulti
	}
	return false
}

func (m *LoggingPayload) GetPreferSendToError() bool {
	if m != nil {
		return m.PreferSendToError
	}
	return false
}

func (m *LoggingPayload) GetAddMetadata() bool {
	if m != nil {
		return m.AddMetadata
	}
	return false
}

func (m *LoggingPayload) GetData() []*LoggingPayloadData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("jasper.LogFormat", LogFormat_name, LogFormat_value)
	proto.RegisterEnum("jasper.RawLoggerConfigFormat", RawLoggerConfigFormat_name, RawLoggerConfigFormat_value)
	proto.RegisterEnum("jasper.FilterSpecifications", FilterSpecifications_name, FilterSpecifications_value)
	proto.RegisterEnum("jasper.Signals", Signals_name, Signals_value)
	proto.RegisterEnum("jasper.ArchiveFormat", ArchiveFormat_name, ArchiveFormat_value)
	proto.RegisterEnum("jasper.SignalTriggerID", SignalTriggerID_name, SignalTriggerID_value)
	proto.RegisterEnum("jasper.LoggingPayloadFormat", LoggingPayloadFormat_name, LoggingPayloadFormat_value)
	proto.RegisterType((*LoggerConfig)(nil), "jasper.LoggerConfig")
	proto.RegisterType((*LogLevel)(nil), "jasper.LogLevel")
	proto.RegisterType((*BufferOptions)(nil), "jasper.BufferOptions")
	proto.RegisterType((*BaseOptions)(nil), "jasper.BaseOptions")
	proto.RegisterType((*DefaultLoggerOptions)(nil), "jasper.DefaultLoggerOptions")
	proto.RegisterType((*FileLoggerOptions)(nil), "jasper.FileLoggerOptions")
	proto.RegisterType((*InheritedLoggerOptions)(nil), "jasper.InheritedLoggerOptions")
	proto.RegisterType((*InMemoryLoggerOptions)(nil), "jasper.InMemoryLoggerOptions")
	proto.RegisterType((*SplunkInfo)(nil), "jasper.SplunkInfo")
	proto.RegisterType((*SplunkLoggerOptions)(nil), "jasper.SplunkLoggerOptions")
	proto.RegisterType((*BuildloggerV2Info)(nil), "jasper.BuildloggerV2Info")
	proto.RegisterType((*BuildloggerV2Options)(nil), "jasper.BuildloggerV2Options")
	proto.RegisterType((*BuildloggerV3Info)(nil), "jasper.BuildloggerV3Info")
	proto.RegisterMapType((map[string]string)(nil), "jasper.BuildloggerV3Info.ArgsEntry")
	proto.RegisterType((*BuildloggerV3Options)(nil), "jasper.BuildloggerV3Options")
	proto.RegisterType((*RawLoggerConfig)(nil), "jasper.RawLoggerConfig")
	proto.RegisterType((*OutputOptions)(nil), "jasper.OutputOptions")
	proto.RegisterType((*CreateOptions)(nil), "jasper.CreateOptions")
	proto.RegisterMapType((map[string]string)(nil), "jasper.CreateOptions.EnvironmentEntry")
	proto.RegisterType((*IDResponse)(nil), "jasper.IDResponse")
	proto.RegisterType((*ProcessInfo)(nil), "jasper.ProcessInfo")
	proto.RegisterType((*StatusResponse)(nil), "jasper.StatusResponse")
	proto.RegisterType((*Filter)(nil), "jasper.Filter")
	proto.RegisterType((*SignalProcess)(nil), "jasper.SignalProcess")
	proto.RegisterType((*TagName)(nil), "jasper.TagName")
	proto.RegisterType((*ProcessTags)(nil), "jasper.ProcessTags")
	proto.RegisterType((*JasperProcessID)(nil), "jasper.JasperProcessID")
	proto.RegisterType((*OperationOutcome)(nil), "jasper.OperationOutcome")
	proto.RegisterType((*BuildOptions)(nil), "jasper.BuildOptions")
	proto.RegisterType((*MongoDBDownloadOptions)(nil), "jasper.MongoDBDownloadOptions")
	proto.RegisterType((*CacheOptions)(nil), "jasper.CacheOptions")
	proto.RegisterType((*ArchiveOptions)(nil), "jasper.ArchiveOptions")
	proto.RegisterType((*DownloadInfo)(nil), "jasper.DownloadInfo")
	proto.RegisterType((*WriteFileInfo)(nil), "jasper.WriteFileInfo")
	proto.RegisterType((*BuildloggerURLs)(nil), "jasper.BuildloggerURLs")
	proto.RegisterType((*LogRequest)(nil), "jasper.LogRequest")
	proto.RegisterType((*LogStream)(nil), "jasper.LogStream")
	proto.RegisterType((*SignalTriggerParams)(nil), "jasper.SignalTriggerParams")
	proto.RegisterType((*EventName)(nil), "jasper.EventName")
	proto.RegisterType((*ScriptingHarnessID)(nil), "jasper.ScriptingHarnessID")
	proto.RegisterType((*ScriptingOptionsGolang)(nil), "jasper.ScriptingOptionsGolang")
	proto.RegisterType((*ScriptingOptionsPython)(nil), "jasper.ScriptingOptionsPython")
	proto.RegisterType((*ScriptingOptionsRoswell)(nil), "jasper.ScriptingOptionsRoswell")
	proto.RegisterType((*ScriptingOptions)(nil), "jasper.ScriptingOptions")
	proto.RegisterMapType((map[string]string)(nil), "jasper.ScriptingOptions.EnvironmentEntry")
	proto.RegisterType((*ScriptingHarnessRunArgs)(nil), "jasper.ScriptingHarnessRunArgs")
	proto.RegisterType((*ScriptingHarnessBuildArgs)(nil), "jasper.ScriptingHarnessBuildArgs")
	proto.RegisterType((*ScriptingHarnessBuildResponse)(nil), "jasper.ScriptingHarnessBuildResponse")
	proto.RegisterType((*ScriptingHarnessRunScriptArgs)(nil), "jasper.ScriptingHarnessRunScriptArgs")
	proto.RegisterType((*ScriptingHarnessTestArgs)(nil), "jasper.ScriptingHarnessTestArgs")
	proto.RegisterType((*ScriptingHarnessTestOptions)(nil), "jasper.ScriptingHarnessTestOptions")
	proto.RegisterType((*ScriptingHarnessTestResult)(nil), "jasper.ScriptingHarnessTestResult")
	proto.RegisterType((*ScriptingHarnessTestResponse)(nil), "jasper.ScriptingHarnessTestResponse")
	proto.RegisterType((*LoggingCacheCreateArgs)(nil), "jasper.LoggingCacheCreateArgs")
	proto.RegisterType((*LoggingCacheArgs)(nil), "jasper.LoggingCacheArgs")
	proto.RegisterType((*LoggingCacheInstance)(nil), "jasper.LoggingCacheInstance")
	proto.RegisterType((*LoggingCacheLenResponse)(nil), "jasper.LoggingCacheLenResponse")
	proto.RegisterType((*LoggingPayloadData)(nil), "jasper.LoggingPayloadData")
	proto.RegisterType((*LoggingPayload)(nil), "jasper.LoggingPayload")
}

func init() { proto.RegisterFile("jasper.proto", fileDescriptor_d30110796082ce8e) }

var fileDescriptor_d30110796082ce8e = []byte{
	// 3902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x3a, 0xcb, 0x72, 0x1c, 0x47,
	0x72, 0x98, 0x07, 0xe6, 0x91, 0x78, 0x35, 0x8a, 0x20, 0x38, 0x04, 0x29, 0x91, 0xea, 0x5d, 0x2d,
	0x25, 0x6e, 0x08, 0x94, 0x00, 0xd1, 0x7a, 0xed, 0x6a, 0x77, 0x00, 0x0c, 0x80, 0x11, 0x87, 0x03,
	0x44, 0x63, 0x28, 0xae, 0xb5, 0x5e, 0x4f, 0x14, 0xa6, 0x0b, 0x83, 0x16, 0x7b, 0xba, 0x9b, 0xd5,
	0xd5, 0x00, 0xb1, 0x61, 0x1f, 0x1c, 0x3e, 0xf8, 0xb8, 0x8e, 0xf0, 0xd9, 0x37, 0x9f, 0xec, 0x8b,
	0x8f, 0x3e, 0xf8, 0xea, 0xb3, 0xff, 0xc5, 0x3e, 0x3b, 0xc2, 0x51, 0xaf, 0x7e, 0xa1, 0x67, 0xc0,
	0xa5, 0x4e, 0x98, 0xcc, 0xca, 0xcc, 0xca, 0xca, 0xca, 0xcc, 0xca, 0xcc, 0x06, 0x2c, 0xfe, 0x88,
	0xc3, 0x80, 0xd0, 0xcd, 0x80, 0xfa, 0xcc, 0x47, 0x35, 0x09, 0x6d, 0xdc, 0x1b, 0xfb, 0xfe, 0xd8,
	0x25, 0x4f, 0x04, 0xf6, 0x34, 0x3a, 0x7b, 0x42, 0x26, 0x01, 0xbb, 0x92, 0x44, 0x1b, 0x0f, 0xf2,
	0x8b, 0xcc, 0x99, 0x90, 0x90, 0xe1, 0x49, 0xa0, 0x08, 0xde, 0xcf, 0x13, 0xd8, 0x11, 0xc5, 0xcc,
	0xf1, 0x3d, 0xb9, 0x6e, 0xfe, 0x6f, 0x05, 0x16, 0x7b, 0xfe, 0x78, 0x4c, 0xe8, 0xae, 0xef, 0x9d,
	0x39, 0x63, 0xf4, 0x25, 0xd4, 0x6d, 0x72, 0x86, 0x23, 0x97, 0xb5, 0x4a, 0x0f, 0x4b, 0x1f, 0x2d,
	0x6c, 0xdd, 0xdf, 0x54, 0x6a, 0xed, 0x49, 0xb4, 0xa4, 0x3e, 0x0a, 0xb8, 0x90, 0xf0, 0x70, 0xce,
	0xd2, 0xe4, 0xe8, 0x09, 0x54, 0xcf, 0x1c, 0x97, 0xb4, 0xca, 0x82, 0xed, 0xae, 0x66, 0xdb, 0x77,
	0x5c, 0x92, 0xe7, 0x11, 0x84, 0xe8, 0x5b, 0x68, 0x3a, 0xde, 0x39, 0xa1, 0x0e, 0x23, 0x76, 0xab,
	0x22, 0xb8, 0xde, 0xd7, 0x5c, 0x5d, 0xbd, 0x90, 0x67, 0x4d, 0x58, 0xd0, 0xaf, 0x38, 0xff, 0x70,
	0x42, 0x26, 0x3e, 0xbd, 0x6a, 0x55, 0x05, 0xff, 0x7b, 0x09, 0xff, 0x73, 0x81, 0xcf, 0xb3, 0x37,
	0x1c, 0xb5, 0x80, 0x9e, 0x42, 0x2d, 0x0c, 0xdc, 0xc8, 0x7b, 0xd5, 0x9a, 0x17, 0xac, 0xf7, 0x34,
	0xeb, 0x89, 0xc0, 0xe6, 0x19, 0x15, 0x31, 0xda, 0x83, 0xa5, 0xd3, 0xc8, 0x71, 0x6d, 0x57, 0xac,
	0x5f, 0x6c, 0xb5, 0x6a, 0x59, 0x2b, 0xed, 0x24, 0x8b, 0xdf, 0x6f, 0x25, 0xec, 0x59, 0xa6, 0xbc,
	0x94, 0xed, 0x56, 0x7d, 0xba, 0x94, 0xed, 0x29, 0x52, 0xb6, 0xd1, 0x2f, 0xa1, 0x42, 0xf1, 0x65,
	0xab, 0x29, 0x78, 0xef, 0x68, 0x5e, 0x0b, 0x5f, 0xa6, 0x6f, 0xf4, 0x70, 0xce, 0xe2, 0x54, 0x3b,
	0x00, 0x8d, 0x80, 0xfa, 0x76, 0x34, 0x22, 0xd4, 0xdc, 0x81, 0x46, 0xcf, 0x1f, 0xf7, 0xc8, 0x05,
	0x71, 0xd1, 0x7d, 0x68, 0xb2, 0x73, 0x4a, 0xc2, 0x73, 0xdf, 0xb5, 0xc5, 0x95, 0xcf, 0x5b, 0x09,
	0x02, 0xb5, 0x12, 0x77, 0x28, 0x8b, 0x35, 0x0d, 0x9a, 0xa7, 0xb0, 0xb4, 0x13, 0x9d, 0x9d, 0xc5,
	0x36, 0x42, 0x1b, 0xd0, 0x38, 0x15, 0x08, 0x22, 0xe5, 0x34, 0xac, 0x18, 0xe6, 0x6b, 0xda, 0xf1,
	0x84, 0x9c, 0x8a, 0x15, 0xc3, 0xe8, 0x2e, 0x34, 0x26, 0xf8, 0xcd, 0x30, 0x74, 0xfe, 0x48, 0x84,
	0x17, 0x54, 0xac, 0xfa, 0x04, 0xbf, 0x39, 0x71, 0xfe, 0x48, 0xcc, 0x3f, 0x95, 0x60, 0x61, 0x07,
	0x87, 0x44, 0x6f, 0xf1, 0x0b, 0x98, 0x77, 0xb9, 0xd2, 0xca, 0x35, 0x0d, 0x7d, 0x64, 0x7d, 0x18,
	0x4b, 0x2e, 0xa3, 0x4f, 0xa0, 0x26, 0xb7, 0x56, 0xce, 0x78, 0x3b, 0xb1, 0x6b, 0x4a, 0x63, 0x4b,
	0x11, 0xa1, 0x8f, 0xa1, 0x76, 0xe6, 0xd3, 0x09, 0x66, 0x62, 0xff, 0xe5, 0xad, 0xd5, 0x94, 0xdc,
	0x7d, 0xb1, 0x60, 0x29, 0x02, 0xf3, 0x25, 0xac, 0x15, 0xc5, 0x01, 0x5a, 0x87, 0x5a, 0x40, 0xc9,
	0x99, 0xf3, 0x46, 0xa8, 0xd6, 0xb4, 0x14, 0x84, 0x1e, 0x41, 0xf5, 0x14, 0x87, 0x3a, 0x28, 0x6e,
	0xc5, 0x7a, 0x24, 0x87, 0xb2, 0x04, 0x81, 0xf9, 0x3b, 0x58, 0xbd, 0x16, 0x29, 0xdc, 0x6c, 0x3c,
	0x52, 0x3c, 0x3c, 0x21, 0x4a, 0x6e, 0x0c, 0xbf, 0xbd, 0xe4, 0x36, 0xac, 0x17, 0x47, 0x53, 0x2c,
	0xa2, 0x74, 0x93, 0x08, 0x1b, 0x6e, 0x17, 0x06, 0x14, 0x32, 0x61, 0x29, 0x0e, 0xc1, 0xe1, 0x08,
	0x07, 0x42, 0x54, 0xc5, 0x5a, 0xd0, 0x51, 0xb6, 0x8b, 0x83, 0xb7, 0x57, 0xb4, 0x0f, 0x20, 0x63,
	0xaf, 0xeb, 0x9d, 0xf9, 0xc8, 0x80, 0x4a, 0x44, 0x5d, 0x75, 0x6c, 0xfe, 0x13, 0xad, 0xc1, 0x3c,
	0xf3, 0x5f, 0x11, 0xe9, 0x41, 0x4d, 0x4b, 0x02, 0xdc, 0x43, 0x47, 0xe7, 0xd8, 0xf3, 0x88, 0x2b,
	0x6e, 0xaf, 0x69, 0x69, 0xd0, 0xfc, 0x11, 0x6e, 0x15, 0xc4, 0x32, 0x7a, 0x1c, 0x07, 0xbe, 0x3c,
	0x37, 0xca, 0x06, 0x3e, 0xdf, 0x3c, 0x8e, 0xf6, 0xb7, 0xd6, 0xfd, 0x3f, 0x4b, 0xb0, 0x9a, 0x09,
	0x7d, 0x71, 0x86, 0x07, 0xb0, 0x30, 0xa2, 0x04, 0x33, 0x32, 0x64, 0x24, 0x64, 0x2a, 0x2a, 0x40,
	0xa2, 0x06, 0x24, 0x64, 0xfa, 0x90, 0xe5, 0xe4, 0x90, 0xeb, 0x50, 0xf3, 0xa2, 0xc9, 0x29, 0xa1,
	0x2a, 0x16, 0x14, 0xc4, 0x0f, 0x1f, 0x9c, 0x73, 0x55, 0xaa, 0xf2, 0xf0, 0x02, 0xe0, 0x87, 0x17,
	0x29, 0x81, 0x50, 0x91, 0xc5, 0x9a, 0x96, 0x06, 0x11, 0x82, 0xaa, 0xd8, 0xb3, 0x26, 0xd0, 0xe2,
	0xb7, 0x30, 0x95, 0x3f, 0x99, 0x60, 0xcf, 0x16, 0xf9, 0x86, 0x9b, 0x4a, 0x82, 0xe6, 0xdf, 0xc0,
	0x5a, 0x51, 0xe2, 0x42, 0xdf, 0xc0, 0x42, 0x2a, 0xe5, 0x28, 0x83, 0xdd, 0x2d, 0xcc, 0x75, 0xc2,
	0x6e, 0x69, 0xea, 0xb7, 0x37, 0xde, 0xff, 0xcd, 0x67, 0x8d, 0xb7, 0x2d, 0x8c, 0xd7, 0x82, 0x7a,
	0x40, 0xfd, 0x1f, 0xc9, 0x88, 0x29, 0x27, 0xd0, 0x20, 0x5f, 0xb9, 0x20, 0x34, 0xd4, 0xc9, 0xa4,
	0x69, 0x69, 0x50, 0xac, 0x60, 0xea, 0x60, 0x8f, 0x69, 0x67, 0x50, 0x20, 0xba, 0x07, 0x4d, 0x86,
	0xc3, 0x57, 0x43, 0x11, 0x4b, 0xd2, 0x86, 0x0d, 0x8e, 0xe8, 0xf3, 0x58, 0xba, 0x03, 0x75, 0xb1,
	0xe8, 0xd8, 0xca, 0x8c, 0x35, 0x0e, 0x76, 0x6d, 0x9e, 0x1c, 0xc9, 0x1b, 0x32, 0x8a, 0x44, 0xe2,
	0xaa, 0xc9, 0xe4, 0x18, 0x23, 0x84, 0x4c, 0x12, 0x32, 0x29, 0xb3, 0xae, 0x64, 0x92, 0x90, 0x09,
	0x99, 0xdc, 0x5b, 0xa9, 0x83, 0xdd, 0x56, 0x43, 0xb0, 0x49, 0x80, 0xb3, 0x04, 0xd4, 0x1f, 0x49,
	0x96, 0xa6, 0x64, 0xe1, 0x08, 0xc1, 0x92, 0xe4, 0x21, 0xb8, 0x21, 0x0f, 0x89, 0xeb, 0xc5, 0xe3,
	0xb0, 0xb5, 0xf0, 0xb0, 0x22, 0xae, 0x17, 0x8f, 0x43, 0xf4, 0x05, 0x54, 0x31, 0x1d, 0x87, 0xad,
	0xc5, 0x87, 0x95, 0x8f, 0x16, 0xb6, 0x7e, 0x56, 0xf8, 0x96, 0x70, 0xcb, 0x6e, 0xb6, 0xe9, 0x38,
	0xec, 0x78, 0x8c, 0x5e, 0x59, 0x82, 0x81, 0xa7, 0x99, 0x09, 0x76, 0x3c, 0xd7, 0xf1, 0x48, 0x6b,
	0x49, 0x66, 0x6e, 0x0d, 0xa7, 0x12, 0xdb, 0x72, 0x26, 0xb1, 0xfd, 0x02, 0x56, 0x78, 0xd6, 0x96,
	0x19, 0x54, 0x26, 0xef, 0x15, 0xe1, 0xb0, 0x4b, 0x13, 0xfc, 0x46, 0xa6, 0x59, 0x9e, 0xc2, 0xd1,
	0x87, 0xb0, 0x7c, 0xe6, 0x46, 0xe1, 0xf9, 0xd0, 0xf1, 0x18, 0xa1, 0x17, 0xd8, 0x6d, 0x19, 0x92,
	0x4c, 0x60, 0xbb, 0x0a, 0x89, 0xb6, 0x61, 0xdd, 0x76, 0x42, 0x7c, 0xea, 0x92, 0xa1, 0x47, 0x2e,
	0x87, 0x7c, 0xeb, 0xe1, 0xe8, 0x9c, 0x8c, 0x5e, 0xb5, 0x56, 0x85, 0x42, 0xb7, 0xd4, 0x6a, 0x9f,
	0x5c, 0xf6, 0x1c, 0x8f, 0xec, 0xf2, 0x25, 0xf4, 0x01, 0x2c, 0x72, 0xff, 0x19, 0x62, 0xdb, 0xa6,
	0x24, 0x0c, 0x5b, 0x48, 0x68, 0xb8, 0xc0, 0x71, 0x6d, 0x89, 0xe2, 0x8f, 0x0b, 0x0d, 0x46, 0xc3,
	0xc0, 0xa7, 0xac, 0x75, 0x4b, 0x7a, 0x04, 0x0d, 0x46, 0xc7, 0x3e, 0x65, 0xfc, 0xd4, 0x8e, 0x17,
	0x92, 0x51, 0x44, 0x49, 0x6b, 0x4d, 0x9e, 0x5a, 0xc3, 0x7c, 0x2d, 0x0a, 0x09, 0x15, 0xb7, 0x74,
	0x5b, 0xde, 0x92, 0x86, 0xb9, 0xb3, 0xe0, 0xc0, 0x19, 0xbe, 0x22, 0x57, 0xad, 0x75, 0x69, 0x12,
	0x1c, 0x38, 0xcf, 0xc8, 0xd5, 0xc6, 0x17, 0xd0, 0x8c, 0x2d, 0xcb, 0x23, 0x9b, 0x53, 0xa8, 0xf4,
	0xf5, 0x8a, 0x5c, 0x71, 0x87, 0xb8, 0xc0, 0x6e, 0x44, 0x74, 0xfa, 0x12, 0xc0, 0xd7, 0xe5, 0x2f,
	0x4b, 0xe6, 0x3f, 0x95, 0xb2, 0xe1, 0xa7, 0x5f, 0x7c, 0xf4, 0x9b, 0x7c, 0x99, 0x30, 0x23, 0x00,
	0xc5, 0xd5, 0xe6, 0x2b, 0x04, 0x04, 0x55, 0x71, 0x06, 0xb9, 0xa5, 0xf8, 0x9d, 0x3c, 0xa2, 0x95,
	0x99, 0x8f, 0xa8, 0xe9, 0xc0, 0x4a, 0xae, 0x94, 0xe0, 0x35, 0x93, 0x72, 0xd0, 0x92, 0x70, 0xd0,
	0xf7, 0xa6, 0xd4, 0x1c, 0x39, 0x67, 0xe5, 0x69, 0x50, 0xe0, 0x87, 0x36, 0x66, 0x58, 0x28, 0xb3,
	0x68, 0x81, 0x44, 0xed, 0x61, 0x86, 0xcd, 0xbf, 0x2b, 0xc3, 0xd2, 0x51, 0xc4, 0x82, 0x88, 0xe9,
	0x93, 0x6f, 0x42, 0x5d, 0x1e, 0x22, 0x6c, 0x95, 0x84, 0x3b, 0xaf, 0xa5, 0xd4, 0x8c, 0xf7, 0xb1,
	0x34, 0x11, 0x7a, 0x04, 0x2b, 0x61, 0x14, 0x04, 0xfc, 0xce, 0x87, 0xbe, 0x90, 0x24, 0xb6, 0x69,
	0x58, 0xcb, 0x1a, 0x2d, 0xe5, 0x73, 0x7f, 0x8c, 0x09, 0x09, 0xa5, 0xbe, 0xcc, 0xb3, 0x0d, 0x6b,
	0x49, 0x63, 0x3b, 0x1c, 0x89, 0xbe, 0x80, 0x16, 0x25, 0xb6, 0x43, 0xc9, 0x88, 0x29, 0x79, 0x43,
	0xe6, 0x2b, 0x86, 0xaa, 0x60, 0xb8, 0xad, 0xd7, 0xa5, 0xe0, 0x81, 0x7f, 0x9d, 0x51, 0x90, 0x73,
	0x3e, 0xa5, 0xd1, 0x7c, 0x96, 0x51, 0x30, 0x0c, 0x7c, 0xc9, 0x6f, 0xfe, 0x57, 0x15, 0x96, 0x76,
	0xc5, 0xcb, 0xa0, 0x6d, 0x80, 0x54, 0x3c, 0x97, 0x64, 0x8c, 0x8b, 0x50, 0xfd, 0x25, 0xac, 0x5e,
	0xfa, 0xf4, 0x95, 0xe3, 0x8d, 0x87, 0x52, 0x08, 0xaf, 0x7d, 0xe5, 0xed, 0x1a, 0x6a, 0x61, 0x4f,
	0xe3, 0xd1, 0x21, 0x2c, 0x10, 0xef, 0xc2, 0xa1, 0xbe, 0x37, 0x21, 0x22, 0x23, 0x72, 0x43, 0xfe,
	0x42, 0x1b, 0x32, 0xb3, 0xd9, 0x66, 0x27, 0x21, 0x94, 0xa9, 0x21, 0xcd, 0x8a, 0x3e, 0x06, 0xc3,
	0xbf, 0x20, 0x94, 0x3a, 0x36, 0x19, 0x2a, 0xbc, 0x32, 0xc3, 0x8a, 0xc6, 0x2b, 0x01, 0xfc, 0x26,
	0x78, 0x13, 0xe2, 0x47, 0x6c, 0x18, 0x92, 0x91, 0xef, 0xd9, 0xa1, 0x38, 0x77, 0xc5, 0x5a, 0x56,
	0xe8, 0x13, 0x89, 0x8d, 0x53, 0x58, 0x2d, 0x95, 0xc2, 0x3e, 0x07, 0xf0, 0xbd, 0x61, 0x18, 0x8d,
	0x46, 0x3c, 0x9e, 0xeb, 0x42, 0xe1, 0xdb, 0x85, 0x0a, 0x5b, 0x4d, 0xdf, 0x3b, 0x91, 0x74, 0x8a,
	0xeb, 0x0c, 0x3b, 0x2e, 0x8f, 0xe5, 0xc6, 0x0d, 0x5c, 0xfb, 0x92, 0x4e, 0x71, 0x29, 0xa5, 0x5a,
	0xcd, 0x1b, 0xb8, 0x06, 0x92, 0x8e, 0x97, 0x96, 0xea, 0x36, 0x21, 0x5b, 0x5a, 0x66, 0xfc, 0xd7,
	0x52, 0x44, 0xe8, 0x53, 0x58, 0x0b, 0x19, 0xf6, 0x6c, 0x4c, 0xed, 0xa1, 0xe3, 0x71, 0x37, 0x3a,
	0xbd, 0x62, 0x84, 0xe7, 0x6d, 0x1e, 0x03, 0x48, 0xaf, 0x75, 0xf9, 0xd2, 0x0e, 0x5f, 0xd9, 0xf8,
	0x16, 0x8c, 0xfc, 0x5d, 0xfc, 0x59, 0xc9, 0xc4, 0x04, 0xe8, 0xee, 0x59, 0x24, 0x0c, 0x7c, 0x2f,
	0x24, 0x09, 0x5d, 0x29, 0x45, 0x67, 0xfe, 0x4f, 0x19, 0x16, 0x8e, 0xa9, 0xcf, 0x8d, 0x27, 0x9e,
	0xda, 0x65, 0x28, 0x3b, 0xb6, 0x22, 0x29, 0x3b, 0x36, 0xdf, 0x2f, 0x70, 0x6c, 0x55, 0xa9, 0xf3,
	0x9f, 0x3c, 0xe9, 0x9d, 0xfb, 0x21, 0xe3, 0x2f, 0xa4, 0x7c, 0x58, 0x6b, 0x1c, 0xec, 0x8a, 0x06,
	0x81, 0x46, 0x9e, 0xe7, 0x78, 0x63, 0xe5, 0x10, 0x1a, 0x44, 0xef, 0x03, 0xa8, 0x8b, 0x3c, 0x8b,
	0x5c, 0xe5, 0xfb, 0x29, 0x0c, 0xcf, 0xb1, 0x23, 0x7f, 0x12, 0xb8, 0x84, 0x11, 0xf1, 0xb4, 0x36,
	0xac, 0x18, 0xe6, 0x6b, 0xfc, 0x62, 0x6c, 0x7e, 0x33, 0x75, 0xb9, 0xa6, 0x61, 0xf4, 0x04, 0xea,
	0xbe, 0xb4, 0xb2, 0x78, 0x5a, 0xa7, 0x5e, 0x9a, 0xa6, 0xe2, 0x6f, 0x2e, 0x79, 0xe3, 0xb0, 0xe1,
	0xc8, 0xb7, 0xe5, 0x9b, 0x3b, 0x6f, 0x35, 0x38, 0x62, 0xd7, 0xb7, 0x09, 0x7a, 0x0a, 0x8d, 0x90,
	0x61, 0xca, 0x86, 0x58, 0xdf, 0xe8, 0xc6, 0xa6, 0xec, 0x99, 0x37, 0x75, 0xcf, 0xbc, 0x39, 0xd0,
	0x4d, 0xb5, 0x55, 0x17, 0xb4, 0x6d, 0x86, 0x3e, 0x83, 0x1a, 0xf1, 0x6c, 0xce, 0xb4, 0x70, 0x23,
	0xd3, 0x3c, 0xf1, 0xec, 0x36, 0x33, 0xdb, 0xb0, 0x7c, 0xc2, 0x30, 0x8b, 0xc2, 0xf8, 0x72, 0x52,
	0x46, 0x2d, 0x65, 0x8c, 0xba, 0x0e, 0x35, 0x3c, 0x62, 0xce, 0x05, 0x51, 0x49, 0x4c, 0x41, 0xe6,
	0xd7, 0x50, 0xdb, 0x77, 0x5c, 0x46, 0x28, 0xfa, 0x54, 0x25, 0x76, 0x99, 0x87, 0xef, 0xa7, 0x9a,
	0x6d, 0x46, 0xe8, 0x49, 0x40, 0x46, 0xce, 0x99, 0x33, 0xc2, 0xaa, 0xc8, 0xe2, 0x94, 0xa6, 0x0f,
	0x4b, 0x27, 0xce, 0xd8, 0xc3, 0xae, 0xba, 0x78, 0xf4, 0x14, 0x9a, 0xda, 0x07, 0xf6, 0xd4, 0xc3,
	0x12, 0xf7, 0x90, 0xdf, 0x89, 0x3f, 0xf1, 0xb2, 0x95, 0x50, 0xa2, 0x47, 0x50, 0x0b, 0x85, 0x1c,
	0xa1, 0xdb, 0xf2, 0xd6, 0x4a, 0x5c, 0x3e, 0x0b, 0x6c, 0x68, 0xa9, 0x65, 0xf3, 0x01, 0xd4, 0x07,
	0x78, 0xac, 0x6b, 0xa1, 0x02, 0x2f, 0xfc, 0x4d, 0xec, 0x84, 0x03, 0x1e, 0xfb, 0xf7, 0x65, 0x69,
	0x94, 0xe8, 0xd3, 0xb4, 0x12, 0x44, 0x9c, 0x2d, 0xca, 0x49, 0xb6, 0x30, 0x1f, 0xc1, 0x4a, 0x4e,
	0xd1, 0x29, 0x3b, 0xfd, 0x01, 0x8c, 0xa3, 0x80, 0xc8, 0x7e, 0xf3, 0x28, 0x62, 0x23, 0x7f, 0x22,
	0x4a, 0x67, 0x9d, 0x67, 0x64, 0x5d, 0xae, 0x41, 0x59, 0x3a, 0xbf, 0x61, 0xfa, 0xd1, 0xe4, 0xbf,
	0xb3, 0x3e, 0x54, 0xc9, 0xfa, 0x90, 0xf9, 0x23, 0x2c, 0x8a, 0x97, 0x38, 0xd5, 0x0c, 0x32, 0x4c,
	0xc7, 0x44, 0x17, 0xae, 0x0a, 0x92, 0x09, 0x7d, 0x74, 0xae, 0x05, 0xf3, 0xdf, 0x5c, 0x0d, 0x62,
	0x3b, 0xa2, 0xbe, 0x54, 0x15, 0xab, 0x02, 0xf9, 0x51, 0x6c, 0x72, 0x1a, 0xe9, 0xb8, 0x92, 0x80,
	0xf9, 0xb7, 0xb0, 0xfe, 0xdc, 0xf7, 0xc6, 0xfe, 0xde, 0xce, 0x9e, 0x7f, 0xe9, 0xb9, 0x3e, 0x8e,
	0x77, 0xdd, 0x06, 0x10, 0x8f, 0xff, 0xd0, 0x0f, 0x58, 0xa8, 0x2e, 0x74, 0x2d, 0x53, 0x29, 0xc4,
	0xe9, 0xec, 0x54, 0x41, 0xe2, 0xac, 0x01, 0x66, 0xb1, 0x4a, 0xfc, 0x37, 0x0f, 0x3e, 0x4a, 0x5c,
	0x82, 0x43, 0x12, 0x8a, 0x37, 0xa3, 0x69, 0xc5, 0xb0, 0x19, 0xc1, 0xe2, 0x2e, 0x1e, 0x9d, 0x93,
	0x54, 0x87, 0xaa, 0x2a, 0xb3, 0xb8, 0xe9, 0xd7, 0x30, 0xda, 0x84, 0x5b, 0x01, 0x8d, 0x3c, 0x32,
	0xb4, 0x89, 0x8b, 0xaf, 0xe2, 0xd7, 0x40, 0x66, 0x95, 0x55, 0xb1, 0xb4, 0xc7, 0x57, 0xf4, 0x83,
	0x30, 0x63, 0x10, 0xf0, 0x0f, 0x25, 0x58, 0x6e, 0xd3, 0xd1, 0xb9, 0x73, 0x11, 0xef, 0xcc, 0x1f,
	0xf2, 0x73, 0x3f, 0x72, 0xed, 0x21, 0x79, 0xc3, 0x28, 0x1e, 0xe9, 0xf6, 0x6a, 0x49, 0x62, 0x3b,
	0x12, 0xc9, 0xf3, 0xb5, 0x2a, 0x59, 0xa4, 0xbb, 0xc6, 0xc9, 0x42, 0x89, 0xbb, 0x5e, 0xaa, 0xc8,
	0xcb, 0x1a, 0x0a, 0xb3, 0xc8, 0x2b, 0x01, 0x89, 0x3a, 0xc6, 0xec, 0xdc, 0xf4, 0x61, 0x51, 0x1b,
	0x7e, 0x4a, 0x9b, 0x5a, 0x64, 0xd2, 0xaf, 0x60, 0x11, 0xcb, 0xfd, 0xe4, 0xed, 0xc8, 0xd2, 0x6b,
	0x3d, 0xa7, 0x8b, 0xbe, 0x9f, 0x05, 0x1c, 0xc3, 0xa1, 0xe9, 0xc0, 0xd2, 0x4b, 0xde, 0xbb, 0xef,
	0x3b, 0x2e, 0x11, 0x3b, 0x6a, 0xf9, 0xa5, 0x94, 0x7c, 0xd1, 0xd9, 0x79, 0x8c, 0xbf, 0xf2, 0xb2,
	0xba, 0xd2, 0xa0, 0x48, 0x25, 0x41, 0x40, 0x3c, 0x5b, 0xb9, 0x91, 0x82, 0x84, 0x14, 0x42, 0x27,
	0x42, 0x93, 0x25, 0x4b, 0xfc, 0x36, 0x3f, 0x84, 0x95, 0x54, 0x45, 0xf9, 0xc2, 0xea, 0x09, 0xff,
	0x88, 0xa8, 0x1b, 0xd7, 0x20, 0xfc, 0xb7, 0xf9, 0x0c, 0xa0, 0xe7, 0x8f, 0x2d, 0xf2, 0x3a, 0xe2,
	0x4d, 0xe5, 0xa3, 0xf8, 0xed, 0x98, 0x91, 0x3f, 0xf8, 0xa3, 0xb2, 0x06, 0xf3, 0x23, 0x3f, 0x52,
	0x1a, 0x56, 0x2c, 0x09, 0x98, 0xdb, 0xd0, 0xec, 0xf9, 0xe3, 0x13, 0x46, 0x09, 0x9e, 0xf0, 0xdd,
	0x5c, 0x3f, 0xa9, 0x78, 0xf8, 0x6f, 0x8e, 0xb3, 0x7d, 0x4f, 0x67, 0x42, 0xf1, 0xdb, 0xfc, 0x53,
	0x09, 0x6e, 0xc9, 0x74, 0x33, 0xa0, 0x0e, 0xd7, 0xf5, 0x18, 0x53, 0x3c, 0x11, 0x29, 0x2d, 0x78,
	0xeb, 0x94, 0x96, 0xe4, 0x96, 0x36, 0xac, 0x84, 0x69, 0x69, 0xdd, 0x3d, 0xe5, 0x2c, 0x77, 0xb2,
	0xb9, 0x2d, 0x5e, 0xb6, 0xf2, 0xf4, 0xe6, 0x07, 0xd0, 0xec, 0x5c, 0x10, 0x8f, 0xcd, 0x48, 0x77,
	0x3f, 0x07, 0x74, 0x32, 0xa2, 0x4e, 0xc0, 0x1c, 0x6f, 0x7c, 0x88, 0xa9, 0x27, 0xf7, 0xce, 0x3d,
	0xbd, 0xe6, 0xbf, 0x95, 0x60, 0x3d, 0x26, 0x53, 0x0e, 0x71, 0xe0, 0xbb, 0xd8, 0x1b, 0xf3, 0xab,
	0x1c, 0xfb, 0xa9, 0xab, 0x57, 0x90, 0xc4, 0x53, 0xdf, 0xd7, 0x19, 0x4b, 0x41, 0x3c, 0x36, 0x03,
	0x3c, 0x7a, 0x85, 0xc7, 0x49, 0x1c, 0x6b, 0x98, 0x27, 0xdb, 0xa4, 0x7e, 0x94, 0xed, 0x70, 0x82,
	0xe0, 0x35, 0x5c, 0x14, 0xd8, 0x98, 0x91, 0x61, 0x2c, 0x40, 0xbe, 0xdf, 0xcb, 0x12, 0x7d, 0xac,
	0xb0, 0xe6, 0xdf, 0x97, 0xaf, 0x6b, 0x7b, 0x7c, 0xc5, 0xce, 0x7d, 0x0f, 0x7d, 0x04, 0xc6, 0x85,
	0x43, 0x59, 0x84, 0x5d, 0x5e, 0x31, 0x0e, 0x53, 0x7a, 0x2f, 0x2b, 0x7c, 0xc7, 0xbb, 0xe0, 0x21,
	0xc5, 0x6b, 0x5a, 0x4a, 0x5e, 0x47, 0x0e, 0x25, 0xbc, 0xe2, 0x09, 0x87, 0xa9, 0xe8, 0x31, 0xd2,
	0x0b, 0x82, 0xf8, 0x13, 0x40, 0xa2, 0x93, 0x0c, 0x28, 0x61, 0x84, 0x0e, 0x4f, 0x1d, 0x0f, 0xd3,
	0x2b, 0x15, 0xa7, 0xab, 0xa9, 0x95, 0x1d, 0xb1, 0x90, 0xb1, 0x41, 0x35, 0x67, 0x83, 0x9f, 0xc1,
	0x92, 0x4b, 0xc6, 0x78, 0x74, 0x35, 0x0c, 0x84, 0xca, 0xea, 0x8c, 0x8b, 0x12, 0xa9, 0x8e, 0x61,
	0xc2, 0x12, 0xb6, 0x6d, 0x31, 0xbf, 0x19, 0x52, 0xf2, 0x3a, 0x54, 0xa5, 0xca, 0x02, 0xb6, 0xed,
	0x01, 0x09, 0x99, 0x45, 0x5e, 0x87, 0xe6, 0xef, 0xe1, 0x4e, 0xde, 0x08, 0x96, 0x1f, 0x5e, 0x12,
	0xd7, 0x9d, 0x16, 0xac, 0xe1, 0x55, 0xc8, 0xc8, 0x44, 0xbf, 0x66, 0x1a, 0x14, 0xfe, 0xef, 0x84,
	0x81, 0x3a, 0x8e, 0xf8, 0x6d, 0xfe, 0x4b, 0x05, 0x8c, 0xbc, 0x74, 0xf4, 0x25, 0xbf, 0x72, 0xee,
	0x14, 0xca, 0xcb, 0xe3, 0xb9, 0x79, 0xb1, 0xeb, 0x1c, 0xce, 0x59, 0x8a, 0x9e, 0x73, 0xaa, 0xd3,
	0x96, 0x67, 0x73, 0xca, 0xf3, 0x73, 0x4e, 0x49, 0x8f, 0xbe, 0x81, 0x3a, 0x95, 0xa7, 0x52, 0xe9,
	0xeb, 0xc1, 0x34, 0x56, 0x75, 0xf8, 0xc3, 0x39, 0x4b, 0x73, 0xa0, 0x67, 0xd9, 0x56, 0xa4, 0x2a,
	0xaa, 0xed, 0x8f, 0xa7, 0x09, 0xb8, 0xa1, 0x1b, 0x49, 0x6a, 0xf0, 0xf9, 0xb7, 0xa9, 0xc1, 0xd3,
	0xc3, 0xe7, 0x5a, 0x76, 0xf8, 0xfc, 0x53, 0xab, 0xed, 0x9d, 0xba, 0x5a, 0x31, 0x7f, 0x9d, 0xf2,
	0x01, 0x15, 0xdd, 0x56, 0xe4, 0xb5, 0x79, 0xcf, 0x96, 0xaf, 0xae, 0x75, 0x5f, 0x57, 0x4e, 0xfa,
	0x3a, 0xf3, 0x0f, 0x70, 0x37, 0xcf, 0x2e, 0x52, 0x71, 0xa1, 0x80, 0x4c, 0xf0, 0x96, 0xf3, 0xc1,
	0xab, 0xc5, 0x57, 0x52, 0xe2, 0xc7, 0xf0, 0x5e, 0xa1, 0xf8, 0xb8, 0x14, 0xdd, 0x82, 0xba, 0x2f,
	0x0b, 0x23, 0xe5, 0x51, 0xad, 0xd8, 0xa6, 0xb9, 0xc2, 0xc9, 0xd2, 0x84, 0x45, 0x0f, 0x9d, 0x79,
	0x70, 0x7d, 0x23, 0x2b, 0xf2, 0x24, 0xaa, 0xf0, 0x2c, 0xeb, 0x50, 0x0b, 0xc5, 0xaa, 0x4e, 0x5e,
	0x12, 0xe2, 0x2f, 0x7e, 0x2b, 0x2f, 0x89, 0x07, 0xdc, 0x3b, 0x18, 0xe4, 0xd7, 0x49, 0xc3, 0x50,
	0xc9, 0x8e, 0xc6, 0x8a, 0x36, 0xc8, 0xb7, 0x0f, 0xe6, 0xbf, 0x96, 0xe0, 0xde, 0x0c, 0xc2, 0x78,
	0xc6, 0x52, 0x4a, 0xcd, 0x58, 0x0a, 0xae, 0x58, 0xcc, 0x33, 0x31, 0x63, 0x84, 0xc6, 0x95, 0x9e,
	0x02, 0xd1, 0x36, 0xd4, 0x75, 0x1b, 0x5a, 0x55, 0x03, 0x9e, 0x7c, 0x37, 0xb1, 0xa7, 0x1c, 0xd6,
	0xd2, 0x94, 0xc9, 0x73, 0x3a, 0x2f, 0xe7, 0x8b, 0xf2, 0x39, 0xfd, 0x8f, 0x12, 0x6c, 0x14, 0x29,
	0x6b, 0x91, 0x30, 0x72, 0x59, 0xa1, 0xae, 0xe9, 0x0e, 0xa8, 0xfc, 0xf6, 0x1d, 0xd0, 0xd3, 0x54,
	0x54, 0x55, 0x6e, 0xd2, 0x3a, 0xf9, 0xda, 0xd3, 0x4a, 0x1c, 0x4d, 0x3e, 0x3b, 0x1a, 0x34, 0xff,
	0xb1, 0x04, 0xf7, 0xa7, 0xa8, 0xfe, 0xee, 0x3e, 0xfa, 0x2b, 0xa8, 0x53, 0x71, 0x74, 0x79, 0x17,
	0x0b, 0x5b, 0xe6, 0xac, 0xbb, 0x97, 0x56, 0xb2, 0x34, 0x8b, 0xf9, 0x97, 0xb0, 0xde, 0xf3, 0xc7,
	0x63, 0xc7, 0x1b, 0x8b, 0xa2, 0x57, 0xf6, 0x97, 0x85, 0x1e, 0x98, 0x6a, 0x4a, 0xcb, 0xb3, 0x72,
	0x52, 0xec, 0x55, 0x26, 0x18, 0x69, 0xd1, 0x45, 0x42, 0xcd, 0x7f, 0x2f, 0xc1, 0x5a, 0x9a, 0xa8,
	0xeb, 0x85, 0x0c, 0x7b, 0xa3, 0x77, 0xb3, 0x84, 0x14, 0x5e, 0x4e, 0xc7, 0xcc, 0x04, 0x7b, 0x58,
	0x96, 0x3b, 0xd2, 0x21, 0x13, 0x04, 0xfa, 0x0b, 0x68, 0x60, 0xd1, 0x0d, 0x11, 0x5b, 0xf9, 0xe4,
	0x2c, 0xa7, 0x88, 0x69, 0xcd, 0x21, 0xdc, 0x49, 0x6b, 0xdc, 0x23, 0xde, 0x4f, 0xba, 0x3e, 0x03,
	0x2a, 0x2e, 0xd1, 0x9f, 0x0c, 0xf9, 0x4f, 0x73, 0x0f, 0x90, 0xda, 0xe0, 0x18, 0x5f, 0xf1, 0x2a,
	0x7c, 0x0f, 0x33, 0x8c, 0x10, 0x54, 0x26, 0xa1, 0x7c, 0x0c, 0x9b, 0x87, 0x73, 0x16, 0x07, 0x38,
	0x8e, 0xe2, 0x4b, 0x59, 0x0f, 0xeb, 0x8f, 0xa0, 0x35, 0xa8, 0xda, 0x98, 0x61, 0xf3, 0x9f, 0xcb,
	0xb0, 0x9c, 0x15, 0xc3, 0x5f, 0x09, 0x39, 0x5a, 0x8c, 0xbb, 0xcf, 0x18, 0x16, 0x55, 0x04, 0x75,
	0x7c, 0xea, 0xb0, 0x2b, 0xf5, 0x19, 0x34, 0x86, 0xd1, 0xe7, 0xb9, 0x8f, 0x87, 0xf7, 0xd3, 0x83,
	0xca, 0x44, 0x7e, 0xae, 0xcf, 0xb8, 0x0b, 0x0d, 0x27, 0x1c, 0x4e, 0x22, 0x97, 0x39, 0x7a, 0x6e,
	0xe2, 0x84, 0xcf, 0x39, 0x88, 0x9e, 0xc0, 0x5a, 0x40, 0x89, 0x98, 0xaa, 0x13, 0xcf, 0x4e, 0xc6,
	0x8e, 0xb2, 0x3a, 0x59, 0x95, 0x6b, 0x27, 0xc4, 0xb3, 0xf5, 0xc8, 0xf1, 0x03, 0x58, 0xe4, 0x25,
	0xca, 0x84, 0x30, 0x2c, 0xe6, 0xab, 0x49, 0x85, 0xf2, 0x5c, 0xa1, 0xd0, 0xa6, 0x3c, 0xb7, 0x9a,
	0xa8, 0x6d, 0x14, 0xab, 0xc8, 0x2d, 0x69, 0x09, 0xba, 0xc7, 0xaf, 0x45, 0x55, 0x2e, 0x75, 0x46,
	0x6b, 0x60, 0xf4, 0x8e, 0x0e, 0xf6, 0x8f, 0xac, 0xe7, 0xed, 0xc1, 0x8b, 0xfe, 0xb3, 0xfe, 0xd1,
	0xcb, 0xbe, 0x31, 0x87, 0x10, 0x2c, 0xc7, 0xd8, 0xe3, 0x5e, 0xbb, 0xdb, 0x37, 0x4a, 0x68, 0x15,
	0x96, 0x62, 0xdc, 0x77, 0x27, 0x47, 0x7d, 0xa3, 0x9c, 0x41, 0xed, 0x70, 0x54, 0x25, 0x23, 0x6f,
	0xaf, 0xb3, 0xdf, 0x7e, 0xd1, 0x1b, 0x18, 0xd5, 0xc7, 0x97, 0x70, 0xbb, 0x70, 0x8a, 0x8c, 0xde,
	0x83, 0xbb, 0x56, 0xfb, 0x65, 0xef, 0xe8, 0xe0, 0xa0, 0x63, 0xed, 0x1e, 0xf5, 0xf7, 0xbb, 0xe9,
	0x0d, 0xe6, 0xa6, 0x2e, 0x8b, 0xcd, 0x4a, 0xe8, 0x21, 0xdc, 0x2f, 0x5c, 0xd6, 0x07, 0x29, 0x3f,
	0xfe, 0x1d, 0xac, 0x15, 0x8d, 0x4d, 0x50, 0x1d, 0x2a, 0xed, 0x5e, 0xcf, 0x98, 0x43, 0x0b, 0x50,
	0xb7, 0x5e, 0xf4, 0xfb, 0xdd, 0xfe, 0x81, 0x51, 0x42, 0xcb, 0x00, 0x83, 0x8e, 0xf5, 0xbc, 0xdb,
	0x6f, 0x0f, 0x3a, 0x7b, 0x46, 0x19, 0x01, 0xd4, 0xf6, 0xdb, 0xdd, 0x5e, 0x67, 0xcf, 0xa8, 0xf0,
	0xb5, 0x93, 0x17, 0xbb, 0xbb, 0x9d, 0x93, 0x93, 0xfd, 0x17, 0x3d, 0xa3, 0xfa, 0x98, 0x40, 0x5d,
	0x0d, 0x45, 0xb8, 0x8c, 0xc4, 0x74, 0x4b, 0xd0, 0x8c, 0x65, 0x18, 0x25, 0xd4, 0x80, 0xea, 0xb3,
	0x6e, 0xaf, 0x27, 0x85, 0x1d, 0xb6, 0xfb, 0x07, 0x2f, 0x8e, 0x8d, 0x0a, 0xc7, 0x76, 0xfb, 0xdd,
	0x81, 0x51, 0x45, 0x4d, 0x98, 0x7f, 0x71, 0xd2, 0xb1, 0x3e, 0x33, 0xe6, 0xf5, 0xcf, 0x2d, 0xa3,
	0xc6, 0xd7, 0xdb, 0x3b, 0xd6, 0xc0, 0xa8, 0x3f, 0xfe, 0x1e, 0x96, 0x32, 0xcd, 0x2c, 0xbf, 0x9a,
	0xb6, 0xb5, 0x7b, 0xd8, 0xfd, 0xbe, 0x93, 0xec, 0xb9, 0x02, 0x0b, 0x0a, 0xd7, 0x7e, 0x31, 0x38,
	0x32, 0x4a, 0xc8, 0x80, 0x45, 0x85, 0x18, 0xb4, 0xad, 0x83, 0x1f, 0x8c, 0x32, 0x57, 0x5f, 0x61,
	0x7e, 0xe8, 0x1e, 0x1b, 0x95, 0xc7, 0x9f, 0xc1, 0x4a, 0xae, 0xef, 0xe1, 0x9b, 0xf6, 0x8f, 0xfa,
	0x1d, 0x63, 0x8e, 0x5f, 0xe2, 0x6e, 0xaf, 0xd3, 0xee, 0xeb, 0x83, 0x74, 0xb9, 0xb5, 0x1f, 0xff,
	0x3e, 0x4e, 0x58, 0x19, 0xb7, 0xe7, 0x5e, 0x90, 0x32, 0x7b, 0xff, 0xa5, 0x31, 0xc7, 0x77, 0xcb,
	0x5c, 0x54, 0x0c, 0x2b, 0xc7, 0x31, 0x60, 0x51, 0xc2, 0x27, 0x03, 0x8b, 0x9b, 0xbe, 0xb2, 0xf5,
	0xdf, 0x6b, 0xb0, 0x96, 0xe9, 0xe2, 0x9e, 0xcb, 0x74, 0x85, 0x3e, 0x85, 0x72, 0x77, 0x0f, 0xad,
	0x5f, 0x4b, 0x50, 0x9d, 0x49, 0xc0, 0xae, 0x36, 0xe2, 0xef, 0xbb, 0xa9, 0xb1, 0xe8, 0xe7, 0x50,
	0x93, 0xc9, 0x1c, 0x15, 0x0f, 0x0f, 0x37, 0xe2, 0xaf, 0x95, 0xe9, 0x31, 0xe9, 0x27, 0x50, 0xed,
	0x39, 0x21, 0x43, 0xcb, 0xd9, 0x71, 0x5b, 0x21, 0xf1, 0xa7, 0x25, 0xf4, 0x04, 0xe6, 0x0f, 0xa8,
	0x1f, 0x05, 0x28, 0x1e, 0x91, 0xa9, 0x79, 0xd8, 0x34, 0x86, 0x6d, 0xa8, 0x1c, 0x10, 0x86, 0xa6,
	0xb5, 0xac, 0xc5, 0x4a, 0x7d, 0x05, 0x35, 0x79, 0x4b, 0xc9, 0x51, 0x32, 0x73, 0xbe, 0x8d, 0xa9,
	0x69, 0x16, 0x7d, 0x05, 0xf3, 0xbb, 0x2e, 0xc1, 0x74, 0xaa, 0xe9, 0x6e, 0x60, 0xf5, 0x43, 0xf2,
	0x0e, 0xac, 0xdf, 0x42, 0x33, 0x1e, 0x68, 0x24, 0x3a, 0x67, 0x66, 0x1c, 0xd3, 0xb9, 0x3f, 0x2a,
	0xa1, 0x6f, 0x00, 0x06, 0x78, 0xac, 0xa7, 0x98, 0x79, 0x9b, 0x0c, 0xf0, 0x38, 0x9c, 0xbd, 0xb9,
	0x45, 0x42, 0xc2, 0xc4, 0xc4, 0x71, 0xaa, 0xa1, 0xa7, 0xf3, 0x7f, 0x01, 0xf5, 0x83, 0x9b, 0xb8,
	0x8b, 0x54, 0x42, 0xc7, 0x70, 0xc7, 0x22, 0x63, 0x27, 0xe4, 0x79, 0x26, 0x17, 0x54, 0xf7, 0x0a,
	0xa7, 0x0c, 0x72, 0xa4, 0x31, 0xf3, 0x0a, 0xaa, 0x2f, 0xb1, 0xc3, 0xde, 0xf1, 0x14, 0x3c, 0x14,
	0xf0, 0xa5, 0xf7, 0x67, 0x3a, 0xdb, 0x73, 0xb8, 0x9d, 0xaf, 0x9b, 0x4e, 0x08, 0x8b, 0x02, 0xb4,
	0x31, 0xad, 0xac, 0x9a, 0xa9, 0xc7, 0xd1, 0xf5, 0xa6, 0x89, 0x3b, 0xa4, 0xf7, 0xce, 0x02, 0x8f,
	0xe1, 0x56, 0x41, 0xfb, 0x81, 0x1e, 0x4c, 0x13, 0xa6, 0x5a, 0xb4, 0x19, 0x12, 0xf1, 0xf5, 0x13,
	0x8b, 0xce, 0x09, 0x7d, 0x30, 0x4d, 0x66, 0xdc, 0xb7, 0x6d, 0x7c, 0x38, 0x93, 0x24, 0x4e, 0x46,
	0x7f, 0x75, 0xbd, 0xf7, 0x8b, 0x7b, 0x26, 0xf4, 0xe1, 0x0c, 0xd5, 0x93, 0xb6, 0x6a, 0xc6, 0x01,
	0xfe, 0x1a, 0xd6, 0x8a, 0x4a, 0x5d, 0xf4, 0x70, 0x56, 0x21, 0x2c, 0x64, 0xfe, 0xfc, 0x86, 0x52,
	0x59, 0x6a, 0x6f, 0xc5, 0x05, 0x59, 0xaa, 0x46, 0x46, 0xef, 0xe7, 0x4a, 0x8c, 0x5c, 0xfd, 0xbc,
	0x71, 0xbf, 0x68, 0x3d, 0xae, 0x6f, 0xbb, 0xb0, 0x92, 0xc6, 0xf3, 0xa4, 0xd8, 0x2a, 0x62, 0x78,
	0x0b, 0x51, 0x87, 0x59, 0xf5, 0x2c, 0x32, 0xf1, 0x2f, 0xc8, 0x0c, 0x69, 0xb3, 0x7c, 0x6b, 0x23,
	0x73, 0x18, 0x9e, 0xfe, 0xda, 0x9e, 0xfd, 0x13, 0x24, 0x76, 0x60, 0x35, 0x2b, 0xf1, 0xdd, 0x72,
	0xf1, 0x77, 0x59, 0x6b, 0xf5, 0x88, 0x37, 0x55, 0xc8, 0x83, 0x22, 0x2d, 0xd3, 0x45, 0x7a, 0x37,
	0xab, 0xd2, 0x31, 0x8d, 0x3c, 0x82, 0x66, 0x94, 0xfe, 0x33, 0xd4, 0xea, 0xa7, 0x46, 0x83, 0x3a,
	0xb8, 0xa5, 0x73, 0xb4, 0xa6, 0xcd, 0x7d, 0x36, 0x66, 0x44, 0x3d, 0x7a, 0x76, 0x3d, 0xb6, 0xb9,
	0x63, 0xbc, 0x5b, 0xa2, 0xf8, 0x12, 0x6a, 0xf2, 0x63, 0xdc, 0x54, 0x53, 0xc5, 0xc3, 0xf9, 0xdc,
	0x47, 0xbb, 0xdf, 0xc2, 0xb2, 0x2c, 0x4f, 0x23, 0x4a, 0x84, 0x8d, 0x50, 0xfc, 0x91, 0x25, 0xfd,
	0x65, 0x64, 0xe6, 0x1b, 0x14, 0x7f, 0x42, 0x10, 0x6f, 0x60, 0xcc, 0x9f, 0xfe, 0xb0, 0x30, 0x83,
	0xff, 0x19, 0xac, 0x68, 0x4a, 0xf5, 0x29, 0x28, 0x09, 0xb7, 0xe2, 0x6f, 0x43, 0x33, 0x84, 0x3d,
	0x85, 0xc5, 0x03, 0xc2, 0x52, 0x23, 0xf8, 0x94, 0x87, 0xa8, 0x11, 0xff, 0x46, 0xfa, 0xff, 0x90,
	0x14, 0xd9, 0x3e, 0xa0, 0x03, 0xc2, 0xf2, 0x5f, 0x0b, 0xa6, 0x3e, 0x26, 0x77, 0x0a, 0xfe, 0x63,
	0x45, 0x70, 0x7c, 0x0d, 0x0b, 0xf2, 0xd5, 0x13, 0xd3, 0x73, 0x14, 0xef, 0x14, 0x0f, 0xd3, 0x67,
	0xa8, 0xfe, 0x5b, 0x58, 0xe4, 0x6d, 0xd0, 0x73, 0x12, 0x86, 0x62, 0x9e, 0xbb, 0x5e, 0xdc, 0xd6,
	0x4c, 0x97, 0xb0, 0x03, 0x3f, 0x34, 0xc4, 0xc8, 0xd8, 0xc3, 0xee, 0x69, 0x4d, 0xdc, 0xff, 0xf6,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x06, 0x58, 0xc1, 0xd2, 0x86, 0x2d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JasperProcessManagerClient is the client API for JasperProcessManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JasperProcessManagerClient interface {
	// Manager functions
	ID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IDResponse, error)
	Create(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*ProcessInfo, error)
	List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (JasperProcessManager_ListClient, error)
	Group(ctx context.Context, in *TagName, opts ...grpc.CallOption) (JasperProcessManager_GroupClient, error)
	Get(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error)
	Signal(ctx context.Context, in *SignalProcess, opts ...grpc.CallOption) (*OperationOutcome, error)
	Clear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error)
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error)
	WriteFile(ctx context.Context, opts ...grpc.CallOption) (JasperProcessManager_WriteFileClient, error)
	// Process functions
	TagProcess(ctx context.Context, in *ProcessTags, opts ...grpc.CallOption) (*OperationOutcome, error)
	ResetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	GetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessTags, error)
	RegisterSignalTriggerID(ctx context.Context, in *SignalTriggerParams, opts ...grpc.CallOption) (*OperationOutcome, error)
	Wait(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	Respawn(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error)
	// scripting.Harness functions
	ScriptingHarnessSetup(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	ScriptingHarnessCleanup(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	ScriptingHarnessRun(ctx context.Context, in *ScriptingHarnessRunArgs, opts ...grpc.CallOption) (*OperationOutcome, error)
	ScriptingHarnessBuild(ctx context.Context, in *ScriptingHarnessBuildArgs, opts ...grpc.CallOption) (*ScriptingHarnessBuildResponse, error)
	ScriptingHarnessRunScript(ctx context.Context, in *ScriptingHarnessRunScriptArgs, opts ...grpc.CallOption) (*OperationOutcome, error)
	ScriptingHarnessTest(ctx context.Context, in *ScriptingHarnessTestArgs, opts ...grpc.CallOption) (*ScriptingHarnessTestResponse, error)
	// LoggingCache functions
	LoggingCacheCreate(ctx context.Context, in *LoggingCacheCreateArgs, opts ...grpc.CallOption) (*LoggingCacheInstance, error)
	LoggingCacheGet(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*LoggingCacheInstance, error)
	LoggingCacheRemove(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*OperationOutcome, error)
	LoggingCacheCloseAndRemove(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*OperationOutcome, error)
	LoggingCacheClear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error)
	LoggingCacheLen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LoggingCacheLenResponse, error)
	LoggingCachePrune(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*OperationOutcome, error)
	// Remote specific functions
	ScriptingHarnessCreate(ctx context.Context, in *ScriptingOptions, opts ...grpc.CallOption) (*ScriptingHarnessID, error)
	ScriptingHarnessGet(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	ConfigureCache(ctx context.Context, in *CacheOptions, opts ...grpc.CallOption) (*OperationOutcome, error)
	DownloadFile(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error)
	DownloadMongoDB(ctx context.Context, in *MongoDBDownloadOptions, opts ...grpc.CallOption) (*OperationOutcome, error)
	GetLogStream(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogStream, error)
	GetBuildloggerURLs(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*BuildloggerURLs, error)
	SignalEvent(ctx context.Context, in *EventName, opts ...grpc.CallOption) (*OperationOutcome, error)
	SendMessages(ctx context.Context, in *LoggingPayload, opts ...grpc.CallOption) (*OperationOutcome, error)
}

type jasperProcessManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJasperProcessManagerClient(cc grpc.ClientConnInterface) JasperProcessManagerClient {
	return &jasperProcessManagerClient{cc}
}

func (c *jasperProcessManagerClient) ID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Create(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (JasperProcessManager_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[0], "/jasper.JasperProcessManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JasperProcessManager_ListClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type jasperProcessManagerListClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerListClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) Group(ctx context.Context, in *TagName, opts ...grpc.CallOption) (JasperProcessManager_GroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[1], "/jasper.JasperProcessManager/Group", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JasperProcessManager_GroupClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type jasperProcessManagerGroupClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerGroupClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) Get(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Signal(ctx context.Context, in *SignalProcess, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Signal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Clear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) WriteFile(ctx context.Context, opts ...grpc.CallOption) (JasperProcessManager_WriteFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[2], "/jasper.JasperProcessManager/WriteFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerWriteFileClient{stream}
	return x, nil
}

type JasperProcessManager_WriteFileClient interface {
	Send(*WriteFileInfo) error
	CloseAndRecv() (*OperationOutcome, error)
	grpc.ClientStream
}

type jasperProcessManagerWriteFileClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerWriteFileClient) Send(m *WriteFileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jasperProcessManagerWriteFileClient) CloseAndRecv() (*OperationOutcome, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OperationOutcome)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) TagProcess(ctx context.Context, in *ProcessTags, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/TagProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ResetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ResetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessTags, error) {
	out := new(ProcessTags)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) RegisterSignalTriggerID(ctx context.Context, in *SignalTriggerParams, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/RegisterSignalTriggerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Wait(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Respawn(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Respawn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessSetup(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessCleanup(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessCleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessRun(ctx context.Context, in *ScriptingHarnessRunArgs, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessBuild(ctx context.Context, in *ScriptingHarnessBuildArgs, opts ...grpc.CallOption) (*ScriptingHarnessBuildResponse, error) {
	out := new(ScriptingHarnessBuildResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessRunScript(ctx context.Context, in *ScriptingHarnessRunScriptArgs, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessRunScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessTest(ctx context.Context, in *ScriptingHarnessTestArgs, opts ...grpc.CallOption) (*ScriptingHarnessTestResponse, error) {
	out := new(ScriptingHarnessTestResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheCreate(ctx context.Context, in *LoggingCacheCreateArgs, opts ...grpc.CallOption) (*LoggingCacheInstance, error) {
	out := new(LoggingCacheInstance)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheGet(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*LoggingCacheInstance, error) {
	out := new(LoggingCacheInstance)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheRemove(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheCloseAndRemove(ctx context.Context, in *LoggingCacheArgs, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheCloseAndRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheClear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCacheLen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LoggingCacheLenResponse, error) {
	out := new(LoggingCacheLenResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCacheLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) LoggingCachePrune(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/LoggingCachePrune", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessCreate(ctx context.Context, in *ScriptingOptions, opts ...grpc.CallOption) (*ScriptingHarnessID, error) {
	out := new(ScriptingHarnessID)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ScriptingHarnessGet(ctx context.Context, in *ScriptingHarnessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ScriptingHarnessGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ConfigureCache(ctx context.Context, in *CacheOptions, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ConfigureCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadFile(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadMongoDB(ctx context.Context, in *MongoDBDownloadOptions, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadMongoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetLogStream(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogStream, error) {
	out := new(LogStream)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetLogStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetBuildloggerURLs(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*BuildloggerURLs, error) {
	out := new(BuildloggerURLs)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetBuildloggerURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) SignalEvent(ctx context.Context, in *EventName, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/SignalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) SendMessages(ctx context.Context, in *LoggingPayload, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/SendMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JasperProcessManagerServer is the server API for JasperProcessManager service.
type JasperProcessManagerServer interface {
	// Manager functions
	ID(context.Context, *empty.Empty) (*IDResponse, error)
	Create(context.Context, *CreateOptions) (*ProcessInfo, error)
	List(*Filter, JasperProcessManager_ListServer) error
	Group(*TagName, JasperProcessManager_GroupServer) error
	Get(context.Context, *JasperProcessID) (*ProcessInfo, error)
	Signal(context.Context, *SignalProcess) (*OperationOutcome, error)
	Clear(context.Context, *empty.Empty) (*OperationOutcome, error)
	Close(context.Context, *empty.Empty) (*OperationOutcome, error)
	WriteFile(JasperProcessManager_WriteFileServer) error
	// Process functions
	TagProcess(context.Context, *ProcessTags) (*OperationOutcome, error)
	ResetTags(context.Context, *JasperProcessID) (*OperationOutcome, error)
	GetTags(context.Context, *JasperProcessID) (*ProcessTags, error)
	RegisterSignalTriggerID(context.Context, *SignalTriggerParams) (*OperationOutcome, error)
	Wait(context.Context, *JasperProcessID) (*OperationOutcome, error)
	Respawn(context.Context, *JasperProcessID) (*ProcessInfo, error)
	// scripting.Harness functions
	ScriptingHarnessSetup(context.Context, *ScriptingHarnessID) (*OperationOutcome, error)
	ScriptingHarnessCleanup(context.Context, *ScriptingHarnessID) (*OperationOutcome, error)
	ScriptingHarnessRun(context.Context, *ScriptingHarnessRunArgs) (*OperationOutcome, error)
	ScriptingHarnessBuild(context.Context, *ScriptingHarnessBuildArgs) (*ScriptingHarnessBuildResponse, error)
	ScriptingHarnessRunScript(context.Context, *ScriptingHarnessRunScriptArgs) (*OperationOutcome, error)
	ScriptingHarnessTest(context.Context, *ScriptingHarnessTestArgs) (*ScriptingHarnessTestResponse, error)
	// LoggingCache functions
	LoggingCacheCreate(context.Context, *LoggingCacheCreateArgs) (*LoggingCacheInstance, error)
	LoggingCacheGet(context.Context, *LoggingCacheArgs) (*LoggingCacheInstance, error)
	LoggingCacheRemove(context.Context, *LoggingCacheArgs) (*OperationOutcome, error)
	LoggingCacheCloseAndRemove(context.Context, *LoggingCacheArgs) (*OperationOutcome, error)
	LoggingCacheClear(context.Context, *empty.Empty) (*OperationOutcome, error)
	LoggingCacheLen(context.Context, *empty.Empty) (*LoggingCacheLenResponse, error)
	LoggingCachePrune(context.Context, *timestamp.Timestamp) (*OperationOutcome, error)
	// Remote specific functions
	ScriptingHarnessCreate(context.Context, *ScriptingOptions) (*ScriptingHarnessID, error)
	ScriptingHarnessGet(context.Context, *ScriptingHarnessID) (*OperationOutcome, error)
	Status(context.Context, *empty.Empty) (*StatusResponse, error)
	ConfigureCache(context.Context, *CacheOptions) (*OperationOutcome, error)
	DownloadFile(context.Context, *DownloadInfo) (*OperationOutcome, error)
	DownloadMongoDB(context.Context, *MongoDBDownloadOptions) (*OperationOutcome, error)
	GetLogStream(context.Context, *LogRequest) (*LogStream, error)
	GetBuildloggerURLs(context.Context, *JasperProcessID) (*BuildloggerURLs, error)
	SignalEvent(context.Context, *EventName) (*OperationOutcome, error)
	SendMessages(context.Context, *LoggingPayload) (*OperationOutcome, error)
}

// UnimplementedJasperProcessManagerServer can be embedded to have forward compatible implementations.
type UnimplementedJasperProcessManagerServer struct {
}

func (*UnimplementedJasperProcessManagerServer) ID(ctx context.Context, req *empty.Empty) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ID not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Create(ctx context.Context, req *CreateOptions) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedJasperProcessManagerServer) List(req *Filter, srv JasperProcessManager_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Group(req *TagName, srv JasperProcessManager_GroupServer) error {
	return status.Errorf(codes.Unimplemented, "method Group not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Get(ctx context.Context, req *JasperProcessID) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Signal(ctx context.Context, req *SignalProcess) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Clear(ctx context.Context, req *empty.Empty) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Close(ctx context.Context, req *empty.Empty) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedJasperProcessManagerServer) WriteFile(srv JasperProcessManager_WriteFileServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (*UnimplementedJasperProcessManagerServer) TagProcess(ctx context.Context, req *ProcessTags) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagProcess not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ResetTags(ctx context.Context, req *JasperProcessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetTags not implemented")
}
func (*UnimplementedJasperProcessManagerServer) GetTags(ctx context.Context, req *JasperProcessID) (*ProcessTags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (*UnimplementedJasperProcessManagerServer) RegisterSignalTriggerID(ctx context.Context, req *SignalTriggerParams) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSignalTriggerID not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Wait(ctx context.Context, req *JasperProcessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Respawn(ctx context.Context, req *JasperProcessID) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respawn not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessSetup(ctx context.Context, req *ScriptingHarnessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessSetup not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessCleanup(ctx context.Context, req *ScriptingHarnessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessCleanup not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessRun(ctx context.Context, req *ScriptingHarnessRunArgs) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessRun not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessBuild(ctx context.Context, req *ScriptingHarnessBuildArgs) (*ScriptingHarnessBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessBuild not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessRunScript(ctx context.Context, req *ScriptingHarnessRunScriptArgs) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessRunScript not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessTest(ctx context.Context, req *ScriptingHarnessTestArgs) (*ScriptingHarnessTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessTest not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheCreate(ctx context.Context, req *LoggingCacheCreateArgs) (*LoggingCacheInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheCreate not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheGet(ctx context.Context, req *LoggingCacheArgs) (*LoggingCacheInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheGet not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheRemove(ctx context.Context, req *LoggingCacheArgs) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheRemove not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheCloseAndRemove(ctx context.Context, req *LoggingCacheArgs) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheCloseAndRemove not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheClear(ctx context.Context, req *empty.Empty) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheClear not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCacheLen(ctx context.Context, req *empty.Empty) (*LoggingCacheLenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCacheLen not implemented")
}
func (*UnimplementedJasperProcessManagerServer) LoggingCachePrune(ctx context.Context, req *timestamp.Timestamp) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggingCachePrune not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessCreate(ctx context.Context, req *ScriptingOptions) (*ScriptingHarnessID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessCreate not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ScriptingHarnessGet(ctx context.Context, req *ScriptingHarnessID) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptingHarnessGet not implemented")
}
func (*UnimplementedJasperProcessManagerServer) Status(ctx context.Context, req *empty.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedJasperProcessManagerServer) ConfigureCache(ctx context.Context, req *CacheOptions) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCache not implemented")
}
func (*UnimplementedJasperProcessManagerServer) DownloadFile(ctx context.Context, req *DownloadInfo) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (*UnimplementedJasperProcessManagerServer) DownloadMongoDB(ctx context.Context, req *MongoDBDownloadOptions) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMongoDB not implemented")
}
func (*UnimplementedJasperProcessManagerServer) GetLogStream(ctx context.Context, req *LogRequest) (*LogStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogStream not implemented")
}
func (*UnimplementedJasperProcessManagerServer) GetBuildloggerURLs(ctx context.Context, req *JasperProcessID) (*BuildloggerURLs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildloggerURLs not implemented")
}
func (*UnimplementedJasperProcessManagerServer) SignalEvent(ctx context.Context, req *EventName) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalEvent not implemented")
}
func (*UnimplementedJasperProcessManagerServer) SendMessages(ctx context.Context, req *LoggingPayload) (*OperationOutcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}

func RegisterJasperProcessManagerServer(s *grpc.Server, srv JasperProcessManagerServer) {
	s.RegisterService(&_JasperProcessManager_serviceDesc, srv)
}

func _JasperProcessManager_ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Create(ctx, req.(*CreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JasperProcessManagerServer).List(m, &jasperProcessManagerListServer{stream})
}

type JasperProcessManager_ListServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type jasperProcessManagerListServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerListServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _JasperProcessManager_Group_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JasperProcessManagerServer).Group(m, &jasperProcessManagerGroupServer{stream})
}

type JasperProcessManager_GroupServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type jasperProcessManagerGroupServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerGroupServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _JasperProcessManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Get(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Signal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Signal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Signal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Signal(ctx, req.(*SignalProcess))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Clear(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_WriteFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JasperProcessManagerServer).WriteFile(&jasperProcessManagerWriteFileServer{stream})
}

type JasperProcessManager_WriteFileServer interface {
	SendAndClose(*OperationOutcome) error
	Recv() (*WriteFileInfo, error)
	grpc.ServerStream
}

type jasperProcessManagerWriteFileServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerWriteFileServer) SendAndClose(m *OperationOutcome) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jasperProcessManagerWriteFileServer) Recv() (*WriteFileInfo, error) {
	m := new(WriteFileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JasperProcessManager_TagProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).TagProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/TagProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).TagProcess(ctx, req.(*ProcessTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ResetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ResetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ResetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ResetTags(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetTags(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_RegisterSignalTriggerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalTriggerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).RegisterSignalTriggerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/RegisterSignalTriggerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).RegisterSignalTriggerID(ctx, req.(*SignalTriggerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Wait(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Respawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Respawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Respawn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Respawn(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessSetup(ctx, req.(*ScriptingHarnessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessCleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessCleanup(ctx, req.(*ScriptingHarnessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessRunArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessRun(ctx, req.(*ScriptingHarnessRunArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessBuildArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessBuild(ctx, req.(*ScriptingHarnessBuildArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessRunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessRunScriptArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessRunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessRunScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessRunScript(ctx, req.(*ScriptingHarnessRunScriptArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessTestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessTest(ctx, req.(*ScriptingHarnessTestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingCacheCreateArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheCreate(ctx, req.(*LoggingCacheCreateArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingCacheArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheGet(ctx, req.(*LoggingCacheArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingCacheArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheRemove(ctx, req.(*LoggingCacheArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheCloseAndRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingCacheArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheCloseAndRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheCloseAndRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheCloseAndRemove(ctx, req.(*LoggingCacheArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheClear(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCacheLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCacheLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCacheLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCacheLen(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_LoggingCachePrune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamp.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).LoggingCachePrune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/LoggingCachePrune",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).LoggingCachePrune(ctx, req.(*timestamp.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessCreate(ctx, req.(*ScriptingOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ScriptingHarnessGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptingHarnessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ScriptingHarnessGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ScriptingHarnessGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ScriptingHarnessGet(ctx, req.(*ScriptingHarnessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ConfigureCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ConfigureCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ConfigureCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ConfigureCache(ctx, req.(*CacheOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadFile(ctx, req.(*DownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadMongoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoDBDownloadOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadMongoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadMongoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadMongoDB(ctx, req.(*MongoDBDownloadOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetLogStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetLogStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetLogStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetLogStream(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetBuildloggerURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetBuildloggerURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetBuildloggerURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetBuildloggerURLs(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_SignalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).SignalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/SignalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).SignalEvent(ctx, req.(*EventName))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_SendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).SendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/SendMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).SendMessages(ctx, req.(*LoggingPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _JasperProcessManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jasper.JasperProcessManager",
	HandlerType: (*JasperProcessManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ID",
			Handler:    _JasperProcessManager_ID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _JasperProcessManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _JasperProcessManager_Get_Handler,
		},
		{
			MethodName: "Signal",
			Handler:    _JasperProcessManager_Signal_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _JasperProcessManager_Clear_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _JasperProcessManager_Close_Handler,
		},
		{
			MethodName: "TagProcess",
			Handler:    _JasperProcessManager_TagProcess_Handler,
		},
		{
			MethodName: "ResetTags",
			Handler:    _JasperProcessManager_ResetTags_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _JasperProcessManager_GetTags_Handler,
		},
		{
			MethodName: "RegisterSignalTriggerID",
			Handler:    _JasperProcessManager_RegisterSignalTriggerID_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _JasperProcessManager_Wait_Handler,
		},
		{
			MethodName: "Respawn",
			Handler:    _JasperProcessManager_Respawn_Handler,
		},
		{
			MethodName: "ScriptingHarnessSetup",
			Handler:    _JasperProcessManager_ScriptingHarnessSetup_Handler,
		},
		{
			MethodName: "ScriptingHarnessCleanup",
			Handler:    _JasperProcessManager_ScriptingHarnessCleanup_Handler,
		},
		{
			MethodName: "ScriptingHarnessRun",
			Handler:    _JasperProcessManager_ScriptingHarnessRun_Handler,
		},
		{
			MethodName: "ScriptingHarnessBuild",
			Handler:    _JasperProcessManager_ScriptingHarnessBuild_Handler,
		},
		{
			MethodName: "ScriptingHarnessRunScript",
			Handler:    _JasperProcessManager_ScriptingHarnessRunScript_Handler,
		},
		{
			MethodName: "ScriptingHarnessTest",
			Handler:    _JasperProcessManager_ScriptingHarnessTest_Handler,
		},
		{
			MethodName: "LoggingCacheCreate",
			Handler:    _JasperProcessManager_LoggingCacheCreate_Handler,
		},
		{
			MethodName: "LoggingCacheGet",
			Handler:    _JasperProcessManager_LoggingCacheGet_Handler,
		},
		{
			MethodName: "LoggingCacheRemove",
			Handler:    _JasperProcessManager_LoggingCacheRemove_Handler,
		},
		{
			MethodName: "LoggingCacheCloseAndRemove",
			Handler:    _JasperProcessManager_LoggingCacheCloseAndRemove_Handler,
		},
		{
			MethodName: "LoggingCacheClear",
			Handler:    _JasperProcessManager_LoggingCacheClear_Handler,
		},
		{
			MethodName: "LoggingCacheLen",
			Handler:    _JasperProcessManager_LoggingCacheLen_Handler,
		},
		{
			MethodName: "LoggingCachePrune",
			Handler:    _JasperProcessManager_LoggingCachePrune_Handler,
		},
		{
			MethodName: "ScriptingHarnessCreate",
			Handler:    _JasperProcessManager_ScriptingHarnessCreate_Handler,
		},
		{
			MethodName: "ScriptingHarnessGet",
			Handler:    _JasperProcessManager_ScriptingHarnessGet_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _JasperProcessManager_Status_Handler,
		},
		{
			MethodName: "ConfigureCache",
			Handler:    _JasperProcessManager_ConfigureCache_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _JasperProcessManager_DownloadFile_Handler,
		},
		{
			MethodName: "DownloadMongoDB",
			Handler:    _JasperProcessManager_DownloadMongoDB_Handler,
		},
		{
			MethodName: "GetLogStream",
			Handler:    _JasperProcessManager_GetLogStream_Handler,
		},
		{
			MethodName: "GetBuildloggerURLs",
			Handler:    _JasperProcessManager_GetBuildloggerURLs_Handler,
		},
		{
			MethodName: "SignalEvent",
			Handler:    _JasperProcessManager_SignalEvent_Handler,
		},
		{
			MethodName: "SendMessages",
			Handler:    _JasperProcessManager_SendMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _JasperProcessManager_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Group",
			Handler:       _JasperProcessManager_Group_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteFile",
			Handler:       _JasperProcessManager_WriteFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "jasper.proto",
}
