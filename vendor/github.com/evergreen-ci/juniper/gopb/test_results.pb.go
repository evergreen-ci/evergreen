// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_results.proto

package gopb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestResultsInfo struct {
	Project              string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Variant              string   `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	TaskName             string   `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	DisplayTaskName      string   `protobuf:"bytes,5,opt,name=display_task_name,json=displayTaskName,proto3" json:"display_task_name,omitempty"`
	TaskId               string   `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	DisplayTaskId        string   `protobuf:"bytes,7,opt,name=display_task_id,json=displayTaskId,proto3" json:"display_task_id,omitempty"`
	Execution            int32    `protobuf:"varint,8,opt,name=execution,proto3" json:"execution,omitempty"`
	RequestType          string   `protobuf:"bytes,9,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	Mainline             bool     `protobuf:"varint,10,opt,name=mainline,proto3" json:"mainline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResultsInfo) Reset()         { *m = TestResultsInfo{} }
func (m *TestResultsInfo) String() string { return proto.CompactTextString(m) }
func (*TestResultsInfo) ProtoMessage()    {}
func (*TestResultsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf98c574c2f8ed6, []int{0}
}

func (m *TestResultsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResultsInfo.Unmarshal(m, b)
}
func (m *TestResultsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResultsInfo.Marshal(b, m, deterministic)
}
func (m *TestResultsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResultsInfo.Merge(m, src)
}
func (m *TestResultsInfo) XXX_Size() int {
	return xxx_messageInfo_TestResultsInfo.Size(m)
}
func (m *TestResultsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResultsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TestResultsInfo proto.InternalMessageInfo

func (m *TestResultsInfo) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *TestResultsInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TestResultsInfo) GetVariant() string {
	if m != nil {
		return m.Variant
	}
	return ""
}

func (m *TestResultsInfo) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *TestResultsInfo) GetDisplayTaskName() string {
	if m != nil {
		return m.DisplayTaskName
	}
	return ""
}

func (m *TestResultsInfo) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TestResultsInfo) GetDisplayTaskId() string {
	if m != nil {
		return m.DisplayTaskId
	}
	return ""
}

func (m *TestResultsInfo) GetExecution() int32 {
	if m != nil {
		return m.Execution
	}
	return 0
}

func (m *TestResultsInfo) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *TestResultsInfo) GetMainline() bool {
	if m != nil {
		return m.Mainline
	}
	return false
}

type TestResults struct {
	TestResultsRecordId  string        `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
	Results              []*TestResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TestResults) Reset()         { *m = TestResults{} }
func (m *TestResults) String() string { return proto.CompactTextString(m) }
func (*TestResults) ProtoMessage()    {}
func (*TestResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf98c574c2f8ed6, []int{1}
}

func (m *TestResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResults.Unmarshal(m, b)
}
func (m *TestResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResults.Marshal(b, m, deterministic)
}
func (m *TestResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResults.Merge(m, src)
}
func (m *TestResults) XXX_Size() int {
	return xxx_messageInfo_TestResults.Size(m)
}
func (m *TestResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResults.DiscardUnknown(m)
}

var xxx_messageInfo_TestResults proto.InternalMessageInfo

func (m *TestResults) GetTestResultsRecordId() string {
	if m != nil {
		return m.TestResultsRecordId
	}
	return ""
}

func (m *TestResults) GetResults() []*TestResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type TestResult struct {
	TestName             string               `protobuf:"bytes,1,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Trial                int32                `protobuf:"varint,2,opt,name=trial,proto3" json:"trial,omitempty"`
	Status               string               `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	LogUrl               string               `protobuf:"bytes,4,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
	LineNum              int32                `protobuf:"varint,5,opt,name=line_num,json=lineNum,proto3" json:"line_num,omitempty"`
	TaskCreateTime       *timestamp.Timestamp `protobuf:"bytes,6,opt,name=task_create_time,json=taskCreateTime,proto3" json:"task_create_time,omitempty"`
	TestStartTime        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=test_start_time,json=testStartTime,proto3" json:"test_start_time,omitempty"`
	TestEndTime          *timestamp.Timestamp `protobuf:"bytes,8,opt,name=test_end_time,json=testEndTime,proto3" json:"test_end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TestResult) Reset()         { *m = TestResult{} }
func (m *TestResult) String() string { return proto.CompactTextString(m) }
func (*TestResult) ProtoMessage()    {}
func (*TestResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf98c574c2f8ed6, []int{2}
}

func (m *TestResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResult.Unmarshal(m, b)
}
func (m *TestResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResult.Marshal(b, m, deterministic)
}
func (m *TestResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResult.Merge(m, src)
}
func (m *TestResult) XXX_Size() int {
	return xxx_messageInfo_TestResult.Size(m)
}
func (m *TestResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestResult proto.InternalMessageInfo

func (m *TestResult) GetTestName() string {
	if m != nil {
		return m.TestName
	}
	return ""
}

func (m *TestResult) GetTrial() int32 {
	if m != nil {
		return m.Trial
	}
	return 0
}

func (m *TestResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TestResult) GetLogUrl() string {
	if m != nil {
		return m.LogUrl
	}
	return ""
}

func (m *TestResult) GetLineNum() int32 {
	if m != nil {
		return m.LineNum
	}
	return 0
}

func (m *TestResult) GetTaskCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.TaskCreateTime
	}
	return nil
}

func (m *TestResult) GetTestStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.TestStartTime
	}
	return nil
}

func (m *TestResult) GetTestEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.TestEndTime
	}
	return nil
}

type TestResultsEndInfo struct {
	TestResultsRecordId  string   `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResultsEndInfo) Reset()         { *m = TestResultsEndInfo{} }
func (m *TestResultsEndInfo) String() string { return proto.CompactTextString(m) }
func (*TestResultsEndInfo) ProtoMessage()    {}
func (*TestResultsEndInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf98c574c2f8ed6, []int{3}
}

func (m *TestResultsEndInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResultsEndInfo.Unmarshal(m, b)
}
func (m *TestResultsEndInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResultsEndInfo.Marshal(b, m, deterministic)
}
func (m *TestResultsEndInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResultsEndInfo.Merge(m, src)
}
func (m *TestResultsEndInfo) XXX_Size() int {
	return xxx_messageInfo_TestResultsEndInfo.Size(m)
}
func (m *TestResultsEndInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResultsEndInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TestResultsEndInfo proto.InternalMessageInfo

func (m *TestResultsEndInfo) GetTestResultsRecordId() string {
	if m != nil {
		return m.TestResultsRecordId
	}
	return ""
}

type TestResultsResponse struct {
	TestResultsRecordId  string   `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResultsResponse) Reset()         { *m = TestResultsResponse{} }
func (m *TestResultsResponse) String() string { return proto.CompactTextString(m) }
func (*TestResultsResponse) ProtoMessage()    {}
func (*TestResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf98c574c2f8ed6, []int{4}
}

func (m *TestResultsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResultsResponse.Unmarshal(m, b)
}
func (m *TestResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResultsResponse.Marshal(b, m, deterministic)
}
func (m *TestResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResultsResponse.Merge(m, src)
}
func (m *TestResultsResponse) XXX_Size() int {
	return xxx_messageInfo_TestResultsResponse.Size(m)
}
func (m *TestResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResultsResponse proto.InternalMessageInfo

func (m *TestResultsResponse) GetTestResultsRecordId() string {
	if m != nil {
		return m.TestResultsRecordId
	}
	return ""
}

func init() {
	proto.RegisterType((*TestResultsInfo)(nil), "cedar.TestResultsInfo")
	proto.RegisterType((*TestResults)(nil), "cedar.TestResults")
	proto.RegisterType((*TestResult)(nil), "cedar.TestResult")
	proto.RegisterType((*TestResultsEndInfo)(nil), "cedar.TestResultsEndInfo")
	proto.RegisterType((*TestResultsResponse)(nil), "cedar.TestResultsResponse")
}

func init() { proto.RegisterFile("test_results.proto", fileDescriptor_cdf98c574c2f8ed6) }

var fileDescriptor_cdf98c574c2f8ed6 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x95, 0xd3, 0xfa, 0x4f, 0x26, 0xbf, 0x36, 0xed, 0xf6, 0xa7, 0xd4, 0x0d, 0x48, 0x84, 0x1c,
	0x50, 0x04, 0x92, 0x2b, 0xb5, 0x77, 0x04, 0x2d, 0x3d, 0x04, 0x89, 0x22, 0xb9, 0xe1, 0xc2, 0xc5,
	0xda, 0x66, 0xa7, 0x91, 0xc1, 0xf6, 0x9a, 0xdd, 0x35, 0x22, 0x9f, 0x8d, 0x3b, 0xdf, 0x80, 0xef,
	0x83, 0x76, 0xec, 0x34, 0x86, 0xa0, 0x56, 0x2a, 0xc7, 0x79, 0xf3, 0xe6, 0xed, 0xee, 0x7b, 0xb3,
	0xc0, 0x0c, 0x6a, 0x93, 0x28, 0xd4, 0x55, 0x66, 0x74, 0x54, 0x2a, 0x69, 0x24, 0x73, 0xe7, 0x28,
	0xb8, 0x1a, 0x3e, 0x59, 0x48, 0xb9, 0xc8, 0xf0, 0x98, 0xc0, 0xeb, 0xea, 0xe6, 0xd8, 0xa4, 0x39,
	0x6a, 0xc3, 0xf3, 0xb2, 0xe6, 0x8d, 0x7f, 0x74, 0xa0, 0x3f, 0x43, 0x6d, 0xe2, 0x7a, 0x7a, 0x5a,
	0xdc, 0x48, 0x16, 0x82, 0x5f, 0x2a, 0xf9, 0x09, 0xe7, 0x26, 0x74, 0x46, 0xce, 0xa4, 0x1b, 0xaf,
	0x4a, 0xdb, 0xf9, 0x8a, 0x4a, 0xa7, 0xb2, 0x08, 0x3b, 0x75, 0xa7, 0x29, 0xa9, 0xc3, 0x55, 0xca,
	0x0b, 0x13, 0x6e, 0x35, 0x9d, 0xba, 0x64, 0x8f, 0xa0, 0x6b, 0xb8, 0xfe, 0x9c, 0x14, 0x3c, 0xc7,
	0x70, 0x9b, 0x7a, 0x81, 0x05, 0x2e, 0x79, 0x8e, 0xec, 0x39, 0xec, 0x8b, 0x54, 0x97, 0x19, 0x5f,
	0x26, 0x6b, 0x92, 0x4b, 0xa4, 0x7e, 0xd3, 0x98, 0xad, 0xb8, 0x87, 0xe0, 0x13, 0x27, 0x15, 0xa1,
	0x47, 0x0c, 0xcf, 0x96, 0x53, 0xc1, 0x9e, 0x41, 0xff, 0x37, 0x91, 0x54, 0x84, 0x3e, 0x11, 0x76,
	0x5a, 0x12, 0x53, 0xc1, 0x1e, 0x43, 0x17, 0xbf, 0xe1, 0xbc, 0x32, 0xf6, 0xfe, 0xc1, 0xc8, 0x99,
	0xb8, 0xf1, 0x1a, 0x60, 0x4f, 0xe1, 0x3f, 0x85, 0x5f, 0x2a, 0x6b, 0xa5, 0x59, 0x96, 0x18, 0x76,
	0x49, 0xa2, 0xd7, 0x60, 0xb3, 0x65, 0x89, 0x6c, 0x08, 0x41, 0xce, 0xd3, 0x22, 0x4b, 0x0b, 0x0c,
	0x61, 0xe4, 0x4c, 0x82, 0xf8, 0xb6, 0x1e, 0x4b, 0xe8, 0xb5, 0x7c, 0x64, 0xa7, 0x30, 0x68, 0xa7,
	0x92, 0x28, 0x9c, 0x4b, 0x25, 0xec, 0xd5, 0x6a, 0x4b, 0x0f, 0xcc, 0x9a, 0x1c, 0x53, 0x6f, 0x2a,
	0xd8, 0x0b, 0xf0, 0x1b, 0x7e, 0xd8, 0x19, 0x6d, 0x4d, 0x7a, 0x27, 0xfb, 0x11, 0xc5, 0x18, 0xad,
	0x95, 0xe3, 0x15, 0x63, 0xfc, 0xb3, 0x03, 0xb0, 0xc6, 0xc9, 0x66, 0x7b, 0x20, 0x39, 0xe8, 0x34,
	0x36, 0xa3, 0x36, 0x64, 0xdd, 0xff, 0xe0, 0x1a, 0x95, 0xf2, 0x8c, 0x52, 0x73, 0xe3, 0xba, 0x60,
	0x03, 0xf0, 0xb4, 0xe1, 0xa6, 0xd2, 0x4d, 0x64, 0x4d, 0x65, 0x8d, 0xce, 0xe4, 0x22, 0xa9, 0x54,
	0xd6, 0xe4, 0xe5, 0x65, 0x72, 0xf1, 0x41, 0x65, 0xec, 0x08, 0x02, 0xfb, 0xd6, 0xa4, 0xa8, 0x72,
	0x0a, 0xc9, 0x8d, 0x7d, 0x5b, 0x5f, 0x56, 0x39, 0x7b, 0x03, 0x7b, 0xe4, 0xfd, 0x5c, 0x21, 0x37,
	0x98, 0xd8, 0x35, 0xa3, 0x94, 0x7a, 0x27, 0xc3, 0xa8, 0xde, 0xc1, 0x68, 0xb5, 0x83, 0xd1, 0x6c,
	0xb5, 0x83, 0xf1, 0xae, 0x9d, 0x39, 0xa7, 0x11, 0x0b, 0xb2, 0x33, 0xe8, 0xd3, 0x23, 0xb4, 0xe1,
	0xca, 0xd4, 0x22, 0xfe, 0xbd, 0x22, 0x3b, 0x76, 0xe4, 0xca, 0x4e, 0x90, 0xc6, 0x4b, 0x20, 0x20,
	0xc1, 0x42, 0xd4, 0x0a, 0xc1, 0xbd, 0x0a, 0x3d, 0x3b, 0x70, 0x51, 0x08, 0x8b, 0x8c, 0xa7, 0xc0,
	0x5a, 0x41, 0x5e, 0x14, 0x82, 0xfe, 0xc4, 0x43, 0xf2, 0x1c, 0xbf, 0x85, 0x83, 0x59, 0x1b, 0xd6,
	0xa5, 0x2c, 0x34, 0x3e, 0x48, 0xeb, 0xe4, 0x7b, 0x07, 0xf6, 0xce, 0xed, 0x32, 0xb4, 0xb7, 0xec,
	0x1d, 0x1c, 0x36, 0xee, 0xfd, 0x39, 0xc1, 0x06, 0x1b, 0xab, 0x43, 0x9f, 0x7b, 0x38, 0xdc, 0xc4,
	0x6f, 0x2f, 0xf6, 0x0a, 0x76, 0x5f, 0x0b, 0xd1, 0x3e, 0x80, 0x6d, 0xb2, 0xef, 0x54, 0xb8, 0x80,
	0xfd, 0x2b, 0xa3, 0x90, 0xe7, 0xff, 0x20, 0x32, 0x71, 0xd8, 0x7b, 0x18, 0x9c, 0x67, 0x52, 0xff,
	0xe5, 0x59, 0x47, 0x9b, 0x73, 0x4d, 0x44, 0x77, 0x49, 0x9e, 0x79, 0x1f, 0xb7, 0x17, 0xb2, 0xbc,
	0xbe, 0xf6, 0x28, 0xfd, 0xd3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x8f, 0xc5, 0x8c, 0x33,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CedarTestResultsClient is the client API for CedarTestResults service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CedarTestResultsClient interface {
	CreateTestResultsRecord(ctx context.Context, in *TestResultsInfo, opts ...grpc.CallOption) (*TestResultsResponse, error)
	AddTestResults(ctx context.Context, in *TestResults, opts ...grpc.CallOption) (*TestResultsResponse, error)
	StreamTestResults(ctx context.Context, opts ...grpc.CallOption) (CedarTestResults_StreamTestResultsClient, error)
	CloseTestResultsRecord(ctx context.Context, in *TestResultsEndInfo, opts ...grpc.CallOption) (*TestResultsResponse, error)
}

type cedarTestResultsClient struct {
	cc *grpc.ClientConn
}

func NewCedarTestResultsClient(cc *grpc.ClientConn) CedarTestResultsClient {
	return &cedarTestResultsClient{cc}
}

func (c *cedarTestResultsClient) CreateTestResultsRecord(ctx context.Context, in *TestResultsInfo, opts ...grpc.CallOption) (*TestResultsResponse, error) {
	out := new(TestResultsResponse)
	err := c.cc.Invoke(ctx, "/cedar.CedarTestResults/CreateTestResultsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cedarTestResultsClient) AddTestResults(ctx context.Context, in *TestResults, opts ...grpc.CallOption) (*TestResultsResponse, error) {
	out := new(TestResultsResponse)
	err := c.cc.Invoke(ctx, "/cedar.CedarTestResults/AddTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cedarTestResultsClient) StreamTestResults(ctx context.Context, opts ...grpc.CallOption) (CedarTestResults_StreamTestResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CedarTestResults_serviceDesc.Streams[0], "/cedar.CedarTestResults/StreamTestResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &cedarTestResultsStreamTestResultsClient{stream}
	return x, nil
}

type CedarTestResults_StreamTestResultsClient interface {
	Send(*TestResults) error
	CloseAndRecv() (*TestResultsResponse, error)
	grpc.ClientStream
}

type cedarTestResultsStreamTestResultsClient struct {
	grpc.ClientStream
}

func (x *cedarTestResultsStreamTestResultsClient) Send(m *TestResults) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cedarTestResultsStreamTestResultsClient) CloseAndRecv() (*TestResultsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cedarTestResultsClient) CloseTestResultsRecord(ctx context.Context, in *TestResultsEndInfo, opts ...grpc.CallOption) (*TestResultsResponse, error) {
	out := new(TestResultsResponse)
	err := c.cc.Invoke(ctx, "/cedar.CedarTestResults/CloseTestResultsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CedarTestResultsServer is the server API for CedarTestResults service.
type CedarTestResultsServer interface {
	CreateTestResultsRecord(context.Context, *TestResultsInfo) (*TestResultsResponse, error)
	AddTestResults(context.Context, *TestResults) (*TestResultsResponse, error)
	StreamTestResults(CedarTestResults_StreamTestResultsServer) error
	CloseTestResultsRecord(context.Context, *TestResultsEndInfo) (*TestResultsResponse, error)
}

// UnimplementedCedarTestResultsServer can be embedded to have forward compatible implementations.
type UnimplementedCedarTestResultsServer struct {
}

func (*UnimplementedCedarTestResultsServer) CreateTestResultsRecord(ctx context.Context, req *TestResultsInfo) (*TestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestResultsRecord not implemented")
}
func (*UnimplementedCedarTestResultsServer) AddTestResults(ctx context.Context, req *TestResults) (*TestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTestResults not implemented")
}
func (*UnimplementedCedarTestResultsServer) StreamTestResults(srv CedarTestResults_StreamTestResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTestResults not implemented")
}
func (*UnimplementedCedarTestResultsServer) CloseTestResultsRecord(ctx context.Context, req *TestResultsEndInfo) (*TestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTestResultsRecord not implemented")
}

func RegisterCedarTestResultsServer(s *grpc.Server, srv CedarTestResultsServer) {
	s.RegisterService(&_CedarTestResults_serviceDesc, srv)
}

func _CedarTestResults_CreateTestResultsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestResultsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CedarTestResultsServer).CreateTestResultsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.CedarTestResults/CreateTestResultsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CedarTestResultsServer).CreateTestResultsRecord(ctx, req.(*TestResultsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CedarTestResults_AddTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CedarTestResultsServer).AddTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.CedarTestResults/AddTestResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CedarTestResultsServer).AddTestResults(ctx, req.(*TestResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _CedarTestResults_StreamTestResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CedarTestResultsServer).StreamTestResults(&cedarTestResultsStreamTestResultsServer{stream})
}

type CedarTestResults_StreamTestResultsServer interface {
	SendAndClose(*TestResultsResponse) error
	Recv() (*TestResults, error)
	grpc.ServerStream
}

type cedarTestResultsStreamTestResultsServer struct {
	grpc.ServerStream
}

func (x *cedarTestResultsStreamTestResultsServer) SendAndClose(m *TestResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cedarTestResultsStreamTestResultsServer) Recv() (*TestResults, error) {
	m := new(TestResults)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CedarTestResults_CloseTestResultsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestResultsEndInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CedarTestResultsServer).CloseTestResultsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.CedarTestResults/CloseTestResultsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CedarTestResultsServer).CloseTestResultsRecord(ctx, req.(*TestResultsEndInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _CedarTestResults_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cedar.CedarTestResults",
	HandlerType: (*CedarTestResultsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestResultsRecord",
			Handler:    _CedarTestResults_CreateTestResultsRecord_Handler,
		},
		{
			MethodName: "AddTestResults",
			Handler:    _CedarTestResults_AddTestResults_Handler,
		},
		{
			MethodName: "CloseTestResultsRecord",
			Handler:    _CedarTestResults_CloseTestResultsRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTestResults",
			Handler:       _CedarTestResults_StreamTestResults_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "test_results.proto",
}
