// Code generated by protoc-gen-go. DO NOT EDIT.
// source: formats.proto

package gopb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataFormat int32

const (
	DataFormat_TEXT DataFormat = 0
	DataFormat_FTDC DataFormat = 1
	DataFormat_BSON DataFormat = 2
	DataFormat_JSON DataFormat = 3
	DataFormat_CSV  DataFormat = 4
)

var DataFormat_name = map[int32]string{
	0: "TEXT",
	1: "FTDC",
	2: "BSON",
	3: "JSON",
	4: "CSV",
}

var DataFormat_value = map[string]int32{
	"TEXT": 0,
	"FTDC": 1,
	"BSON": 2,
	"JSON": 3,
	"CSV":  4,
}

func (x DataFormat) String() string {
	return proto.EnumName(DataFormat_name, int32(x))
}

func (DataFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f5550ea8caa7b55, []int{0}
}

type CompressionType int32

const (
	CompressionType_NONE  CompressionType = 0
	CompressionType_TARGZ CompressionType = 1
	CompressionType_ZIP   CompressionType = 2
	CompressionType_GZ    CompressionType = 3
	CompressionType_XZ    CompressionType = 4
)

var CompressionType_name = map[int32]string{
	0: "NONE",
	1: "TARGZ",
	2: "ZIP",
	3: "GZ",
	4: "XZ",
}

var CompressionType_value = map[string]int32{
	"NONE":  0,
	"TARGZ": 1,
	"ZIP":   2,
	"GZ":    3,
	"XZ":    4,
}

func (x CompressionType) String() string {
	return proto.EnumName(CompressionType_name, int32(x))
}

func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f5550ea8caa7b55, []int{1}
}

type SchemaType int32

const (
	SchemaType_RAW_EVENTS             SchemaType = 0
	SchemaType_COLLAPSED_EVENTS       SchemaType = 1
	SchemaType_INTERVAL_SUMMARIZATION SchemaType = 2
	SchemaType_HISTOGRAM              SchemaType = 3
)

var SchemaType_name = map[int32]string{
	0: "RAW_EVENTS",
	1: "COLLAPSED_EVENTS",
	2: "INTERVAL_SUMMARIZATION",
	3: "HISTOGRAM",
}

var SchemaType_value = map[string]int32{
	"RAW_EVENTS":             0,
	"COLLAPSED_EVENTS":       1,
	"INTERVAL_SUMMARIZATION": 2,
	"HISTOGRAM":              3,
}

func (x SchemaType) String() string {
	return proto.EnumName(SchemaType_name, int32(x))
}

func (SchemaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f5550ea8caa7b55, []int{2}
}

func init() {
	proto.RegisterEnum("cedar.DataFormat", DataFormat_name, DataFormat_value)
	proto.RegisterEnum("cedar.CompressionType", CompressionType_name, CompressionType_value)
	proto.RegisterEnum("cedar.SchemaType", SchemaType_name, SchemaType_value)
}

func init() { proto.RegisterFile("formats.proto", fileDescriptor_0f5550ea8caa7b55) }

var fileDescriptor_0f5550ea8caa7b55 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0xcf, 0x4d, 0x4b, 0xf4, 0x30,
	0x10, 0x07, 0xf0, 0xbe, 0x6d, 0x9f, 0x67, 0x07, 0x56, 0x87, 0x20, 0x1e, 0xfc, 0x08, 0x3d, 0x78,
	0xf1, 0x2c, 0x92, 0x6d, 0xb3, 0x35, 0xd2, 0xa6, 0x4b, 0x12, 0xeb, 0x12, 0x90, 0x25, 0xbb, 0xd6,
	0x97, 0x43, 0x4d, 0x69, 0x7b, 0xf1, 0xdb, 0x4b, 0x0a, 0x9e, 0xe6, 0xc7, 0xcc, 0xfc, 0x61, 0x06,
	0x36, 0xef, 0x6e, 0xec, 0xed, 0x3c, 0xdd, 0x0e, 0xa3, 0x9b, 0x1d, 0x59, 0x9d, 0xbb, 0x37, 0x3b,
	0x66, 0xf7, 0x00, 0x85, 0x9d, 0xed, 0x6e, 0x99, 0x91, 0xff, 0x90, 0x68, 0x76, 0xd0, 0x18, 0x78,
	0xed, 0x74, 0x91, 0x63, 0xe8, 0xb5, 0x55, 0x8d, 0xc0, 0xc8, 0xeb, 0xc9, 0x2b, 0x26, 0xff, 0x20,
	0xce, 0x55, 0x8b, 0x49, 0xf6, 0x00, 0x97, 0xb9, 0xeb, 0x87, 0xb1, 0x9b, 0xa6, 0x2f, 0xf7, 0xad,
	0x7f, 0x86, 0xce, 0x6f, 0x89, 0x46, 0x30, 0x0c, 0xc8, 0x1a, 0x56, 0x9a, 0xca, 0xd2, 0x60, 0xe8,
	0x03, 0x86, 0xef, 0x31, 0x22, 0x29, 0x44, 0xa5, 0xc1, 0xd8, 0xd7, 0x83, 0xc1, 0x24, 0x7b, 0x05,
	0x50, 0xe7, 0xcf, 0xae, 0xb7, 0x4b, 0xf6, 0x02, 0x40, 0xd2, 0x97, 0x23, 0x6b, 0x99, 0xd0, 0x0a,
	0x03, 0x72, 0x05, 0x98, 0x37, 0x55, 0x45, 0xf7, 0x8a, 0x15, 0x7f, 0xdd, 0x90, 0xdc, 0xc0, 0x35,
	0x17, 0x9a, 0xc9, 0x96, 0x56, 0x47, 0xf5, 0x5c, 0xd7, 0x54, 0x72, 0x43, 0x35, 0x5f, 0x6e, 0xdc,
	0xc0, 0xfa, 0x91, 0x2b, 0xdd, 0x94, 0x92, 0xd6, 0x18, 0x6f, 0x53, 0x93, 0x7c, 0xb8, 0xe1, 0x74,
	0x4a, 0x97, 0xa7, 0xef, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x22, 0xf5, 0xca, 0x56, 0x05, 0x01,
	0x00, 0x00,
}
