// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vendor/cedar.proto

package internal

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogStorage int32

const (
	LogStorage_LOG_STORAGE_S3     LogStorage = 0
	LogStorage_LOG_STORAGE_GRIDFS LogStorage = 1
	LogStorage_LOG_STORAGE_LOCAL  LogStorage = 2
)

var LogStorage_name = map[int32]string{
	0: "LOG_STORAGE_S3",
	1: "LOG_STORAGE_GRIDFS",
	2: "LOG_STORAGE_LOCAL",
}

var LogStorage_value = map[string]int32{
	"LOG_STORAGE_S3":     0,
	"LOG_STORAGE_GRIDFS": 1,
	"LOG_STORAGE_LOCAL":  2,
}

func (x LogStorage) String() string {
	return proto.EnumName(LogStorage_name, int32(x))
}

func (LogStorage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2f43d153eecc12f, []int{0}
}

type LogFormat int32

const (
	LogFormat_LOG_FORMAT_UNKNOWN LogFormat = 0
	LogFormat_LOG_FORMAT_TEXT    LogFormat = 1
	LogFormat_LOG_FORMAT_JSON    LogFormat = 2
	LogFormat_LOG_FORMAT_BSON    LogFormat = 3
)

var LogFormat_name = map[int32]string{
	0: "LOG_FORMAT_UNKNOWN",
	1: "LOG_FORMAT_TEXT",
	2: "LOG_FORMAT_JSON",
	3: "LOG_FORMAT_BSON",
}

var LogFormat_value = map[string]int32{
	"LOG_FORMAT_UNKNOWN": 0,
	"LOG_FORMAT_TEXT":    1,
	"LOG_FORMAT_JSON":    2,
	"LOG_FORMAT_BSON":    3,
}

func (x LogFormat) String() string {
	return proto.EnumName(LogFormat_name, int32(x))
}

func (LogFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2f43d153eecc12f, []int{1}
}

type LogData struct {
	Info                 *LogInfo   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Storage              LogStorage `protobuf:"varint,2,opt,name=storage,proto3,enum=cedar.LogStorage" json:"storage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LogData) Reset()         { *m = LogData{} }
func (m *LogData) String() string { return proto.CompactTextString(m) }
func (*LogData) ProtoMessage()    {}
func (*LogData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f43d153eecc12f, []int{0}
}

func (m *LogData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogData.Unmarshal(m, b)
}
func (m *LogData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogData.Marshal(b, m, deterministic)
}
func (m *LogData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogData.Merge(m, src)
}
func (m *LogData) XXX_Size() int {
	return xxx_messageInfo_LogData.Size(m)
}
func (m *LogData) XXX_DiscardUnknown() {
	xxx_messageInfo_LogData.DiscardUnknown(m)
}

var xxx_messageInfo_LogData proto.InternalMessageInfo

func (m *LogData) GetInfo() *LogInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *LogData) GetStorage() LogStorage {
	if m != nil {
		return m.Storage
	}
	return LogStorage_LOG_STORAGE_S3
}

type LogInfo struct {
	Project              string            `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Version              string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Variant              string            `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	TaskName             string            `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskId               string            `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Execution            int32             `protobuf:"varint,6,opt,name=execution,proto3" json:"execution,omitempty"`
	TestName             string            `protobuf:"bytes,7,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Trial                int32             `protobuf:"varint,8,opt,name=trial,proto3" json:"trial,omitempty"`
	ProcName             string            `protobuf:"bytes,9,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`
	Format               LogFormat         `protobuf:"varint,10,opt,name=format,proto3,enum=cedar.LogFormat" json:"format,omitempty"`
	Tags                 []string          `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	Arguments            map[string]string `protobuf:"bytes,12,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mainline             bool              `protobuf:"varint,13,opt,name=mainline,proto3" json:"mainline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LogInfo) Reset()         { *m = LogInfo{} }
func (m *LogInfo) String() string { return proto.CompactTextString(m) }
func (*LogInfo) ProtoMessage()    {}
func (*LogInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f43d153eecc12f, []int{1}
}

func (m *LogInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogInfo.Unmarshal(m, b)
}
func (m *LogInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogInfo.Marshal(b, m, deterministic)
}
func (m *LogInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogInfo.Merge(m, src)
}
func (m *LogInfo) XXX_Size() int {
	return xxx_messageInfo_LogInfo.Size(m)
}
func (m *LogInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogInfo proto.InternalMessageInfo

func (m *LogInfo) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LogInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LogInfo) GetVariant() string {
	if m != nil {
		return m.Variant
	}
	return ""
}

func (m *LogInfo) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *LogInfo) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *LogInfo) GetExecution() int32 {
	if m != nil {
		return m.Execution
	}
	return 0
}

func (m *LogInfo) GetTestName() string {
	if m != nil {
		return m.TestName
	}
	return ""
}

func (m *LogInfo) GetTrial() int32 {
	if m != nil {
		return m.Trial
	}
	return 0
}

func (m *LogInfo) GetProcName() string {
	if m != nil {
		return m.ProcName
	}
	return ""
}

func (m *LogInfo) GetFormat() LogFormat {
	if m != nil {
		return m.Format
	}
	return LogFormat_LOG_FORMAT_UNKNOWN
}

func (m *LogInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *LogInfo) GetArguments() map[string]string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *LogInfo) GetMainline() bool {
	if m != nil {
		return m.Mainline
	}
	return false
}

type LogLines struct {
	LogId                string     `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Lines                []*LogLine `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LogLines) Reset()         { *m = LogLines{} }
func (m *LogLines) String() string { return proto.CompactTextString(m) }
func (*LogLines) ProtoMessage()    {}
func (*LogLines) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f43d153eecc12f, []int{2}
}

func (m *LogLines) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLines.Unmarshal(m, b)
}
func (m *LogLines) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLines.Marshal(b, m, deterministic)
}
func (m *LogLines) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLines.Merge(m, src)
}
func (m *LogLines) XXX_Size() int {
	return xxx_messageInfo_LogLines.Size(m)
}
func (m *LogLines) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLines.DiscardUnknown(m)
}

var xxx_messageInfo_LogLines proto.InternalMessageInfo

func (m *LogLines) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func (m *LogLines) GetLines() []*LogLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

type LogLine struct {
	Priority             int32                `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data                 string               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LogLine) Reset()         { *m = LogLine{} }
func (m *LogLine) String() string { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()    {}
func (*LogLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f43d153eecc12f, []int{3}
}

func (m *LogLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLine.Unmarshal(m, b)
}
func (m *LogLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLine.Marshal(b, m, deterministic)
}
func (m *LogLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLine.Merge(m, src)
}
func (m *LogLine) XXX_Size() int {
	return xxx_messageInfo_LogLine.Size(m)
}
func (m *LogLine) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLine.DiscardUnknown(m)
}

var xxx_messageInfo_LogLine proto.InternalMessageInfo

func (m *LogLine) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *LogLine) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LogLine) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type LogEndInfo struct {
	LogId                string   `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	ExitCode             int32    `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEndInfo) Reset()         { *m = LogEndInfo{} }
func (m *LogEndInfo) String() string { return proto.CompactTextString(m) }
func (*LogEndInfo) ProtoMessage()    {}
func (*LogEndInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f43d153eecc12f, []int{4}
}

func (m *LogEndInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEndInfo.Unmarshal(m, b)
}
func (m *LogEndInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEndInfo.Marshal(b, m, deterministic)
}
func (m *LogEndInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEndInfo.Merge(m, src)
}
func (m *LogEndInfo) XXX_Size() int {
	return xxx_messageInfo_LogEndInfo.Size(m)
}
func (m *LogEndInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEndInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogEndInfo proto.InternalMessageInfo

func (m *LogEndInfo) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func (m *LogEndInfo) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type BuildloggerResponse struct {
	LogId                string   `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildloggerResponse) Reset()         { *m = BuildloggerResponse{} }
func (m *BuildloggerResponse) String() string { return proto.CompactTextString(m) }
func (*BuildloggerResponse) ProtoMessage()    {}
func (*BuildloggerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f43d153eecc12f, []int{5}
}

func (m *BuildloggerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildloggerResponse.Unmarshal(m, b)
}
func (m *BuildloggerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildloggerResponse.Marshal(b, m, deterministic)
}
func (m *BuildloggerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildloggerResponse.Merge(m, src)
}
func (m *BuildloggerResponse) XXX_Size() int {
	return xxx_messageInfo_BuildloggerResponse.Size(m)
}
func (m *BuildloggerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildloggerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildloggerResponse proto.InternalMessageInfo

func (m *BuildloggerResponse) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func init() {
	proto.RegisterEnum("cedar.LogStorage", LogStorage_name, LogStorage_value)
	proto.RegisterEnum("cedar.LogFormat", LogFormat_name, LogFormat_value)
	proto.RegisterType((*LogData)(nil), "cedar.LogData")
	proto.RegisterType((*LogInfo)(nil), "cedar.LogInfo")
	proto.RegisterMapType((map[string]string)(nil), "cedar.LogInfo.ArgumentsEntry")
	proto.RegisterType((*LogLines)(nil), "cedar.LogLines")
	proto.RegisterType((*LogLine)(nil), "cedar.LogLine")
	proto.RegisterType((*LogEndInfo)(nil), "cedar.LogEndInfo")
	proto.RegisterType((*BuildloggerResponse)(nil), "cedar.BuildloggerResponse")
}

func init() { proto.RegisterFile("vendor/cedar.proto", fileDescriptor_f2f43d153eecc12f) }

var fileDescriptor_f2f43d153eecc12f = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5d, 0x6f, 0xda, 0x48,
	0x14, 0x8d, 0x21, 0x06, 0xfb, 0xb2, 0x4b, 0x9c, 0xc9, 0x66, 0xd7, 0x22, 0xbb, 0x5a, 0x84, 0xf6,
	0xc1, 0xca, 0xae, 0x88, 0x44, 0x1e, 0x36, 0xfd, 0x52, 0x4b, 0x08, 0x41, 0xb4, 0x2e, 0x48, 0x03,
	0x55, 0xab, 0xbc, 0xa0, 0x09, 0x1e, 0x2c, 0x37, 0xf6, 0x8c, 0x35, 0x1e, 0xa2, 0xe6, 0xb1, 0xff,
	0xb0, 0x3f, 0xa9, 0x9a, 0xb1, 0xf9, 0x48, 0xd4, 0xe4, 0xa1, 0x6f, 0x73, 0xce, 0xb9, 0xe7, 0xce,
	0xe5, 0xce, 0xc1, 0x80, 0x6e, 0x29, 0x0b, 0xb8, 0x38, 0x99, 0xd3, 0x80, 0x88, 0x76, 0x2a, 0xb8,
	0xe4, 0xc8, 0xd4, 0xa0, 0xf1, 0x77, 0xc8, 0x79, 0x18, 0xd3, 0x13, 0x4d, 0x5e, 0x2f, 0x17, 0x27,
	0x32, 0x4a, 0x68, 0x26, 0x49, 0x92, 0xe6, 0x75, 0xad, 0x2b, 0xa8, 0xfa, 0x3c, 0xbc, 0x20, 0x92,
	0xa0, 0x16, 0xec, 0x46, 0x6c, 0xc1, 0x5d, 0xa3, 0x69, 0x78, 0xb5, 0x4e, 0xbd, 0x9d, 0xb7, 0xf3,
	0x79, 0x38, 0x64, 0x0b, 0x8e, 0xb5, 0x86, 0xfe, 0x85, 0x6a, 0x26, 0xb9, 0x20, 0x21, 0x75, 0x4b,
	0x4d, 0xc3, 0xab, 0x77, 0xf6, 0x37, 0x65, 0x93, 0x5c, 0xc0, 0xab, 0x8a, 0xd6, 0xb7, 0xb2, 0x6e,
	0xae, 0xec, 0xc8, 0x85, 0x6a, 0x2a, 0xf8, 0x67, 0x3a, 0x97, 0xba, 0xbf, 0x8d, 0x57, 0x50, 0x29,
	0xb7, 0x54, 0x64, 0x11, 0x67, 0xba, 0xa5, 0x8d, 0x57, 0x50, 0x2b, 0x44, 0x44, 0x84, 0x49, 0xb7,
	0x5c, 0x28, 0x39, 0x44, 0x47, 0x60, 0x4b, 0x92, 0xdd, 0xcc, 0x18, 0x49, 0xa8, 0xbb, 0xab, 0x35,
	0x4b, 0x11, 0x23, 0x92, 0x50, 0xf4, 0x07, 0x54, 0xb5, 0x18, 0x05, 0xae, 0xa9, 0xa5, 0x8a, 0x82,
	0xc3, 0x00, 0xfd, 0x09, 0x36, 0xfd, 0x42, 0xe7, 0x4b, 0xa9, 0xee, 0xaa, 0x34, 0x0d, 0xcf, 0xc4,
	0x1b, 0x42, 0xf7, 0xa4, 0x99, 0xcc, 0x7b, 0x56, 0x8b, 0x9e, 0x34, 0x93, 0xba, 0xe7, 0x6f, 0x60,
	0x4a, 0x11, 0x91, 0xd8, 0xb5, 0xb4, 0x2d, 0x07, 0xca, 0x92, 0x0a, 0x3e, 0xcf, 0x2d, 0x76, 0x6e,
	0x51, 0x84, 0xb6, 0x78, 0x50, 0x59, 0x70, 0x91, 0x10, 0xe9, 0x82, 0xde, 0x94, 0xb3, 0xd9, 0xd4,
	0xa5, 0xe6, 0x71, 0xa1, 0x23, 0x04, 0xbb, 0x92, 0x84, 0x99, 0x5b, 0x6b, 0x96, 0x3d, 0x1b, 0xeb,
	0x33, 0x7a, 0x01, 0x36, 0x11, 0xe1, 0x32, 0xa1, 0x4c, 0x66, 0xee, 0x2f, 0xcd, 0xb2, 0x57, 0xeb,
	0xfc, 0x75, 0xff, 0x45, 0xda, 0xdd, 0x95, 0xde, 0x67, 0x52, 0xdc, 0xe1, 0x4d, 0x3d, 0x6a, 0x80,
	0x95, 0x90, 0x88, 0xc5, 0x11, 0xa3, 0xee, 0xaf, 0x4d, 0xc3, 0xb3, 0xf0, 0x1a, 0x37, 0x5e, 0x42,
	0xfd, 0xbe, 0x11, 0x39, 0x50, 0xbe, 0xa1, 0x77, 0xc5, 0xb3, 0xa8, 0xa3, 0xfa, 0xb5, 0xb7, 0x24,
	0x5e, 0xd2, 0xe2, 0x41, 0x72, 0xf0, 0xbc, 0x74, 0x66, 0xb4, 0x06, 0x60, 0xf9, 0x3c, 0xf4, 0x23,
	0x46, 0x33, 0x74, 0x08, 0x95, 0x98, 0x87, 0x6a, 0xcd, 0xb9, 0xd5, 0x8c, 0x79, 0x38, 0x0c, 0xd0,
	0x3f, 0x60, 0xaa, 0x8b, 0x32, 0xb7, 0xa4, 0xa7, 0xde, 0xca, 0x91, 0xb2, 0xe1, 0x5c, 0x6c, 0x65,
	0x3a, 0x1a, 0x8a, 0x51, 0xd3, 0xa6, 0x22, 0xe2, 0x22, 0x92, 0xf9, 0x10, 0x26, 0x5e, 0x63, 0x74,
	0x06, 0xf6, 0x3a, 0xb1, 0x7a, 0x9a, 0x5a, 0xa7, 0xd1, 0xce, 0x33, 0xdd, 0x5e, 0x65, 0xba, 0x3d,
	0x5d, 0x55, 0xe0, 0x4d, 0xb1, 0x5a, 0x6a, 0x40, 0x24, 0x29, 0x92, 0xa3, 0xcf, 0xad, 0x37, 0x00,
	0x3e, 0x0f, 0xfb, 0x2c, 0xd0, 0x91, 0x7c, 0x64, 0xfe, 0x23, 0x95, 0x92, 0x48, 0xce, 0xe6, 0x3c,
	0xc8, 0x17, 0x60, 0x62, 0x4b, 0x11, 0x3d, 0x1e, 0xd0, 0xd6, 0x7f, 0x70, 0x70, 0xbe, 0x8c, 0xe2,
	0x20, 0xe6, 0x61, 0x48, 0x05, 0xa6, 0x59, 0xca, 0x59, 0x46, 0x1f, 0x69, 0x75, 0x3c, 0xd6, 0xf7,
	0x15, 0xff, 0x0b, 0x84, 0xa0, 0xee, 0x8f, 0x07, 0xb3, 0xc9, 0x74, 0x8c, 0xbb, 0x83, 0xfe, 0x6c,
	0x72, 0xea, 0xec, 0xa0, 0xdf, 0x01, 0x6d, 0x73, 0x03, 0x3c, 0xbc, 0xb8, 0x9c, 0x38, 0x06, 0x3a,
	0x84, 0xfd, 0x6d, 0xde, 0x1f, 0xf7, 0xba, 0xbe, 0x53, 0x3a, 0xbe, 0x06, 0x7b, 0x1d, 0x9f, 0x95,
	0xf7, 0x72, 0x8c, 0xdf, 0x77, 0xa7, 0xb3, 0x0f, 0xa3, 0x77, 0xa3, 0xf1, 0xc7, 0x91, 0xb3, 0x83,
	0x0e, 0x60, 0x6f, 0x8b, 0x9f, 0xf6, 0x3f, 0x4d, 0x1d, 0xe3, 0x01, 0xf9, 0x76, 0x32, 0x1e, 0x39,
	0xa5, 0x07, 0xe4, 0xb9, 0x22, 0xcb, 0x9d, 0xaf, 0x25, 0xa8, 0x6d, 0xfd, 0x46, 0xf4, 0x3f, 0xd8,
	0x3d, 0x41, 0x89, 0xa4, 0x3e, 0x0f, 0xd1, 0xd6, 0x6b, 0xaa, 0x6f, 0x46, 0xa3, 0x51, 0xe0, 0x1f,
	0x2d, 0xe5, 0x15, 0xd4, 0xbb, 0x69, 0x4a, 0x59, 0xb0, 0x4e, 0xcc, 0xde, 0xfd, 0x2c, 0x64, 0x4f,
	0xda, 0x5f, 0x43, 0x7d, 0x22, 0x05, 0x25, 0xc9, 0x4f, 0xd9, 0x3d, 0x03, 0x3d, 0x03, 0xab, 0x17,
	0xf3, 0x4c, 0xcf, 0xbd, 0xf5, 0x99, 0x2a, 0x9e, 0xff, 0x29, 0xf3, 0x39, 0x5c, 0x59, 0x11, 0x93,
	0x54, 0x30, 0x12, 0x5f, 0x57, 0x74, 0xce, 0x4e, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x97, 0x4a,
	0x1f, 0xe9, 0x66, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BuildloggerClient is the client API for Buildlogger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuildloggerClient interface {
	CreateLog(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*BuildloggerResponse, error)
	AppendLogLines(ctx context.Context, in *LogLines, opts ...grpc.CallOption) (*BuildloggerResponse, error)
	StreamLogLines(ctx context.Context, opts ...grpc.CallOption) (Buildlogger_StreamLogLinesClient, error)
	CloseLog(ctx context.Context, in *LogEndInfo, opts ...grpc.CallOption) (*BuildloggerResponse, error)
}

type buildloggerClient struct {
	cc *grpc.ClientConn
}

func NewBuildloggerClient(cc *grpc.ClientConn) BuildloggerClient {
	return &buildloggerClient{cc}
}

func (c *buildloggerClient) CreateLog(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*BuildloggerResponse, error) {
	out := new(BuildloggerResponse)
	err := c.cc.Invoke(ctx, "/cedar.Buildlogger/CreateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildloggerClient) AppendLogLines(ctx context.Context, in *LogLines, opts ...grpc.CallOption) (*BuildloggerResponse, error) {
	out := new(BuildloggerResponse)
	err := c.cc.Invoke(ctx, "/cedar.Buildlogger/AppendLogLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildloggerClient) StreamLogLines(ctx context.Context, opts ...grpc.CallOption) (Buildlogger_StreamLogLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Buildlogger_serviceDesc.Streams[0], "/cedar.Buildlogger/StreamLogLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildloggerStreamLogLinesClient{stream}
	return x, nil
}

type Buildlogger_StreamLogLinesClient interface {
	Send(*LogLines) error
	CloseAndRecv() (*BuildloggerResponse, error)
	grpc.ClientStream
}

type buildloggerStreamLogLinesClient struct {
	grpc.ClientStream
}

func (x *buildloggerStreamLogLinesClient) Send(m *LogLines) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildloggerStreamLogLinesClient) CloseAndRecv() (*BuildloggerResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildloggerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildloggerClient) CloseLog(ctx context.Context, in *LogEndInfo, opts ...grpc.CallOption) (*BuildloggerResponse, error) {
	out := new(BuildloggerResponse)
	err := c.cc.Invoke(ctx, "/cedar.Buildlogger/CloseLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildloggerServer is the server API for Buildlogger service.
type BuildloggerServer interface {
	CreateLog(context.Context, *LogData) (*BuildloggerResponse, error)
	AppendLogLines(context.Context, *LogLines) (*BuildloggerResponse, error)
	StreamLogLines(Buildlogger_StreamLogLinesServer) error
	CloseLog(context.Context, *LogEndInfo) (*BuildloggerResponse, error)
}

// UnimplementedBuildloggerServer can be embedded to have forward compatible implementations.
type UnimplementedBuildloggerServer struct {
}

func (*UnimplementedBuildloggerServer) CreateLog(ctx context.Context, req *LogData) (*BuildloggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLog not implemented")
}
func (*UnimplementedBuildloggerServer) AppendLogLines(ctx context.Context, req *LogLines) (*BuildloggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendLogLines not implemented")
}
func (*UnimplementedBuildloggerServer) StreamLogLines(srv Buildlogger_StreamLogLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogLines not implemented")
}
func (*UnimplementedBuildloggerServer) CloseLog(ctx context.Context, req *LogEndInfo) (*BuildloggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseLog not implemented")
}

func RegisterBuildloggerServer(s *grpc.Server, srv BuildloggerServer) {
	s.RegisterService(&_Buildlogger_serviceDesc, srv)
}

func _Buildlogger_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildloggerServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.Buildlogger/CreateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildloggerServer).CreateLog(ctx, req.(*LogData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Buildlogger_AppendLogLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLines)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildloggerServer).AppendLogLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.Buildlogger/AppendLogLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildloggerServer).AppendLogLines(ctx, req.(*LogLines))
	}
	return interceptor(ctx, in, info, handler)
}

func _Buildlogger_StreamLogLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildloggerServer).StreamLogLines(&buildloggerStreamLogLinesServer{stream})
}

type Buildlogger_StreamLogLinesServer interface {
	SendAndClose(*BuildloggerResponse) error
	Recv() (*LogLines, error)
	grpc.ServerStream
}

type buildloggerStreamLogLinesServer struct {
	grpc.ServerStream
}

func (x *buildloggerStreamLogLinesServer) SendAndClose(m *BuildloggerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildloggerStreamLogLinesServer) Recv() (*LogLines, error) {
	m := new(LogLines)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Buildlogger_CloseLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEndInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildloggerServer).CloseLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cedar.Buildlogger/CloseLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildloggerServer).CloseLog(ctx, req.(*LogEndInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Buildlogger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cedar.Buildlogger",
	HandlerType: (*BuildloggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLog",
			Handler:    _Buildlogger_CreateLog_Handler,
		},
		{
			MethodName: "AppendLogLines",
			Handler:    _Buildlogger_AppendLogLines_Handler,
		},
		{
			MethodName: "CloseLog",
			Handler:    _Buildlogger_CloseLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogLines",
			Handler:       _Buildlogger_StreamLogLines_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vendor/cedar.proto",
}
