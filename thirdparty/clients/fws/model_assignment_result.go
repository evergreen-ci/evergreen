/*
Foliage Web Services

Foliage web services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssignmentResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignmentResult{}

// AssignmentResult Result for assignment.
type AssignmentResult struct {
	AssignmentType AssignmentTypeEnum `json:"assignment_type"`
	Messages string `json:"messages"`
	TeamDataWithOwner NullableTeamDataWithOwner `json:"team_data_with_owner,omitempty"`
}

type _AssignmentResult AssignmentResult

// NewAssignmentResult instantiates a new AssignmentResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignmentResult(assignmentType AssignmentTypeEnum, messages string) *AssignmentResult {
	this := AssignmentResult{}
	this.AssignmentType = assignmentType
	this.Messages = messages
	return &this
}

// NewAssignmentResultWithDefaults instantiates a new AssignmentResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignmentResultWithDefaults() *AssignmentResult {
	this := AssignmentResult{}
	return &this
}

// GetAssignmentType returns the AssignmentType field value
func (o *AssignmentResult) GetAssignmentType() AssignmentTypeEnum {
	if o == nil {
		var ret AssignmentTypeEnum
		return ret
	}

	return o.AssignmentType
}

// GetAssignmentTypeOk returns a tuple with the AssignmentType field value
// and a boolean to check if the value has been set.
func (o *AssignmentResult) GetAssignmentTypeOk() (*AssignmentTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignmentType, true
}

// SetAssignmentType sets field value
func (o *AssignmentResult) SetAssignmentType(v AssignmentTypeEnum) {
	o.AssignmentType = v
}

// GetMessages returns the Messages field value
func (o *AssignmentResult) GetMessages() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *AssignmentResult) GetMessagesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Messages, true
}

// SetMessages sets field value
func (o *AssignmentResult) SetMessages(v string) {
	o.Messages = v
}

// GetTeamDataWithOwner returns the TeamDataWithOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssignmentResult) GetTeamDataWithOwner() TeamDataWithOwner {
	if o == nil || IsNil(o.TeamDataWithOwner.Get()) {
		var ret TeamDataWithOwner
		return ret
	}
	return *o.TeamDataWithOwner.Get()
}

// GetTeamDataWithOwnerOk returns a tuple with the TeamDataWithOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssignmentResult) GetTeamDataWithOwnerOk() (*TeamDataWithOwner, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamDataWithOwner.Get(), o.TeamDataWithOwner.IsSet()
}

// HasTeamDataWithOwner returns a boolean if a field has been set.
func (o *AssignmentResult) HasTeamDataWithOwner() bool {
	if o != nil && o.TeamDataWithOwner.IsSet() {
		return true
	}

	return false
}

// SetTeamDataWithOwner gets a reference to the given NullableTeamDataWithOwner and assigns it to the TeamDataWithOwner field.
func (o *AssignmentResult) SetTeamDataWithOwner(v TeamDataWithOwner) {
	o.TeamDataWithOwner.Set(&v)
}
// SetTeamDataWithOwnerNil sets the value for TeamDataWithOwner to be an explicit nil
func (o *AssignmentResult) SetTeamDataWithOwnerNil() {
	o.TeamDataWithOwner.Set(nil)
}

// UnsetTeamDataWithOwner ensures that no value is present for TeamDataWithOwner, not even an explicit nil
func (o *AssignmentResult) UnsetTeamDataWithOwner() {
	o.TeamDataWithOwner.Unset()
}

func (o AssignmentResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignmentResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignment_type"] = o.AssignmentType
	toSerialize["messages"] = o.Messages
	if o.TeamDataWithOwner.IsSet() {
		toSerialize["team_data_with_owner"] = o.TeamDataWithOwner.Get()
	}
	return toSerialize, nil
}

func (o *AssignmentResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assignment_type",
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssignmentResult := _AssignmentResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssignmentResult)

	if err != nil {
		return err
	}

	*o = AssignmentResult(varAssignmentResult)

	return err
}

type NullableAssignmentResult struct {
	value *AssignmentResult
	isSet bool
}

func (v NullableAssignmentResult) Get() *AssignmentResult {
	return v.value
}

func (v *NullableAssignmentResult) Set(val *AssignmentResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignmentResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignmentResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignmentResult(val *AssignmentResult) *NullableAssignmentResult {
	return &NullableAssignmentResult{value: val, isSet: true}
}

func (v NullableAssignmentResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignmentResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


