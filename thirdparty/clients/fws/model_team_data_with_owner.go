/*
Foliage Web Services

Foliage web services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fws

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TeamDataWithOwner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamDataWithOwner{}

// TeamDataWithOwner Team data with owner information.
type TeamDataWithOwner struct {
	TeamData TeamData `json:"team_data"`
	OwningUser NullableString `json:"owning_user,omitempty"`
}

type _TeamDataWithOwner TeamDataWithOwner

// NewTeamDataWithOwner instantiates a new TeamDataWithOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamDataWithOwner(teamData TeamData) *TeamDataWithOwner {
	this := TeamDataWithOwner{}
	this.TeamData = teamData
	return &this
}

// NewTeamDataWithOwnerWithDefaults instantiates a new TeamDataWithOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamDataWithOwnerWithDefaults() *TeamDataWithOwner {
	this := TeamDataWithOwner{}
	return &this
}

// GetTeamData returns the TeamData field value
func (o *TeamDataWithOwner) GetTeamData() TeamData {
	if o == nil {
		var ret TeamData
		return ret
	}

	return o.TeamData
}

// GetTeamDataOk returns a tuple with the TeamData field value
// and a boolean to check if the value has been set.
func (o *TeamDataWithOwner) GetTeamDataOk() (*TeamData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamData, true
}

// SetTeamData sets field value
func (o *TeamDataWithOwner) SetTeamData(v TeamData) {
	o.TeamData = v
}

// GetOwningUser returns the OwningUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamDataWithOwner) GetOwningUser() string {
	if o == nil || IsNil(o.OwningUser.Get()) {
		var ret string
		return ret
	}
	return *o.OwningUser.Get()
}

// GetOwningUserOk returns a tuple with the OwningUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamDataWithOwner) GetOwningUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwningUser.Get(), o.OwningUser.IsSet()
}

// HasOwningUser returns a boolean if a field has been set.
func (o *TeamDataWithOwner) HasOwningUser() bool {
	if o != nil && o.OwningUser.IsSet() {
		return true
	}

	return false
}

// SetOwningUser gets a reference to the given NullableString and assigns it to the OwningUser field.
func (o *TeamDataWithOwner) SetOwningUser(v string) {
	o.OwningUser.Set(&v)
}
// SetOwningUserNil sets the value for OwningUser to be an explicit nil
func (o *TeamDataWithOwner) SetOwningUserNil() {
	o.OwningUser.Set(nil)
}

// UnsetOwningUser ensures that no value is present for OwningUser, not even an explicit nil
func (o *TeamDataWithOwner) UnsetOwningUser() {
	o.OwningUser.Unset()
}

func (o TeamDataWithOwner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamDataWithOwner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["team_data"] = o.TeamData
	if o.OwningUser.IsSet() {
		toSerialize["owning_user"] = o.OwningUser.Get()
	}
	return toSerialize, nil
}

func (o *TeamDataWithOwner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"team_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamDataWithOwner := _TeamDataWithOwner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeamDataWithOwner)

	if err != nil {
		return err
	}

	*o = TeamDataWithOwner(varTeamDataWithOwner)

	return err
}

type NullableTeamDataWithOwner struct {
	value *TeamDataWithOwner
	isSet bool
}

func (v NullableTeamDataWithOwner) Get() *TeamDataWithOwner {
	return v.value
}

func (v *NullableTeamDataWithOwner) Set(val *TeamDataWithOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamDataWithOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamDataWithOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamDataWithOwner(val *TeamDataWithOwner) *NullableTeamDataWithOwner {
	return &NullableTeamDataWithOwner{value: val, isSet: true}
}

func (v NullableTeamDataWithOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamDataWithOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


