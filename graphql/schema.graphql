type Query {
  userPatches(userId: String!): [Patch!]!
  task(taskId: String!): Task
  projects: Projects!
  taskTests(
    taskId: String!
    sortCategory: TaskSortCategory = TEST_NAME
    sortDirection: SortDirection = ASC
    page: Int = 0
    limit: Int = 0
    testName: String = ""
    status: String = ""
  ): [TestResult!]
}

type Mutation {
  addFavoriteProject(identifier: String!): Project!
  removeFavoriteProject(identifier: String!): Project!
}

enum TaskSortCategory {
  STATUS
  DURATION
  TEST_NAME
}

enum SortDirection {
  ASC
  DESC
}

type Patch {
  id: ID!
  description: String!
  projectID: String!
  githash: String!
  patchNumber: Int!
  author: String!
  version: String!
  status: String!
  createTime: Time!
  startTime: Time
  finishTime: Time
  variants: [String!]!
  tasks: [String!]!
  variantsTasks: [VariantTask]!
  activated: Boolean!
  alias: String!
}

type VariantTask {
  name: String!
  tasks: [String!]!
}

type TaskLogs {
  allLogLink: String
  agentLogLink: String
  systemLogLink: String
  taskLogLink: String
}

type TaskEndDetail {
  status: String!
  type: String!
  description: String
  timedOut: Boolean
}

type TestResult {
  id: String!
  status: String!
  testFile: String!
  logs: TestLog!
  exitCode: Int
  startTime: Time
  duration: Float
  endTime: Time
}

type TestLog {
  url: String
  urlRaw: String
  lineNum: Int
  logId: String
}

type Task {
  id: String!
  createTime: Time
  ingestTime: Time
  dispatchTime: Time
  scheduledTime: Time
  startTime: Time
  finishTime: Time
  activatedTime: Time
  version: String!
  projectId: String!
  revision: String
  priority: Int
  taskGroup: String
  taskGroupMaxHosts: Int
  logs: TaskLogs!
  activated: Boolean!
  activatedBy: String
  buildId: String!
  distroId: String!
  buildVariant: String!
  dependsOn: [String!]
  displayName: String!
  hostId: String
  restarts: Int
  execution: Int
  order: Int
  requester: String!
  status: String!
  details: TaskEndDetail
  timeTaken: Duration
  expectedDuration: Duration
  displayOnly: Boolean
  executionTasks: [String!]
  generateTask: Boolean
  generatedBy: String
}

type Projects {
  favorites: [Project!]!
  otherProjects: [GroupedProjects!]!
}

type GroupedProjects {
  name: String!
  projects: [Project!]!
}

type Project {
  identifier: String!
  displayName: String!
  repo: String!
  owner: String!
}

scalar Time
scalar Duration
