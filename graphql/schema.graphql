type Query {
  userPatches(
    limit: Int = 0
    page: Int = 0
    patchName: String = ""
    statuses: [String!] = []
    userId: String
    includeCommitQueue: Boolean = false
  ): [Patch!]!
  patch(id: String!): Patch!
  task(taskId: String!): Task
  projects: Projects!
  patchTasks(
    patchId: String!
    sortBy: TaskSortCategory = STATUS
    sortDir: SortDirection = ASC
    page: Int = 0
    limit: Int = 0
    statuses: [String!] = []
    baseStatuses: [String!] = []
    variant: String
    taskName: String
  ): PatchTasks!
  taskTests(
    taskId: String!
    sortCategory: TestSortCategory = TEST_NAME
    sortDirection: SortDirection = ASC
    page: Int = 0
    limit: Int = 0
    testName: String = ""
    statuses: [String!]! = []
  ): TaskTestResult!
  taskFiles(taskId: String!): TaskFiles!
  user: User!
  taskLogs(taskId: String!): RecentTaskLogs!
  patchBuildVariants(patchId: String!): [PatchBuildVariant!]!
  commitQueue(id: String!): CommitQueue!
}

type Mutation {
  addFavoriteProject(identifier: String!): Project!
  removeFavoriteProject(identifier: String!): Project!
  schedulePatch(patchId: String!, reconfigure: PatchReconfigure!): Patch!
  scheduleTask(taskId: String!): Task!
  unscheduleTask(taskId: String!): Task!
  abortTask(taskId: String!): Task!
  setTaskPriority(taskId: String!, priority: Int!): Task!
  restartTask(taskId: String!): Task!
  saveSubscription(subscription: SubscriptionInput!): Boolean!
}

enum TaskSortCategory {
  NAME
  STATUS
  BASE_STATUS
  VARIANT
}

enum TestSortCategory {
  STATUS
  DURATION
  TEST_NAME
}

enum SortDirection {
  ASC
  DESC
}

enum MetStatus {
  UNMET
  MET
  PENDING
}

enum RequiredStatus {
  MUST_FAIL
  MUST_FINISH
  MUST_SUCCEED
}

input PatchReconfigure {
  description: String!
  variantsTasks: [VariantTasks!]!
}
input VariantTasks {
  variant: String!
  tasks: [String!]!
  displayTasks: [DisplayTask!]!
}
input DisplayTask {
  Name: String!
  ExecTasks: [String!]!
}

input SubscriptionInput {
  resource_type: String
  trigger: String
  selectors: [SelectorInput!]!
  regex_selectors: [SelectorInput!]!
  subscriber: SubscriberInput!
  owner_type: String
  owner: String
  trigger_data: StringMap!
}

input SelectorInput {
  type: String!
  data: String!
}

input SubscriberInput {
  type: String!
  target: String!
}

type PatchTasks {
  tasks: [TaskResult!]!
  count: Int!
}

type PatchBuildVariant {
  variant: String!
  tasks: [PatchBuildVariantTask]
}
type PatchBuildVariantTask {
  id: ID!
  name: String!
  status: String!
}

type TaskFiles {
  fileCount: Int!
  groupedFiles: [GroupedFiles!]!
}

type GroupedFiles {
  taskName: String
  files: [File!]
}

type ModuleCodeChange {
  branchName: String!
  htmlLink: String!
  rawLink: String!
  fileDiffs: [FileDiff!]!
}

type FileDiff {
  fileName: String!
  additions: Int!
  deletions: Int!
  diffLink: String!
}

type Patch {
  createTime: Time
  id: ID!
  description: String!
  projectID: String!
  githash: String!
  patchNumber: Int!
  author: String!
  version: String!
  status: String!
  variants: [String!]!
  tasks: [String!]!
  variantsTasks: [VariantTask]!
  activated: Boolean!
  alias: String!
  duration: PatchDuration
  time: PatchTime
  taskCount: Int
  baseVersionID: String
  moduleCodeChanges: [ModuleCodeChange!]!
  project: PatchProject
  builds: [Build!]!
}

type Build {
  id: String!
  buildVariant: String!
  status: String!
  predictedMakespan: Duration!
  actualMakespan: Duration!
}

type PatchProject {
  variants: [ProjectBuildVariant!]!
  tasks: [String!]!
}
type ProjectBuildVariant {
  name: String!
  displayName: String!
  tasks: [String!]!
}

type TaskResult {
  id: ID!
  displayName: String!
  version: String!
  status: String!
  baseStatus: String!
  buildVariant: String!
}

type PatchDuration {
  makespan: String
  timeTaken: String
  time: PatchTime
}

type PatchTime {
  started: String
  finished: String
  submittedAt: String!
}

type VariantTask {
  name: String!
  tasks: [String!]!
}

type TaskLogLinks {
  allLogLink: String
  agentLogLink: String
  systemLogLink: String
  taskLogLink: String
}

type TaskEndDetail {
  status: String!
  type: String!
  description: String
  timedOut: Boolean
}

type TaskTestResult {
  totalTestCount: Int!
  filteredTestCount: Int!
  testResults: [TestResult!]!
}

type TestResult {
  id: String!
  status: String!
  testFile: String!
  logs: TestLog!
  exitCode: Int
  startTime: Time
  duration: Float
  endTime: Time
}

type TestLog {
  htmlDisplayURL: String
  rawDisplayURL: String
}

type Dependency {
  name: String!
  metStatus: MetStatus!
  requiredStatus: RequiredStatus!
  buildVariant: String!
  uiLink: String!
}

type PatchMetadata {
  author: String!
}

type BaseTaskMetadata {
  baseTaskDuration: Duration
  baseTaskLink: String!
}

type Task {
  failedTestCount: Int!
  spawnHostLink: String
  patchMetadata: PatchMetadata!
  id: String!
  createTime: Time
  ingestTime: Time
  dispatchTime: Time
  scheduledTime: Time
  startTime: Time
  finishTime: Time
  activatedTime: Time
  version: String!
  projectId: String!
  revision: String
  priority: Int
  taskGroup: String
  taskGroupMaxHosts: Int
  logs: TaskLogLinks!
  activated: Boolean!
  activatedBy: String
  buildId: String!
  distroId: String!
  buildVariant: String!
  reliesOn: [Dependency!]!
  displayName: String!
  hostId: String
  hostLink: String
  restarts: Int
  execution: Int
  order: Int
  requester: String!
  status: String!
  details: TaskEndDetail
  timeTaken: Duration
  expectedDuration: Duration
  displayOnly: Boolean
  executionTasks: [String!]
  generateTask: Boolean
  generatedBy: String
  aborted: Boolean
  patchNumber: Int
  baseTaskMetadata: BaseTaskMetadata!
}

type Projects {
  favorites: [Project!]!
  otherProjects: [GroupedProjects!]!
}

type GroupedProjects {
  name: String!
  projects: [Project!]!
}

type Project {
  identifier: String!
  displayName: String!
  repo: String!
  owner: String!
}

type File {
  name: String!
  link: String!
  visibility: String!
}

type User {
  displayName: String!
}

type RecentTaskLogs {
  eventLogs: [TaskEventLogEntry!]!
  taskLogs: [LogMessage!]!
  systemLogs: [LogMessage!]!
  agentLogs: [LogMessage!]!
}

type TaskEventLogData {
  hostId: String
  jiraIssue: String
  jiraLink: String
  priority: Int
  status: String
  timestamp: Time
  userId: String
}

type TaskEventLogEntry {
  timestamp: Time
  eventType: String
  data: TaskEventLogData
}

type LogMessage {
  type: String
  severity: String
  message: String
  timestamp: Time
  version: Int
}

type CommitQueue {
  projectId: String
  queue: [CommitQueueItem!]
}

type CommitQueueItem {
  issue: String
  version: String
  enqueueTime: Time
  patch: Patch
  modules: [Module!]
}

type Module {
  module: String
  issue: String
}
scalar Time
scalar Duration
scalar StringMap
