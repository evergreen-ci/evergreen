type Query {
  userPatches(
    limit: Int = 0
    page: Int = 0
    patchName: String = ""
    statuses: [String!] = []
    userId: String
    includeCommitQueue: Boolean = false
  ): UserPatches!
  task(taskId: String!, execution: Int): Task
  taskAllExecutions(taskId: String!): [Task!]!
  patch(id: String!): Patch!
  projects: [GroupedProjects]!
  project(projectId: String!): Project!
  patchTasks(
    patchId: String!
    sorts: [SortOrder!]
    page: Int = 0
    limit: Int = 0
    statuses: [String!] = []
    baseStatuses: [String!] = []
    variant: String
    taskName: String
  ): PatchTasks!
  taskTests(
    taskId: String!
    execution: Int
    sortCategory: TestSortCategory = TEST_NAME
    sortDirection: SortDirection = ASC
    page: Int = 0
    limit: Int = 0
    testName: String = ""
    statuses: [String!]! = []
    groupId: String = ""
  ): TaskTestResult!
  taskFiles(taskId: String!, execution: Int): TaskFiles!
  user(userId: String): User!
  taskLogs(taskId: String!, execution: Int): RecentTaskLogs!
  patchBuildVariants(patchId: String!): [GroupedBuildVariant!]!
  commitQueue(id: String!): CommitQueue!
  userSettings: UserSettings
  spruceConfig: SpruceConfig
  awsRegions: [String!]
  subnetAvailabilityZones: [String!]!
  userConfig: UserConfig
  clientConfig: ClientConfig
  host(hostId: String!): Host
  hostEvents(
    hostId: String!
    hostTag: String = ""
    limit: Int = 0
    page: Int = 0
  ): HostEvents!
  hosts(
    hostId: String = ""
    distroId: String = ""
    currentTaskId: String = ""
    statuses: [String!] = []
    startedBy: String = ""
    sortBy: HostSortBy = STATUS
    sortDir: SortDirection = ASC
    page: Int = 0
    limit: Int = 10
  ): HostsResponse!
  myHosts: [Host!]!
  myVolumes: [Volume!]!
  myPublicKeys: [PublicKey!]!
  distros(onlySpawnable: Boolean!): [Distro]!
  instanceTypes: [String!]!
  distroTaskQueue(distroId: String!): [TaskQueueItem!]!
  taskQueueDistros: [TaskQueueDistro!]!
  buildBaron(taskId: String!, execution: Int!): BuildBaron!
  bbGetCreatedTickets(taskId: String!): [JiraTicket!]!
  mainlineCommits(options: MainlineCommitsOptions!): MainlineCommits
}
type Mutation {
  addFavoriteProject(identifier: String!): Project!
  removeFavoriteProject(identifier: String!): Project!
  schedulePatch(patchId: String!, configure: PatchConfigure!): Patch!
  schedulePatchTasks(patchId: String!): String
  unschedulePatchTasks(patchId: String!, abort: Boolean!): String
  restartPatch(patchId: String!, abort: Boolean!, taskIds: [String!]!): String
  enqueuePatch(patchId: String!, commitMessage: String): Patch!
  setPatchPriority(patchId: String!, priority: Int!): String
  scheduleTask(taskId: String!): Task!
  unscheduleTask(taskId: String!): Task!
  abortTask(taskId: String!): Task!
  setTaskPriority(taskId: String!, priority: Int!): Task!
  restartTask(taskId: String!): Task!
  saveSubscription(subscription: SubscriptionInput!): Boolean!
  editAnnotationNote(
    taskId: String!
    execution: Int!
    originalMessage: String!
    newMessage: String!
  ): Boolean!
  moveAnnotationIssue(
    taskId: String!
    execution: Int!
    apiIssue: IssueLinkInput!
    isIssue: Boolean!
  ): Boolean!
  addAnnotationIssue(
    taskId: String!
    execution: Int!
    apiIssue: IssueLinkInput!
    isIssue: Boolean!
  ): Boolean!
  removeAnnotationIssue(
    taskId: String!
    execution: Int!
    apiIssue: IssueLinkInput!
    isIssue: Boolean!
  ): Boolean!
  removeItemFromCommitQueue(commitQueueId: String!, issue: String!): String
  updateUserSettings(userSettings: UserSettingsInput): Boolean!
  restartJasper(hostIds: [String!]!): Int!
  updateHostStatus(
    hostIds: [String!]!
    status: String!
    notes: String = ""
  ): Int!
  createPublicKey(publicKeyInput: PublicKeyInput!): [PublicKey!]!
  spawnHost(spawnHostInput: SpawnHostInput): Host!
  spawnVolume(spawnVolumeInput: SpawnVolumeInput!): Boolean!
  updateVolume(updateVolumeInput: UpdateVolumeInput!): Boolean!
  updateSpawnHostStatus(hostId: String!, action: SpawnHostStatusActions!): Host!
  removePublicKey(keyName: String!): [PublicKey!]!
  updatePublicKey(
    targetKeyName: String!
    updateInfo: PublicKeyInput!
  ): [PublicKey!]!
  attachVolumeToHost(volumeAndHost: VolumeHost!): Boolean!
  detachVolumeFromHost(volumeId: String!): Boolean!
  removeVolume(volumeId: String!): Boolean!
  editSpawnHost(spawnHost: EditSpawnHostInput): Host!
  bbCreateTicket(taskId: String!, execution: Int): Boolean!
  clearMySubscriptions: Int!
}

# Array of activated and unactivated versions
# nextPage represents the last activated order number returned
type MainlineCommits {
  nextPageOrderNumber: Int
  versions: [MainlineCommitVersion!]!
}

type MainlineCommitVersion {
  version: Version
  rolledUpVersions: [Version!]
}
type Version {
  id: String!
  createTime: Time!
  startTime: Time
  finishTime: Time
  message: String!
  revision: String!
  author: String!
  status: String!
  order: Int!
  repo: String!
  project: String!
  branch: String!
  requester: String!
  activated: Boolean
  buildVariants(options: BuildVariantOptions): [GroupedBuildVariant]
}

input BuildVariantOptions {
  variants: [String!]
  tasks: [String!]
  statuses: [String!]
}
input MainlineCommitsOptions {
  projectID: String!
  limit: Int = 7
  skipOrderNumber: Int = 0
}
enum SpawnHostStatusActions {
  START
  STOP
  TERMINATE
}
enum TaskSortCategory {
  NAME
  STATUS
  BASE_STATUS
  VARIANT
}

enum TestSortCategory {
  BASE_STATUS
  STATUS
  DURATION
  TEST_NAME
}

enum SortDirection {
  ASC
  DESC
}

enum MetStatus {
  UNMET
  MET
  PENDING
}

enum RequiredStatus {
  MUST_FAIL
  MUST_FINISH
  MUST_SUCCEED
}

enum HostSortBy {
  ID
  DISTRO
  CURRENT_TASK
  STATUS
  ELAPSED
  UPTIME
  IDLE_TIME
  OWNER
}

enum TaskQueueItemType {
  COMMIT
  PATCH
}

input VolumeHost {
  volumeId: String!
  hostId: String!
}
input PatchConfigure {
  description: String!
  variantsTasks: [VariantTasks!]!
  parameters: [ParameterInput]
}
input VariantTasks {
  variant: String!
  tasks: [String!]!
  displayTasks: [DisplayTask!]!
}
input DisplayTask {
  Name: String!
  ExecTasks: [String!]!
}

input SubscriptionInput {
  resource_type: String
  trigger: String
  selectors: [SelectorInput!]!
  regex_selectors: [SelectorInput!]!
  subscriber: SubscriberInput!
  owner_type: String
  owner: String
  trigger_data: StringMap!
}

input UserSettingsInput {
  timezone: String
  region: String
  githubUser: GithubUserInput
  slackUsername: String
  notifications: NotificationsInput
  useSpruceOptions: UseSpruceOptionsInput
}
input SelectorInput {
  type: String!
  data: String!
}

input SubscriberInput {
  type: String!
  target: String!
}

input UseSpruceOptionsInput {
  hasUsedSpruceBefore: Boolean
  spruceV1: Boolean
}

input PatchesInput {
  limit: Int! = 0
  page: Int! = 0
  patchName: String! = ""
  statuses: [String!]! = []
  includeCommitQueue: Boolean! = false
}

input SpawnHostInput {
  distroId: String!
  region: String!
  savePublicKey: Boolean!
  publicKey: PublicKeyInput!
  userDataScript: String
  expiration: Time
  noExpiration: Boolean!
  setUpScript: String
  isVirtualWorkStation: Boolean!
  homeVolumeSize: Int
  volumeId: String
  taskId: String
  useProjectSetupScript: Boolean
  useTaskConfig: Boolean
  spawnHostsStartedByTask: Boolean
  taskSync: Boolean
}

input EditSpawnHostInput {
  hostId: String!
  displayName: String
  expiration: Time
  noExpiration: Boolean
  instanceType: String
  addedInstanceTags: [InstanceTagInput!]
  deletedInstanceTags: [InstanceTagInput!]
  volume: String
  servicePassword: String
}

input SpawnVolumeInput {
  availabilityZone: String!
  size: Int!
  type: String!
  expiration: Time
  noExpiration: Boolean
  host: String
}

input UpdateVolumeInput {
  expiration: Time
  noExpiration: Boolean
  name: String
  volumeId: String!
}

input IssueLinkInput {
  url: String!
  issueKey: String!
}

input SortOrder {
  Key: TaskSortCategory!
  Direction: SortDirection!
}

type TaskQueueItem {
  id: ID!
  displayName: String!
  project: String!
  buildVariant: String!
  expectedDuration: Duration!
  priority: Int!
  revision: String!
  requester: TaskQueueItemType!
  version: String!
}

type TaskQueueDistro {
  id: ID!
  queueCount: Int!
}

type Host {
  homeVolume: Volume
  id: ID!
  hostUrl: String!
  tag: String!
  distroId: String
  status: String!
  runningTask: TaskInfo
  totalIdleTime: Duration
  uptime: Time # host creation time
  elapsed: Time # running task start time
  startedBy: String!
  provider: String!
  lastCommunicationTime: Time
  noExpiration: Boolean!
  instanceType: String
  homeVolumeID: String
  volumes: [Volume!]!
  user: String
  distro: DistroInfo
  availabilityZone: String
  instanceTags: [InstanceTag!]!
  expiration: Time
  displayName: String
}

type InstanceTag {
  key: String!
  value: String!
  canBeModified: Boolean!
}

input InstanceTagInput {
  key: String!
  value: String!
}
type DistroInfo {
  id: String
  workDir: String
  isVirtualWorkStation: Boolean
  user: String
  isWindows: Boolean
  bootstrapMethod: String
}

type Distro {
  name: String
  userSpawnAllowed: Boolean
  workDir: String
  user: String
  isVirtualWorkStation: Boolean!
}

type TaskInfo {
  id: ID
  name: String
}

type HostsResponse {
  filteredHostsCount: Int
  totalHostsCount: Int!
  hosts: [Host!]!
}

type PatchTasks {
  tasks: [Task!]!
  count: Int!
}

type GroupedBuildVariant {
  variant: String!
  displayName: String!
  tasks: [Task]
}

type TaskFiles {
  fileCount: Int!
  groupedFiles: [GroupedFiles!]!
}

type GroupedFiles {
  taskName: String
  files: [File!]
}

type ModuleCodeChange {
  branchName: String!
  htmlLink: String!
  rawLink: String!
  fileDiffs: [FileDiff!]!
}

type FileDiff {
  fileName: String!
  additions: Int!
  deletions: Int!
  diffLink: String!
  description: String!
}

type UserPatches {
  patches: [Patch!]!
  filteredPatchCount: Int!
}

type Patches {
  patches: [Patch!]!
  filteredPatchCount: Int!
}

type Patch {
  createTime: Time
  id: ID!
  description: String!
  projectID: String!
  projectIdentifier: String!
  githash: String!
  patchNumber: Int!
  author: String!
  authorDisplayName: String!
  version: String!
  status: String!
  variants: [String!]!
  tasks: [String!]!
  childPatches: [ChildPatch!]
  variantsTasks: [VariantTask]!
  activated: Boolean!
  alias: String
  duration: PatchDuration
  time: PatchTime
  taskCount: Int
  baseVersionID: String
  parameters: [Parameter!]!
  moduleCodeChanges: [ModuleCodeChange!]!
  project: PatchProject
  builds: [Build!]!
  commitQueuePosition: Int
  taskStatuses: [String!]!
  baseTaskStatuses: [String!]!
  canEnqueueToCommitQueue: Boolean!
}

type ChildPatch {
  project: String!
  patchID: String!
  status: String!
  taskCount: Int
}

type Build {
  id: String!
  buildVariant: String!
  status: String!
  predictedMakespan: Duration!
  actualMakespan: Duration!
}

type Volume {
  id: String!
  displayName: String!
  createdBy: String!
  type: String!
  availabilityZone: String!
  size: Int!
  expiration: Time
  deviceName: String
  hostID: String!
  noExpiration: Boolean!
  homeVolume: Boolean!
  host: Host
  creationTime: Time
}

type PatchProject {
  variants: [ProjectBuildVariant!]!
}
type ProjectBuildVariant {
  name: String!
  displayName: String!
  tasks: [String!]!
}

type Parameter {
  key: String!
  value: String!
}

input ParameterInput {
  key: String!
  value: String!
}

type TaskResult {
  id: ID!
  execution: Int!
  aborted: Boolean!
  displayName: String!
  version: String!
  status: String!
  baseStatus: String
  baseTask: BaseTaskResult
  buildVariant: String!
  buildVariantDisplayName: String!
  blocked: Boolean!
  executionTasksFull: [Task!]
}

type BaseTaskResult {
  id: ID!
  status: String!
}

type PatchDuration {
  makespan: String
  timeTaken: String
  time: PatchTime
}

type PatchTime {
  started: String
  finished: String
  submittedAt: String!
}

type VariantTask {
  name: String!
  tasks: [String!]!
}

type TaskLogLinks {
  allLogLink: String
  agentLogLink: String
  systemLogLink: String
  taskLogLink: String
  eventLogLink: String
}

type TaskEndDetail {
  status: String!
  type: String!
  description: String
  timedOut: Boolean
  timeoutType: String
  oomTracker: OomTrackerInfo!
}

type OomTrackerInfo {
  detected: Boolean!
  pids: [Int]
}

type TaskTestResult {
  totalTestCount: Int!
  filteredTestCount: Int!
  testResults: [TestResult!]!
}

type TestResult {
  id: String!
  groupID: String
  status: String!
  baseStatus: String
  testFile: String!
  displayTestName: String
  logs: TestLog!
  exitCode: Int
  startTime: Time
  duration: Float
  endTime: Time
  taskId: String
  execution: Int
  logTestName: String
  lineNum: Int
}

type TestLog {
  htmlDisplayURL: String
  rawDisplayURL: String
}

type Dependency {
  name: String!
  metStatus: MetStatus!
  requiredStatus: RequiredStatus!
  buildVariant: String!
  uiLink: String!
}

type PatchMetadata {
  author: String!
  patchID: String!
}

type BaseTaskMetadata {
  baseTaskDuration: Duration
  baseTaskLink: String!
}

type AbortInfo {
  user: String!
  taskID: String!
  taskDisplayName: String!
  buildVariantDisplayName: String!
  newVersion: String!
  prClosed: Boolean!
}

type Task {
  aborted: Boolean!
  abortInfo: AbortInfo
  activated: Boolean!
  activatedBy: String
  activatedTime: Time
  ami: String
  annotation: Annotation
  baseTask: Task
  baseStatus: String
  baseTaskMetadata: BaseTaskMetadata
  blocked: Boolean!
  buildId: String!
  buildVariant: String!
  buildVariantDisplayName: String
  canAbort: Boolean!
  canModifyAnnotation: Boolean!
  canRestart: Boolean!
  canSchedule: Boolean!
  canSetPriority: Boolean!
  canSync: Boolean!
  canUnschedule: Boolean!
  createTime: Time
  details: TaskEndDetail
  dispatchTime: Time
  displayName: String!
  displayOnly: Boolean
  displayTask: Task
  distroId: String!
  estimatedStart: Duration
  execution: Int!
  executionTasks: [String!]
  executionTasksFull: [Task!]
  expectedDuration: Duration
  failedTestCount: Int!
  finishTime: Time
  generatedBy: String
  generatedByName: String
  generateTask: Boolean
  hostId: String
  id: String!
  ingestTime: Time
  isPerfPluginEnabled: Boolean!
  latestExecution: Int!
  logs: TaskLogLinks!
  minQueuePosition: Int!
  patchMetadata: PatchMetadata!
  patchNumber: Int
  priority: Int
  project: Project
  projectId: String!
  reliesOn: [Dependency!]!
  requester: String!
  restarts: Int
  revision: String
  scheduledTime: Time
  spawnHostLink: String
  startTime: Time
  status: String!
  taskGroup: String
  taskGroupMaxHosts: Int
  timeTaken: Duration
  totalTestCount: Int!
  version: String!
}

type BaseTaskInfo {
  id: String
  status: String
}

type GroupedProjects {
  name: String!
  projects: [Project!]!
}

type Project {
  displayName: String!
  id: String!
  identifier: String!
  isFavorite: Boolean!
  owner: String!
  patches(patchesInput: PatchesInput!): Patches!
  repo: String!
  spawnHostScriptPath: String!
}

type File {
  name: String!
  link: String!
  visibility: String!
}

type User {
  displayName: String!
  userId: String!
  emailAddress: String!
  patches(patchesInput: PatchesInput!): Patches!
}

type RecentTaskLogs {
  eventLogs: [TaskEventLogEntry!]!
  taskLogs: [LogMessage!]!
  systemLogs: [LogMessage!]!
  agentLogs: [LogMessage!]!
}

type TaskEventLogData {
  hostId: String
  jiraIssue: String
  jiraLink: String
  priority: Int
  status: String
  timestamp: Time
  userId: String
}

type TaskEventLogEntry {
  id: String!
  resourceType: String!
  processedAt: Time!
  timestamp: Time
  eventType: String
  data: TaskEventLogData!
  resourceId: String!
}

type LogMessage {
  type: String
  severity: String
  message: String
  timestamp: Time
  version: Int
}

type CommitQueue {
  projectId: String
  message: String
  owner: String
  repo: String
  queue: [CommitQueueItem!]
}

type CommitQueueItem {
  issue: String
  version: String
  enqueueTime: Time
  patch: Patch
  source: String
  modules: [Module!]
}

type Module {
  module: String
  issue: String
}

type UserSettings {
  timezone: String
  region: String
  githubUser: GithubUser
  slackUsername: String
  notifications: Notifications
  useSpruceOptions: UseSpruceOptions
}

type UseSpruceOptions {
  hasUsedSpruceBefore: Boolean
  spruceV1: Boolean
}

input GithubUserInput {
  lastKnownAs: String
}
type GithubUser {
  uid: Int
  lastKnownAs: String
}
input NotificationsInput {
  buildBreak: String
  patchFinish: String
  patchFirstFailure: String
  spawnHostExpiration: String
  spawnHostOutcome: String
  commitQueue: String
}
type Notifications {
  buildBreak: String
  patchFinish: String
  patchFirstFailure: String
  spawnHostExpiration: String
  spawnHostOutcome: String
  commitQueue: String
}
type UserConfig {
  user: String!
  api_key: String!
  api_server_host: String!
  ui_server_host: String!
}

input PublicKeyInput {
  name: String!
  key: String!
}

type PublicKey {
  name: String!
  key: String!
}

type ClientConfig {
  clientBinaries: [ClientBinary!]
  latestRevision: String
}

type ClientBinary {
  arch: String
  os: String
  url: String
  displayName: String
}

type SpruceConfig {
  ui: UIConfig
  jira: JiraConfig
  banner: String
  bannerTheme: String
  providers: CloudProviderConfig
  spawnHost: SpawnHostConfig!
}

type JiraConfig {
  host: String
}

type UIConfig {
  userVoice: String
}

type CloudProviderConfig {
  aws: AWSConfig
}

type AWSConfig {
  maxVolumeSizePerUser: Int
}

type SpawnHostConfig {
  unexpirableHostsPerUser: Int!
  unexpirableVolumesPerUser: Int!
  spawnHostsPerUser: Int!
}

type HostEvents {
  eventLogEntries: [HostEventLogEntry!]!
  count: Int!
}

type HostEventLogEntry {
  id: String!
  resourceType: String!
  processedAt: Time!
  timestamp: Time
  eventType: String
  data: HostEventLogData!
  resourceId: String!
}

type HostEventLogData {
  agentRevision: String!
  agentBuild: String!
  jasperRevision: String!
  oldStatus: String!
  newStatus: String!
  logs: String!
  hostname: String!
  provisioningMethod: String!
  taskId: String!
  taskPid: String!
  taskStatus: String!
  execution: String!
  monitorOp: String!
  user: String!
  successful: Boolean!
  duration: Duration!
}

type BuildBaron {
  searchReturnInfo: SearchReturnInfo
  buildBaronConfigured: Boolean!
}

# build baron plugin
type SearchReturnInfo {
  issues: [JiraTicket!]!
  search: String!
  source: String!
  featuresURL: String!
}
type JiraTicket {
  key: String!
  fields: TicketFields!
}

type TicketFields {
  summary: String!
  assigneeDisplayName: String
  resolutionName: String
  created: String!
  updated: String!
  status: JiraStatus!
  assignedTeam: String
}

type JiraStatus {
  id: String!
  name: String!
}

type Annotation {
  id: String!
  taskId: String!
  taskExecution: Int!
  note: Note
  issues: [IssueLink]
  suspectedIssues: [IssueLink]
  createdIssues: [IssueLink]
  webhookConfigured: Boolean!
}

type Note {
  message: String!
  source: Source!
}

type IssueLink {
  issueKey: String
  url: String
  source: Source
  jiraTicket: JiraTicket
}

type Source {
  author: String!
  time: Time!
  requester: String!
}

scalar Time
scalar Duration
scalar StringMap
