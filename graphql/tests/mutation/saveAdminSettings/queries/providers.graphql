mutation SaveAdminSettings {
  saveAdminSettings(adminSettings: {
    providers: {
      aws: {
        ec2Keys: [
          {
            name: "test-key-1"
            key: "21039487102938470912837"
            secret: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
          }
          {
            name: "test-key-2"
            key: "120938471209384701298"
            secret: "je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY"
          }
        ]
        subnets: [
          {
            az: "us-east-1a"
            subnetId: "subnet-12345678"
          }
          {
            az: "us-east-1b"
            subnetId: "subnet-87654321"
          }
        ]
        parserProject: {
          key: "AKIAIOSFODNN7EXAMPLE"
          secret: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
          bucket: "evergreen-parser-projects"
          prefix: "parser-projects/"
          generatedJSONPrefix: "generated-json/"
        }
        persistentDNS: {
          hostedZoneID: "Z1D633PJN98FT9"
          domain: "evergreen.example.com"
        }
        defaultSecurityGroup: "sg-12345678"
        allowedInstanceTypes: ["m5.large", "m5.xlarge", "c5.large"]
        alertableInstanceTypes: ["m5.24xlarge", "c5.24xlarge"]
        allowedRegions: ["us-east-1", "us-west-1", "us-west-2"]
        maxVolumeSizePerUser: 1000
        pod: {
          role: "arn:aws:iam::123456789012:role/ECSTaskRole"
          region: "us-east-1"
          ecs: {
            maxCPU: 1024
            maxMemoryMb: 1024
            taskDefinitionPrefix: "evergreen-"
            taskRole: "arn:aws:iam::123456789012:role/ECSTaskRole"
            executionRole: "arn:aws:iam::123456789012:role/ECSExecutionRole"
            logRegion: "us-east-1"
            logGroup: "/evergreen/ecs"
            logStreamPrefix: "evergreen-task-"
            awsVPC: {
              subnets: ["subnet-12345678", "subnet-87654321"]
              securityGroups: ["sg-12345678", "sg-87654321"]
            }
            clusters: [
              {
                name: "evergreen-cluster-1"
                os: "linux"
              }
              {
                name: "evergreen-cluster-2"
                os: "windows"
              }
            ]
            capacityProviders: [
              {
                name: "FARGATE"
                os: ECS_OS_LINUX
                arch: ECS_ARCH_ARM64
              }
              {
                name: "EC2"
                os: ECS_OS_LINUX
                arch: ECS_ARCH_ARM64
              }
            ]
            allowedImages: [
              "amazonlinux:latest"
              "ubuntu:20.04"
              "centos:8"
            ]
          }
        }
        accountRoles: [
          {account: "evgUser",  role: "super"}
        ]
        ipamPoolID: "pool-id"
        elasticIPUsageRate: 0.5
      }
      docker: {
        apiVersion: "1.40"
      }
    }
    projectCreation: {
      repoExceptions: [
        {
          owner: "evergreen-ci"
          repo: "evergreen"
        }
        {
          owner: "mongodb"
          repo: "mongo"
        }
      ]
    }
    containerPools: {
      pools: [
        {
          id: "test-pool-1"
          distro: "ubuntu1604-parent"
          maxContainers: 5
          port: 2525
        }
        {
          id: "test-pool-2"
          distro: "ubuntu1604-parent"
          maxContainers: 10
          port: 4649
        }
      ]
    }
    parameterStore: {
      prefix: "mutant"
    }
  }) {
    providers {
      aws {
        ec2Keys {
          name
          key
          secret
        }
        subnets {
          az
          subnetId
        }
        parserProject {
          key
          secret
          bucket
          prefix
          generatedJSONPrefix
        }
        persistentDNS {
          hostedZoneID
          domain
        }
        defaultSecurityGroup
        allowedInstanceTypes
        alertableInstanceTypes
        allowedRegions
        maxVolumeSizePerUser
        pod {
          role
          region
          ecs {
            maxCPU
            maxMemoryMb
            taskDefinitionPrefix
            taskRole
            executionRole
            logRegion
            logGroup
            logStreamPrefix
            awsVPC {
              subnets
              securityGroups
            }
            clusters {
              name
              os
            }
            capacityProviders {
              name
              os
              arch
            }
            allowedImages
          }
          secretsManager {
            secretPrefix
          }
        }
        accountRoles {
          account
          role
        }
        ipamPoolID
        elasticIPUsageRate
      }
      docker {
        apiVersion
      }
    }
    projectCreation {
      repoExceptions {
        owner
        repo
      }
    }
    containerPools {
      pools {
        id
        distro
        maxContainers
        port
      }
    }
    parameterStore {
      prefix
    }
  }
}
