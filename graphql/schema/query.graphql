# This file lists all of the queries. The query definitions can be found in the corresponding files in the resolvers folder.
type Query {
  # annotations
  bbGetCreatedTickets(taskId: String! @requireProjectAccess(permission: ANNOTATIONS, access: VIEW)): [JiraTicket!]!
  buildBaron(taskId: String! @requireProjectAccess(permission: ANNOTATIONS, access: VIEW), execution: Int!): BuildBaron!

  # config
  adminEvents(opts: AdminEventsInput!): AdminEventsPayload! @requireAdmin
  adminSettings: AdminSettings @requireAdmin
  adminTasksToRestart(opts: RestartAdminTasksOptions!): AdminTasksToRestartPayload! @requireAdmin
  awsRegions: [String!]
  clientConfig: ClientConfig
  instanceTypes: [String!]!
  spruceConfig: SpruceConfig
  subnetAvailabilityZones: [String!]!

  # distros
  distro(distroId: String! @requireDistroAccess(access: VIEW)): Distro
  distroEvents(opts: DistroEventsInput!): DistroEventsPayload! # Has directive on DistroEventsInput.
  distros(onlySpawnable: Boolean!): [Distro!]!
  distroTaskQueue(distroId: String!): [TaskQueueItem!]!

  # hosts
  host(hostId: String! @requireHostAccess(access: VIEW)): Host
  hostEvents(
    hostId: String!  @requireHostAccess(access: VIEW)
    hostTag: String = ""
    limit: Int = 0
    page: Int = 0
  ): HostEvents! @deprecated(reason: "Use host.events instead.")
  hosts(
    hostId: String = ""
    distroId: String = ""
    currentTaskId: String = ""
    statuses: [String!] = []
    startedBy: String = ""
    sortBy: HostSortBy = STATUS
    sortDir: SortDirection = ASC
    page: Int = 0
    limit: Int = 10
  ): HostsResponse!
  taskQueueDistros: [TaskQueueDistro!]!

  # containers
  pod(podId: String!): Pod!
  
  # patch
  patch(patchId: String! @requireProjectAccess(permission: TASKS, access: VIEW)): Patch!

  # project
  githubProjectConflicts(projectId: String! @requireProjectAccess(permission: SETTINGS, access: VIEW)): GithubProjectConflicts!
  ### The project query must use TASKS permission because we surface many key fields (e.g. patches and banners) from it.
  ### Can be updated after completion of DEVPROD-6882.
  project(projectIdentifier: String! @requireProjectAccess(permission: TASKS, access: VIEW)): Project!
  projects: [GroupedProjects!]!
  projectEvents(
    projectIdentifier: String! @requireProjectAccess(permission: SETTINGS, access: VIEW)
    limit: Int = 0
    before: Time
  ): ProjectEvents!
  projectSettings(projectIdentifier: String! @requireProjectAccess(permission: SETTINGS, access:VIEW)): ProjectSettings!
  repoEvents(repoId: String! @requireProjectAccess(permission: SETTINGS, access: VIEW), limit: Int = 0, before: Time): ProjectEvents!
  repoSettings(repoId: String! @requireProjectAccess(permission: SETTINGS, access: VIEW)): RepoSettings!
  viewableProjectRefs: [GroupedProjects!]!
  isRepo(projectOrRepoId: String!): Boolean!

  # spawn
  myHosts: [Host!]!
  myVolumes: [Volume!]!

  # logkeeper
  logkeeperBuildMetadata(buildId: String!): LogkeeperBuild!

  # task
  task(taskId: String! @requireProjectAccess(permission: TASKS, access: VIEW), execution: Int): Task
  taskAllExecutions(taskId: String! @requireProjectAccess(permission: TASKS, access: VIEW)): [Task!]!
  taskTestSample(
    versionId: String! @requireProjectAccess(permission: TASKS, access: VIEW)
    taskIds: [String!]!
    filters: [TestFilter!]!
  ): [TaskTestResultSample!]

  # user
  myPublicKeys: [PublicKey!]!
  user(userId: String): User! 
  userConfig: UserConfig

  # mainline commits
  buildVariantsForTaskName(projectIdentifier: String! @requireProjectAccess(permission: TASKS, access: VIEW), taskName: String!): [BuildVariantTuple!]
  mainlineCommits(options: MainlineCommitsOptions!, buildVariantOptions: BuildVariantOptions): MainlineCommits # Has directive on MainlineCommitsOptions.
  taskNamesForBuildVariant(projectIdentifier: String! @requireProjectAccess(permission: TASKS, access: VIEW), buildVariant: String!): [String!]

  # waterfall
  waterfall(options: WaterfallOptions!): Waterfall!
  
  # task history
  taskHistory(options: TaskHistoryOpts!): TaskHistory!

  # version
  hasVersion(patchId: String!): Boolean!
  version(versionId: String! @requireProjectAccess(permission: TASKS, access: VIEW)): Version!

  # image
  image(imageId: String!): Image
  images: [String!]!
}
