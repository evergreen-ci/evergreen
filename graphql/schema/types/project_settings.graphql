enum ProjectSettingsSection {
  # Evergreen sections.
  GENERAL
  ACCESS
  VARIABLES
  NOTIFICATIONS
  PATCH_ALIASES
  WORKSTATION
  TRIGGERS
  PERIODIC_BUILDS
  PLUGINS
  CONTAINERS
  VIEWS_AND_FILTERS

  # GitHub sections.
  GITHUB_AND_COMMIT_QUEUE
  GITHUB_APP_SETTINGS
  GITHUB_PERMISSIONS
}

###### INPUTS ######
"""
ProjectSettingsInput is the input to the saveProjectSettingsForSection mutation.
It contains information about project settings (e.g. Build Baron configurations, subscriptions, etc) and is used to
update the settings for a given project.
"""
input ProjectSettingsInput {
  projectId: String! @requireProjectAccess(permission: SETTINGS, access: EDIT)
  aliases: [ProjectAliasInput!]
  githubAppAuth: GithubAppAuthInput @redactSecrets
  githubWebhooksEnabled: Boolean
  projectRef: ProjectInput
  subscriptions: [SubscriptionInput!]
  vars: ProjectVarsInput @redactSecrets
}

input ProjectInput {
  id: String!
  admins: [String!]
  banner: ProjectBannerInput
  batchTime: Int
  branch: String
  buildBaronSettings: BuildBaronSettingsInput
  commitQueue: CommitQueueParamsInput
  containerSizeDefinitions: [ContainerResourcesInput!]
  deactivatePrevious: Boolean
  disabledStatsCache: Boolean
  dispatchingDisabled: Boolean
  displayName: String
  enabled: Boolean
  externalLinks: [ExternalLinkInput!]
  githubChecksEnabled: Boolean
  githubDynamicTokenPermissionGroups: [GitHubDynamicTokenPermissionGroupInput!]
  githubPermissionGroupByRequester: StringMap
  githubTriggerAliases: [String!]
  githubPRTriggerAliases: [String!]
  githubMQTriggerAliases: [String!]
  gitTagAuthorizedTeams: [String!]
  gitTagAuthorizedUsers: [String!]
  gitTagVersionsEnabled: Boolean
  identifier: String
  manualPrTestingEnabled: Boolean
  notifyOnBuildFailure: Boolean
  oldestAllowedMergeBase: String
  owner: String
  parsleyFilters: [ParsleyFilterInput!]
  patchingDisabled: Boolean
  patchTriggerAliases: [PatchTriggerAliasInput!]
  perfEnabled: Boolean
  periodicBuilds: [PeriodicBuildInput!]
  projectHealthView: ProjectHealthView
  prTestingEnabled: Boolean
  remotePath: String
  repo: String
  repotrackerDisabled: Boolean
  restricted: Boolean
  spawnHostScriptPath: String
  stepbackDisabled: Boolean
  stepbackBisect: Boolean
  taskAnnotationSettings: TaskAnnotationSettingsInput
  tracksPushEvents: Boolean
  triggers: [TriggerAliasInput!]
  versionControlEnabled: Boolean
  workstationConfig: WorkstationConfigInput
}

###### TYPES ######
"""
ProjectSettings models the settings for a given Project.
"""
type ProjectSettings {
  aliases: [ProjectAlias!]
  githubAppAuth: GithubAppAuth
  githubWebhooksEnabled: Boolean!
  projectRef: Project @requireProjectSettingsAccess
  subscriptions: [GeneralSubscription!]
  vars: ProjectVars
}

type Selector {
  data: String!
  type: String!
}

# shared by Project and RepoRef
type TriggerAlias {
  alias: String!
  buildVariantRegex: String!
  configFile: String!
  dateCutoff: Int
  level: String!
  project: String!
  status: String!
  taskRegex: String!
  unscheduleDownstreamVersions: Boolean
}

# shared by Project and RepoRef
type ContainerResources {
  name: String!
  cpu: Int!
  memoryMb: Int!
}

# shared by Project and RepoRef
type PeriodicBuild {
  id: String!
  alias: String!
  configFile: String!
  intervalHours: Int!
  cron: String!
  message: String!
  nextRunTime: Time!
}

# shared by Project and RepoRef
type BuildBaronSettings {
  bfSuggestionFeaturesURL: String
  bfSuggestionPassword: String
  bfSuggestionServer: String
  bfSuggestionTimeoutSecs: Int
  bfSuggestionUsername: String
  ticketCreateProject: String!
  ticketSearchProjects: [String!]
  ticketCreateIssueType: String!
}

# shared by Project and RepoRef
type TaskAnnotationSettings {
  fileTicketWebhook: Webhook!
}

type Webhook {
  endpoint: String!
  secret: String!
}

"""
ProjectEvents contains project event log entries that concern the history of changes related to project
settings.
Although RepoSettings uses RepoRef in practice to have stronger types, this can't be enforced
or event logs because new fields could always be introduced that don't exist in the old event logs.
"""
type ProjectEvents {
  count: Int!
  eventLogEntries: [ProjectEventLogEntry!]!
}

type ProjectEventLogEntry {
  after: ProjectEventSettings
  before: ProjectEventSettings
  timestamp: Time!
  user: String!
}

type ProjectEventSettings {
  aliases: [ProjectAlias!]
  githubAppAuth: GithubAppAuth
  githubWebhooksEnabled: Boolean!
  projectRef: Project
  subscriptions: [GeneralSubscription!]
  vars: ProjectVars
}

type ProjectAlias {
  id: String!
  alias: String!
  description: String
  gitTag: String!
  remotePath: String!
  task: String!
  taskTags: [String!]!
  variant: String!
  variantTags: [String!]!
  parameters: [Parameter!]!
}
