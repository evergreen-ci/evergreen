###### TYPES ######
"""
SpruceConfig defines settings that apply to all users of Evergreen.
For example, if the banner field is populated, then a sitewide banner will be shown to all users.
"""
input SaveAdminSettingsInput {
  adminSettings: AdminSettingsInput!
}

input SESConfigInput {
  senderAddress: String!
}

type SESConfig {
  senderAddress: String @requireAdmin
}

input NotifyConfigInput {
  ses: SESConfigInput!
}

type NotifyConfig {
  ses: SESConfig @requireAdmin
}

input TaskLimitsConfigInput {
  maxTasksPerVersion: Int!
  maxIncludesPerVersion: Int!
  maxHourlyPatchTasks: Int!
  maxPendingGeneratedTasks: Int!
  maxGenerateTaskJSONSize: Int!
  maxConcurrentLargeParserProjectTasks: Int!
  maxDegradedModeConcurrentLargeParserProjectTasks: Int!
  maxDegradedModeParserProjectSize: Int!
  maxParserProjectSize: Int!
  maxExecTimeoutSecs: Int!
  maxTaskExecution: Int!
  maxDailyAutomaticRestarts: Int!
}

type TaskLimitsConfig {
  maxTasksPerVersion: Int
  maxIncludesPerVersion: Int
  maxHourlyPatchTasks: Int
  maxPendingGeneratedTasks: Int
  maxGenerateTaskJSONSize: Int
  maxConcurrentLargeParserProjectTasks: Int
  maxDegradedModeConcurrentLargeParserProjectTasks: Int
  maxDegradedModeParserProjectSize: Int
  maxParserProjectSize: Int
  maxExecTimeoutSecs: Int
  maxTaskExecution: Int
  maxDailyAutomaticRestarts: Int
}

input HostInitConfigInput {
  hostThrottle: Int!
  provisioningThrottle: Int!
  cloudStatusBatchSize: Int!
  maxTotalDynamicHosts: Int!
}

type HostInitConfig {
  hostThrottle: Int
  provisioningThrottle: Int
  cloudStatusBatchSize: Int
  maxTotalDynamicHosts: Int
}

input PodLifecycleConfigInput {
  maxParallelPodRequests: Int!
  maxPodDefinitionCleanupRate: Int!
  maxSecretCleanupRate: Int!
}

type PodLifecycleConfig {
  maxParallelPodRequests: Int
  maxPodDefinitionCleanupRate: Int
  maxSecretCleanupRate: Int
}

input SchedulerConfigInput {
  taskFinder: FinderVersion!
  hostAllocator: HostAllocatorVersion!
  hostAllocatorRoundingRule: RoundingRule!
  hostAllocatorFeedbackRule: FeedbackRule!
  hostsOverallocatedRule: OverallocatedRule!
  futureHostFraction: Float!
  cacheDurationSeconds: Int!
  targetTimeSeconds: Int!
  acceptableHostIdleTimeSeconds: Int!
  groupVersions: Boolean!
  patchFactor: Int!
  patchTimeInQueueFactor: Int!
  commitQueueFactor: Int!
  mainlineTimeInQueueFactor: Int!
  expectedRuntimeFactor: Int!
  generateTaskFactor: Int!
  numDependentsFactor: Float!
  stepbackTaskFactor: Int!
}

type SchedulerConfig {
  taskFinder: FinderVersion
  hostAllocator: HostAllocatorVersion
  hostAllocatorRoundingRule: RoundingRule
  hostAllocatorFeedbackRule: FeedbackRule
  hostsOverallocatedRule: OverallocatedRule
  futureHostFraction: Float
  cacheDurationSeconds: Int
  targetTimeSeconds: Int
  acceptableHostIdleTimeSeconds: Int
  groupVersions: Boolean!
  patchFactor: Int
  patchTimeInQueueFactor: Int
  commitQueueFactor: Int
  mainlineTimeInQueueFactor: Int
  expectedRuntimeFactor: Int
  generateTaskFactor: Int
  numDependentsFactor: Float
  stepbackTaskFactor: Int
}

input RepotrackerConfigInput {
  numNewRepoRevisionsToFetch: Int!
  maxRepoRevisionsToSearch: Int!
  maxConcurrentRequests: Int!
}

type RepotrackerConfig {
  numNewRepoRevisionsToFetch: Int
  maxRepoRevisionsToSearch: Int
  maxConcurrentRequests: Int
}

input AdminSettingsInput {
  banner: String
  bannerTheme: BannerTheme
  serviceFlags: ServiceFlagsInput
  notify: NotifyConfigInput
  taskLimits: TaskLimitsConfigInput
  hostInit: HostInitConfigInput
  podLifecycle: PodLifecycleConfigInput
  scheduler: SchedulerConfigInput
  repotracker: RepotrackerConfigInput
}

type AdminSettings {
  banner: String
  bannerTheme: BannerTheme
  serviceFlags: ServiceFlags
  notify: NotifyConfig
  taskLimits: TaskLimitsConfig
  hostInit: HostInitConfig
  podLifecycle: PodLifecycleConfig
  scheduler: SchedulerConfig
  repotracker: RepotrackerConfig
}

type SpruceConfig {
  banner: String
  bannerTheme: String
  containerPools: ContainerPoolsConfig
  githubOrgs: [String!]!
  jira: JiraConfig
  providers: CloudProviderConfig
  secretFields: [String!]!
  singleTaskDistro: SingleTaskDistroConfig
  slack: SlackConfig
  spawnHost: SpawnHostConfig!
  ui: UIConfig!
}

input ServiceFlagsInput {
  taskDispatchDisabled: Boolean!
  hostInitDisabled: Boolean!
  podInitDisabled: Boolean!
  largeParserProjectsDisabled: Boolean!
  monitorDisabled: Boolean!
  alertsDisabled: Boolean!
  agentStartDisabled: Boolean!
  repotrackerDisabled: Boolean!
  schedulerDisabled: Boolean!
  checkBlockedTasksDisabled: Boolean!
  githubPRTestingDisabled: Boolean!
  cliUpdatesDisabled: Boolean!
  backgroundStatsDisabled: Boolean!
  taskLoggingDisabled: Boolean!
  cacheStatsJobDisabled: Boolean!
  cacheStatsEndpointDisabled: Boolean!
  taskReliabilityDisabled: Boolean!
  hostAllocatorDisabled: Boolean!
  podAllocatorDisabled: Boolean!
  unrecognizedPodCleanupDisabled: Boolean!
  backgroundReauthDisabled: Boolean!
  backgroundCleanupDisabled: Boolean!
  cloudCleanupDisabled: Boolean!
  sleepScheduleDisabled: Boolean!
  staticAPIKeysDisabled: Boolean!
  jwtTokenForCLIDisabled: Boolean!
  systemFailedTaskRestartDisabled: Boolean!
  degradedModeDisabled: Boolean!
  elasticIPsDisabled: Boolean!
  releaseModeDisabled: Boolean!
  adminParameterStoreDisabled: Boolean!
  eventProcessingDisabled: Boolean!
  jiraNotificationsDisabled: Boolean!
  slackNotificationsDisabled: Boolean!
  emailNotificationsDisabled: Boolean!
  webhookNotificationsDisabled: Boolean!
  githubStatusAPIDisabled: Boolean!
}

type ServiceFlags {
  taskDispatchDisabled: Boolean!
  hostInitDisabled: Boolean!
  podInitDisabled: Boolean!
  largeParserProjectsDisabled: Boolean!
  monitorDisabled: Boolean!
  alertsDisabled: Boolean!
  agentStartDisabled: Boolean!
  repotrackerDisabled: Boolean!
  schedulerDisabled: Boolean!
  checkBlockedTasksDisabled: Boolean!
  githubPRTestingDisabled: Boolean!
  cliUpdatesDisabled: Boolean!
  backgroundStatsDisabled: Boolean!
  taskLoggingDisabled: Boolean!
  cacheStatsJobDisabled: Boolean!
  cacheStatsEndpointDisabled: Boolean!
  taskReliabilityDisabled: Boolean!
  hostAllocatorDisabled: Boolean!
  podAllocatorDisabled: Boolean!
  unrecognizedPodCleanupDisabled: Boolean!
  backgroundReauthDisabled: Boolean!
  backgroundCleanupDisabled: Boolean!
  cloudCleanupDisabled: Boolean!
  sleepScheduleDisabled: Boolean!
  staticAPIKeysDisabled: Boolean!
  jwtTokenForCLIDisabled: Boolean!
  systemFailedTaskRestartDisabled: Boolean!
  degradedModeDisabled: Boolean!
  elasticIPsDisabled: Boolean!
  releaseModeDisabled: Boolean!
  adminParameterStoreDisabled: Boolean!
  eventProcessingDisabled: Boolean!
  jiraNotificationsDisabled: Boolean!
  slackNotificationsDisabled: Boolean!
  emailNotificationsDisabled: Boolean!
  webhookNotificationsDisabled: Boolean!
  githubStatusAPIDisabled: Boolean!
}

type ContainerPoolsConfig {
  pools: [ContainerPool!]!
}

type ContainerPool {
  id: String!
  distro: String!
  maxContainers: Int!
  port: Int!
}

type UIConfig {
  betaFeatures: BetaFeatures!
  defaultProject: String!
  userVoice: String
}

type SlackConfig {
  name: String
}

type JiraConfig {
  email: String
  host: String
}

type CloudProviderConfig {
  aws: AWSConfig
}

type AWSConfig {
  maxVolumeSizePerUser: Int
  pod: AWSPodConfig
}

type AWSPodConfig {
  ecs: ECSConfig
}

type ECSConfig {
  maxCPU: Int!
  maxMemoryMb: Int!
}

type SpawnHostConfig {
  spawnHostsPerUser: Int!
  unexpirableHostsPerUser: Int!
  unexpirableVolumesPerUser: Int!
}

"""
ClientConfig stores information about the binaries for the Evergreen Command-Line Client that are available for
download on Evergreen.
"""
type ClientConfig {
  clientBinaries: [ClientBinary!]
  latestRevision: String
}

type ClientBinary {
  arch: String
  displayName: String
  os: String
  url: String
}

type SingleTaskDistroConfig {
  projectTasksPairs: [ProjectTasksPair!]!
}

type ProjectTasksPair {
  projectId: String!
  allowedTasks: [String!]!
  allowedBVs: [String!]!
}
