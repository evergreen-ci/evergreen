enum PriorityLevel {
  EMERGENCY
  ALERT
  CRITICAL
  ERROR
  WARNING
  NOTICE
  INFO
  DEBUG
  TRACE
}

###### RESTART TASKS ######
input RestartAdminTasksOptions {
  startTime: Time!
  endTime: Time!
  includeTestFailed: Boolean!
  includeSystemFailed: Boolean!
  includeSetupFailed: Boolean!
}

type AdminTasksToRestartPayload {
  tasksToRestart: [Task!]!
}

type RestartAdminTasksPayload {
  numRestartedTasks: Int!
}

###### ADMIN EVENTS ######
"""
AdminEventsInput is the input to the adminEvents query.
"""
input AdminEventsInput {
  before: Time
  limit: Int = 10
}

type AdminEvent {
  section: String
  after: Map
  before: Map
  timestamp: Time!
  user: String!
}

type AdminEventsPayload {
  count: Int!
  eventLogEntries: [AdminEvent!]!
}

###### ADMIN SETTINGS ######
input SaveAdminSettingsInput {
  adminSettings: AdminSettingsInput!
}

input AdminSettingsInput {
  amboy: AmboyConfigInput
  amboyDB: AmboyDBConfigInput @redactSecrets
  api: APIConfigInput
  authConfig: AuthConfigInput
  banner: String
  bannerTheme: BannerTheme
  buckets: BucketsConfigInput
  cedar: CedarConfigInput
  configDir: String
  containerPools: ContainerPoolsConfigInput
  cost: CostConfigInput
  disabledGQLQueries: [String!]
  domainName: String
  expansions: StringMap
  fws: FWSConfigInput
  githubCheckRun: GitHubCheckRunConfigInput
  githubOrgs: [String!]
  githubPRCreatorOrg: String
  githubWebhookSecret: String @redactSecrets
  hostInit: HostInitConfigInput
  hostJasper: HostJasperConfigInput
  jira: JiraConfigInput
  jiraNotifications: JiraNotificationsConfigInput
  kanopySSHKeyPath: String @redactSecrets
  logPath: String
  loggerConfig: LoggerConfigInput
  notify: NotifyConfigInput
  parameterStore: ParameterStoreConfigInput
  perfMonitoringKanopyURL: String
  perfMonitoringURL: String
  podLifecycle: PodLifecycleConfigInput
  pprofPort: String
  projectCreation: ProjectCreationConfigInput
  providers: CloudProviderConfigInput
  releaseMode: ReleaseModeConfigInput
  repotracker: RepotrackerConfigInput
  runtimeEnvironments: RuntimeEnvironmentConfigInput
  scheduler: SchedulerConfigInput
  serviceFlags: ServiceFlagsInput
  shutdownWaitSeconds: Int
  singleTaskDistro: SingleTaskDistroConfigInput
  slack: SlackConfigInput
  sleepSchedule: SleepScheduleConfigInput
  spawnhost: SpawnHostConfigInput
  splunk: SplunkConfigInput
  ssh: SSHConfigInput
  taskLimits: TaskLimitsConfigInput
  testSelection: TestSelectionConfigInput
  tracer: TracerSettingsInput
  triggers: TriggerConfigInput
  ui: UIConfigInput
}

type AdminSettings {
  amboy: AmboyConfig
  amboyDB: AmboyDBConfig
  api: APIConfig
  authConfig: AuthConfig
  banner: String
  bannerTheme: BannerTheme
  buckets: BucketsConfig
  cedar: CedarConfig
  configDir: String
  containerPools: ContainerPoolsConfig
  cost: CostConfig
  disabledGQLQueries: [String!]!
  domainName: String
  expansions: StringMap
  fws: FWSConfig
  githubCheckRun: GitHubCheckRunConfig
  githubOrgs: [String!]
  githubPRCreatorOrg: String
  githubWebhookSecret: String @requireAdmin
  hostInit: HostInitConfig
  hostJasper: HostJasperConfig
  jira: JiraConfig
  jiraNotifications: JiraNotificationsConfig
  kanopySSHKeyPath: String @requireAdmin
  logPath: String
  loggerConfig: LoggerConfig
  notify: NotifyConfig
  parameterStore: ParameterStoreConfig
  perfMonitoringKanopyURL: String
  perfMonitoringURL: String
  podLifecycle: PodLifecycleConfig
  pprofPort: String
  projectCreation: ProjectCreationConfig
  providers: CloudProviderConfig
  releaseMode: ReleaseModeConfig
  repotracker: RepotrackerConfig
  runtimeEnvironments: RuntimeEnvironmentConfig
  scheduler: SchedulerConfig
  serviceFlags: ServiceFlags
  shutdownWaitSeconds: Int
  singleTaskDistro: SingleTaskDistroConfig
  slack: SlackConfig
  sleepSchedule: SleepScheduleConfig
  spawnhost: SpawnHostConfig
  splunk: SplunkConfig
  ssh: SSHConfig
  taskLimits: TaskLimitsConfig
  testSelection: TestSelectionConfig
  tracer: TracerSettings
  triggers: TriggerConfig
  ui: UIConfig
}

"""
SpruceConfig defines settings that apply to all users of Evergreen.
For example, if the banner field is populated, then a sitewide banner will be shown to all users.
"""
type SpruceConfig {
  banner: String
  bannerTheme: String
  containerPools: ContainerPoolsConfig
  githubOrgs: [String!]!
  jira: JiraConfig
  providers: CloudProviderConfig
  secretFields: [String!]!
  singleTaskDistro: SingleTaskDistroConfig
  slack: SlackConfig
  spawnHost: SpawnHostConfig!
  ui: UIConfig!
}

"""
ClientConfig stores information about the binaries for the Evergreen Command-Line Client that are available for
download on Evergreen.
"""
type ClientConfig {
  clientBinaries: [ClientBinary!]
  latestRevision: String
}

type ClientBinary {
  arch: String
  displayName: String
  os: String
  url: String
}
