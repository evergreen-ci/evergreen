enum HostSortBy {
  ID
  CURRENT_TASK
  DISTRO
  ELAPSED
  IDLE_TIME
  OWNER
  STATUS
  UPTIME
}

enum HostEventType {
  HOST_CREATED
  HOST_CREATED_ERROR
  HOST_STARTED
  HOST_STOPPED
  HOST_MODIFIED
  HOST_AGENT_DEPLOYED
  HOST_AGENT_DEPLOY_FAILED
  HOST_AGENT_MONITOR_DEPLOYED
  HOST_AGENT_MONITOR_DEPLOY_FAILED
  HOST_JASPER_RESTARTING
  HOST_JASPER_RESTARTED
  HOST_JASPER_RESTART_ERROR
  HOST_CONVERTING_PROVISIONING
  HOST_CONVERTED_PROVISIONING
  HOST_CONVERTING_PROVISIONING_ERROR
  HOST_STATUS_CHANGED
  HOST_DNS_NAME_SET
  HOST_PROVISION_ERROR
  HOST_PROVISION_FAILED
  HOST_PROVISIONED
  HOST_RUNNING_TASK_SET
  HOST_RUNNING_TASK_CLEARED
  HOST_TASK_FINISHED
  HOST_TERMINATED_EXTERNALLY
  HOST_EXPIRATION_WARNING_SENT
  HOST_TEMPORARY_EXEMPTION_EXPIRATION_WARNING_SENT
  HOST_IDLE_NOTIFICATION
  HOST_SCRIPT_EXECUTED
  HOST_SCRIPT_EXECUTE_FAILED
  VOLUME_EXPIRATION_WARNING_SENT
  VOLUME_MIGRATION_FAILED
}

enum SortDirection {
  ASC
  DESC
}

enum TaskQueueItemType {
  COMMIT
  PATCH
}

type SleepSchedule {
  dailyStartTime: String!
  dailyStopTime: String!
  nextStartTime: Time
  nextStopTime: Time
  permanentlyExempt: Boolean!
  shouldKeepOff: Boolean!
  timeZone: String!
  temporarilyExemptUntil: Time
  wholeWeekdaysOff: [Int!]!
}

###### TYPES ######
"""
Host models a host, which are used for things like running tasks or as virtual workstations.
"""
type Host {
  id: ID!
  availabilityZone: String
  ami: String
  displayName: String
  distro: DistroInfo
  distroId: String
  elapsed: Time # running task start time
  """
  events returns the event log entries for a given host.
  """
  events(
    limit: Int = 0
    page: Int = 0
    """
    sort by timestamp
    """
    sortDir: SortDirection = DESC
  ): HostEvents!
  expiration: Time
  hostUrl: String!
  homeVolume: Volume
  homeVolumeID: String
  instanceType: String
  instanceTags: [InstanceTag!]!
  lastCommunicationTime: Time
  noExpiration: Boolean!
  persistentDnsName: String!
  provider: String!
  runningTask: TaskInfo
  sleepSchedule: SleepSchedule
  startedBy: String!
  status: String!
  tag: String!
  totalIdleTime: Duration
  uptime: Time # host creation time
  user: String
  volumes: [Volume!]!
}

type TaskInfo {
  id: ID
  name: String
}

type DistroInfo {
  id: String
  bootstrapMethod: String
  isVirtualWorkStation: Boolean
  isWindows: Boolean
  user: String
  workDir: String
}

type InstanceTag {
  canBeModified: Boolean!
  key: String!
  value: String!
}

"""
HostsResponse is the return value for the hosts query.
It contains an array of Hosts matching the filter conditions, as well as some count information.
"""
type HostsResponse {
  filteredHostsCount: Int
  hosts: [Host!]!
  totalHostsCount: Int!
}

"""
HostEvents is the return value for the hostEvents query.
It contains the event log entries for a given host.
"""
type HostEvents {
  count: Int!
  eventLogEntries: [HostEventLogEntry!]!
}

type HostEventLogEntry {
  id: String!
  data: HostEventLogData!
  eventType: HostEventType
  processedAt: Time!
  resourceId: String!
  resourceType: String!
  timestamp: Time
}

type HostEventLogData {
  agentBuild: String!
  agentRevision: String!
  duration: Duration!
  execution: String!
  hostname: String!
  jasperRevision: String!
  logs: String!
  monitorOp: String!
  newStatus: String!
  oldStatus: String!
  provisioningMethod: String!
  successful: Boolean!
  taskId: String!
  taskPid: String!
  taskStatus: String!
  user: String!
}
