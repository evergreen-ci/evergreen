###### INPUTS ######
"""
CreateProjectInput is the input to the createProject mutation.
It contains information about a new project to be created.
"""
input CreateProjectInput {
  id: String
  identifier: String!
  owner: String!
  repo: String!
  repoRefId: String
}

"""
CopyProjectInput is the input to the copyProject mutation.
It contains information about a project to be duplicated.
"""
input CopyProjectInput {
  newProjectId: String
  newProjectIdentifier: String!
  projectIdToCopy: String!
}

"""
MoveProjectInput is the input to the attachProjectToNewRepo mutation.
It contains information used to move a project to a a new owner and repo.
"""
input MoveProjectInput {
  newOwner: String!
  newRepo: String!
  projectId: String! @requireProjectAccess(permission: SETTINGS, access: EDIT)
}

"""
SetLastRevisionInput is the input to the setLastRevision mutation.
It contains information used to fix the repotracker error of a project.
"""
input SetLastRevisionInput {
  projectIdentifier: String!
  revision: String!
}

type SetLastRevisionPayload {
  mergeBaseRevision: String!
}

"""
DeleteGithubAppCredentialsInput is the input to the deleteGithubAppCredentials mutation.
"""
input DeleteGithubAppCredentialsInput {
  projectId: String! @requireProjectAccess(permission: SETTINGS, access: EDIT)
}

"""
DeleteGithubAppCredentialsPayload is returned by the deleteGithubAppCredentials mutation.
"""
type DeleteGithubAppCredentialsPayload {
  oldAppId: Int!
}

input ProjectAliasInput {
  id: String!
  alias: String!
  description: String
  gitTag: String!
  remotePath: String!
  task: String!
  taskTags: [String!]!
  variant: String!
  variantTags: [String!]!
  parameters: [ParameterInput!]
}

input PeriodicBuildInput {
  id: String!
  alias: String!
  configFile: String!
  cron: String
  intervalHours: Int!
  message: String!
  nextRunTime: Time!
}

input ExternalLinkInput {
  displayName: String!
  requesters: [String!]!
  urlTemplate: String!
}

input ParsleyFilterInput {
  caseSensitive: Boolean!
  description: String
  exactMatch: Boolean!
  expression: String!
}

input ProjectBannerInput {
  text: String!
  theme: BannerTheme!
}

input TaskAnnotationSettingsInput {
  fileTicketWebhook: WebhookInput
}

input WebhookInput {
  endpoint: String!
  secret: String! @redactSecrets
}

input BuildBaronSettingsInput {
  bfSuggestionFeaturesURL: String
  bfSuggestionPassword: String
  bfSuggestionServer: String
  bfSuggestionTimeoutSecs: Int
  bfSuggestionUsername: String
  ticketCreateProject: String!
  ticketSearchProjects: [String!]
  ticketCreateIssueType: String
}

input TriggerAliasInput {
  alias: String!
  buildVariantRegex: String!
  configFile: String!
  dateCutoff: Int
  level: String!
  project: String!
  status: String!
  taskRegex: String!
  unscheduleDownstreamVersions: Boolean
}

input ContainerResourcesInput {
  name: String!
  cpu: Int!
  memoryMb: Int!
}

input PatchTriggerAliasInput {
  alias: String!
  childProjectIdentifier: String!
  parentAsModule: String
  status: String
  downstreamRevision: String
  taskSpecifiers: [TaskSpecifierInput!]!
}

input TaskSpecifierInput {
  patchAlias: String!
  taskRegex: String!
  variantRegex: String!
}

input CommitQueueParamsInput {
  enabled: Boolean
  mergeMethod: String
  message: String
}

input WorkstationConfigInput {
  gitClone: Boolean
  setupCommands: [WorkstationSetupCommandInput!]
}

input WorkstationSetupCommandInput {
  command: String!
  directory: String
}

input GitHubDynamicTokenPermissionGroupInput {
  name: String!
  permissions: StringMap!
}

"""
DeactivateStepbackTaskInput is the input to the deactivateStepbackTask mutation.
"""
input DeactivateStepbackTaskInput {
  projectId: String! @requireProjectAccess(permission: SETTINGS, access: EDIT)
  buildVariantName: String!
  taskName: String!
}

"""
DefaultSectionToRepoInput is the input to the defaultSectionToRepo mutation.
"""
input DefaultSectionToRepoInput {
  projectId: String! @requireProjectAccess(permission: SETTINGS, access: EDIT)
  section: ProjectSettingsSection!
}

"""
PromoteVarsToRepoInput is the input to the promoteVarsToRepo mutation.
"""
input PromoteVarsToRepoInput {
  projectId: String! @requireProjectAccess(permission: SETTINGS, access: EDIT)
  varNames: [String!]!
}

input GithubAppAuthInput {
  appId: Int!
  privateKey: String!
}

###### TYPES ######
"""
GroupedProjects is the return value for the projects & viewableProjectRefs queries.
It contains an array of projects which are grouped under a groupDisplayName.
"""
type GroupedProjects {
  groupDisplayName: String!
  projects: [Project!]!
  repo: RepoRef
}

"""
GithubProjectConflicts is the return value for the githubProjectConflicts query.
Its contains information about potential conflicts in the commit checks, the commit queue, and PR testing.
"""
type GithubProjectConflicts {
  commitCheckIdentifiers: [String!]
  commitQueueIdentifiers: [String!]
  prTestingIdentifiers: [String!]
}

###### ENUMS ######
enum BannerTheme {
  ANNOUNCEMENT
  INFORMATION
  WARNING
  IMPORTANT
}

enum ProjectHealthView {
  ALL
  FAILED
}

"""
Project models single repository on GitHub.
"""
type Project {
  id: String!
  admins: [String!]
  banner: ProjectBanner
  batchTime: Int!
  branch: String!
  buildBaronSettings: BuildBaronSettings!
  commitQueue: CommitQueueParams!
  containerSizeDefinitions: [ContainerResources!]
  deactivatePrevious: Boolean
  disabledStatsCache: Boolean
  dispatchingDisabled: Boolean
  displayName: String!
  enabled: Boolean
  externalLinks: [ExternalLink!]
  githubChecksEnabled: Boolean
  githubDynamicTokenPermissionGroups: [GitHubDynamicTokenPermissionGroup!]!
  githubPermissionGroupByRequester: StringMap
  githubTriggerAliases: [String!]
  githubPRTriggerAliases: [String!]
  githubMQTriggerAliases: [String!]
  gitTagAuthorizedTeams: [String!]
  gitTagAuthorizedUsers: [String!]
  gitTagVersionsEnabled: Boolean
  hidden: Boolean
  identifier: String!
  isFavorite: Boolean!
  manualPrTestingEnabled: Boolean
  notifyOnBuildFailure: Boolean
  oldestAllowedMergeBase: String!
  owner: String!
  parsleyFilters: [ParsleyFilter!]
  patches(patchesInput: PatchesInput!): Patches! # project patches
  patchingDisabled: Boolean
  patchTriggerAliases: [PatchTriggerAlias!]
  perfEnabled: Boolean
  periodicBuilds: [PeriodicBuild!]
  projectHealthView: ProjectHealthView!
  prTestingEnabled: Boolean
  remotePath: String!
  repo: String!
  repoRefId: String!
  repotrackerDisabled: Boolean
  repotrackerError: RepotrackerError
  restricted: Boolean
  spawnHostScriptPath: String!
  stepbackDisabled: Boolean
  stepbackBisect: Boolean
  taskAnnotationSettings: TaskAnnotationSettings!
  tracksPushEvents: Boolean
  triggers: [TriggerAlias!]
  versionControlEnabled: Boolean
  workstationConfig: WorkstationConfig!
}

type GitHubDynamicTokenPermissionGroup {
  name: String!
  permissions: StringMap!
}

type RepotrackerError {
  exists: Boolean!
  invalidRevision: String!
  mergeBaseRevision: String!
}

type CommitQueueParams {
  enabled: Boolean
  mergeMethod: String!
  message: String!
}

type WorkstationConfig {
  gitClone: Boolean
  setupCommands: [WorkstationSetupCommand!]
}

type ExternalLink {
  displayName: String!
  requesters: [String!]!
  urlTemplate: String!
}

type ProjectBanner {
  text: String!
  theme: BannerTheme!
}

type ParsleyFilter {
  caseSensitive: Boolean!
  description: String!
  exactMatch: Boolean!
  expression: String!
}

type GithubAppAuth {
  appId: Int
  privateKey: String
}
