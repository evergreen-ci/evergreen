enum ProjectSettingsAccess {
  EDIT
  VIEW
}

enum ProjectSettingsSection {
  GENERAL
  ACCESS
  VARIABLES
  GITHUB_AND_COMMIT_QUEUE
  NOTIFICATIONS
  PATCH_ALIASES
  WORKSTATION
  TRIGGERS
  PERIODIC_BUILDS
  PLUGINS
}

###### INPUTS ######
"""
CreateProjectInput is the input to the createProject mutation.
It contains information about a new project to be created.
"""
input CreateProjectInput {
  id: String
  identifier: String!
  owner: String!
  repo: String!
  repoRefId: String
}

"""
CopyProjectInput is the input to the copyProject mutation.
It contains information about a project to be duplicated.
"""
input CopyProjectInput {
  newProjectId: String
  newProjectIdentifier: String!
  projectIdToCopy: String!
}

"""
MoveProjectInput is the input to the attachProjectToNewRepo mutation.
It contains information used to move a project to a a new owner and repo.
"""
input MoveProjectInput {
  newOwner: String!
  newRepo: String!
  projectId: String! @requireProjectAccess(access: EDIT)
}

"""
ProjectSettingsInput is the input to the saveProjectSettingsForSection mutation.
It contains information about project settings (e.g. Build Baron configurations, subscriptions, etc) and is used to
update the settings for a given project.
"""
input ProjectSettingsInput {
  aliases: [ProjectAliasInput!]
  githubWebhooksEnabled: Boolean
  projectRef: ProjectInput
  subscriptions: [SubscriptionInput!]
  vars: ProjectVarsInput
}

input ProjectInput {
  id: String! @requireProjectAccess(access: EDIT)
  admins: [String!]
  batchTime: Int
  branch: String
  buildBaronSettings: BuildBaronSettingsInput
  cedarTestResultsEnabled: Boolean
  commitQueue: CommitQueueParamsInput
  deactivatePrevious: Boolean
  defaultLogger: String
  disabledStatsCache: Boolean
  dispatchingDisabled: Boolean
  displayName: String
  enabled: Boolean
  filesIgnoredFromCache: [String!]
  githubChecksEnabled: Boolean
  githubTriggerAliases: [String]
  gitTagAuthorizedTeams: [String!]
  gitTagAuthorizedUsers: [String!]
  gitTagVersionsEnabled: Boolean
  identifier: String
  manualPrTestingEnabled: Boolean
  notifyOnBuildFailure: Boolean
  owner: String
  patchingDisabled: Boolean
  patchTriggerAliases: [PatchTriggerAliasInput!]
  perfEnabled: Boolean
  periodicBuilds: [PeriodicBuildInput!]
  private: Boolean
  prTestingEnabled: Boolean
  remotePath: String
  repo: String
  repotrackerDisabled: Boolean
  restricted: Boolean
  spawnHostScriptPath: String
  taskAnnotationSettings: TaskAnnotationSettingsInput
  taskSync: TaskSyncOptionsInput
  tracksPushEvents: Boolean
  triggers: [TriggerAliasInput!]
  versionControlEnabled: Boolean
  workstationConfig: WorkstationConfigInput
}

"""
RepoSettingsInput is the input to the saveRepoSettingsForSection mutation.
It contains information about repo settings (e.g. Build Baron configurations, subscriptions, etc) and is used to
update the settings for a given project.
"""
input RepoSettingsInput {
  aliases: [ProjectAliasInput!]
  githubWebhooksEnabled: Boolean
  projectRef: RepoRefInput ## use the repo ref here in order to have stronger types
  subscriptions: [SubscriptionInput!]
  vars: ProjectVarsInput
}

input RepoRefInput {
  id: String! @requireProjectAccess(access: EDIT)
  admins: [String!]
  batchTime: Int
  branch: String
  buildBaronSettings: BuildBaronSettingsInput
  cedarTestResultsEnabled: Boolean
  commitQueue: CommitQueueParamsInput
  deactivatePrevious: Boolean
  defaultLogger: String
  disabledStatsCache: Boolean
  dispatchingDisabled: Boolean
  displayName: String
  enabled: Boolean
  filesIgnoredFromCache: [String!]
  githubChecksEnabled: Boolean
  githubTriggerAliases: [String!]
  gitTagAuthorizedTeams: [String!]
  gitTagAuthorizedUsers: [String!]
  gitTagVersionsEnabled: Boolean
  manualPrTestingEnabled: Boolean
  notifyOnBuildFailure: Boolean
  owner: String
  patchingDisabled: Boolean
  patchTriggerAliases: [PatchTriggerAliasInput!]
  perfEnabled: Boolean
  periodicBuilds: [PeriodicBuildInput!]
  private: Boolean
  prTestingEnabled: Boolean
  remotePath: String
  repo: String
  repotrackerDisabled: Boolean
  restricted: Boolean
  spawnHostScriptPath: String
  taskAnnotationSettings: TaskAnnotationSettingsInput
  taskSync: TaskSyncOptionsInput
  tracksPushEvents: Boolean
  triggers: [TriggerAliasInput!]
  versionControlEnabled: Boolean
  workstationConfig: WorkstationConfigInput
}

input ProjectVarsInput {
  adminOnlyVarsList: [String]
  privateVarsList: [String]
  vars: StringMap
}

input ProjectAliasInput {
  id: String!
  alias: String!
  gitTag: String!
  remotePath: String!
  task: String!
  taskTags: [String!]!
  variant: String!
  variantTags: [String!]!
}

input TaskSyncOptionsInput {
  configEnabled: Boolean
  patchEnabled: Boolean
}

input PeriodicBuildInput {
  id: String!
  alias: String!
  configFile: String!
  intervalHours: Int!
  message: String!
  nextRunTime: Time!
}

input TaskAnnotationSettingsInput {
  fileTicketWebhook: WebhookInput
  jiraCustomFields: [JiraFieldInput!]
}

input JiraFieldInput {
  displayText: String!
  field: String!
}

input WebhookInput {
  endpoint: String!
  secret: String!
}

input BuildBaronSettingsInput {
  bfSuggestionFeaturesURL: String
  bfSuggestionPassword: String
  bfSuggestionServer: String
  bfSuggestionTimeoutSecs: Int
  bfSuggestionUsername: String
  ticketCreateProject: String!
  ticketSearchProjects: [String!]
}

input TriggerAliasInput {
  alias: String!
  buildVariantRegex: String!
  configFile: String!
  dateCutoff: Int!
  level: String!
  project: String!
  status: String!
  taskRegex: String!
}

input PatchTriggerAliasInput {
  alias: String!
  childProjectIdentifier: String!
  parentAsModule: String
  status: String
  taskSpecifiers: [TaskSpecifierInput!]!
}

input TaskSpecifierInput {
  patchAlias: String!
  taskRegex: String!
  variantRegex: String!
}

input CommitQueueParamsInput {
  enabled: Boolean
  mergeMethod: String
  message: String
  requireSigned: Boolean
}

input WorkstationConfigInput {
  gitClone: Boolean
  setupCommands: [WorkstationSetupCommandInput!]
}

input WorkstationSetupCommandInput {
  command: String!
  directory: String
}


###### TYPES ######
"""
GroupedProjects is the return value for the projects & viewableProjectRefs queries.
It contains an array of projects which are grouped under a groupDisplayName.
"""
type GroupedProjects {
  groupDisplayName: String! 
  name: String! @deprecated(reason: "name is deprecated. Use groupDisplayName instead.")
  projects: [Project!]!
  repo: RepoRef
}

"""
GithubProjectConflicts is the return value for the githubProjectConflicts query.
Its contains information about potential conflicts in the commit checks, the commit queue, and PR testing. 
"""
type GithubProjectConflicts {
  commitCheckIdentifiers: [String!]
  commitQueueIdentifiers: [String!]
  prTestingIdentifiers: [String!]
}

"""
Project models single repository on GitHub.
"""
type Project {
  id: String!
  admins: [String]
  batchTime: Int!
  branch: String!
  buildBaronSettings: BuildBaronSettings!
  cedarTestResultsEnabled: Boolean
  commitQueue: CommitQueueParams!
  deactivatePrevious: Boolean
  defaultLogger: String!
  disabledStatsCache: Boolean
  dispatchingDisabled: Boolean
  displayName: String!
  enabled: Boolean
  filesIgnoredFromCache: [String!]
  githubChecksEnabled: Boolean
  githubTriggerAliases: [String!]
  gitTagAuthorizedTeams: [String!]
  gitTagAuthorizedUsers: [String!]
  gitTagVersionsEnabled: Boolean
  hidden: Boolean
  identifier: String!
  isFavorite: Boolean!
  manualPrTestingEnabled: Boolean
  notifyOnBuildFailure: Boolean
  owner: String!
  patchingDisabled: Boolean
  patchTriggerAliases: [PatchTriggerAlias!]
  perfEnabled: Boolean
  periodicBuilds: [PeriodicBuild!]
  private: Boolean
  prTestingEnabled: Boolean
  remotePath: String!
  repo: String!
  repoRefId: String!
  repotrackerDisabled: Boolean
  restricted: Boolean
  spawnHostScriptPath: String!
  taskAnnotationSettings: TaskAnnotationSettings!
  taskSync: TaskSyncOptions!
  tracksPushEvents: Boolean
  triggers: [TriggerAlias!]
  validDefaultLoggers: [String!]!
  versionControlEnabled: Boolean
  workstationConfig: WorkstationConfig!
}

type CommitQueueParams {
  enabled: Boolean
  mergeMethod: String!
  message: String!
  requireSigned: Boolean
}

type TaskSyncOptions {
  configEnabled: Boolean
  patchEnabled: Boolean
}

type WorkstationConfig {
  gitClone: Boolean
  setupCommands: [WorkstationSetupCommand!]
}

"""
ProjectSettings models the settings for a given Project.
"""
type ProjectSettings {
  aliases: [ProjectAlias!]
  githubWebhooksEnabled: Boolean!
  projectRef: Project
  subscriptions: [ProjectSubscription!]
  vars: ProjectVars
}

type ProjectSubscription {
  id: String!
  ownerType: String!
  regexSelectors: [Selector!]!
  resourceType: String!
  selectors: [Selector!]!
  subscriber: ProjectSubscriber
  trigger: String!
  triggerData: StringMap
 }

type Selector {
  data: String!
  type: String!
}

"""
RepoRef is technically a special kind of Project.
Repo types have booleans defaulted, which is why it is necessary to redeclare the types despite them matching nearly
exactly.
"""
type RepoRef {
  id: String!
  admins: [String!]!
  batchTime: Int!
  branch: String!
  buildBaronSettings: BuildBaronSettings!
  cedarTestResultsEnabled: Boolean!
  commitQueue: RepoCommitQueueParams!
  deactivatePrevious: Boolean!
  defaultLogger: String!
  disabledStatsCache: Boolean!
  dispatchingDisabled: Boolean!
  displayName: String!
  enabled: Boolean!
  filesIgnoredFromCache: [String!]
  githubChecksEnabled: Boolean!
  githubTriggerAliases: [String!]
  gitTagAuthorizedTeams: [String!]
  gitTagAuthorizedUsers: [String!]
  gitTagVersionsEnabled: Boolean!
  manualPrTestingEnabled: Boolean!
  notifyOnBuildFailure: Boolean!
  owner: String!
  patchingDisabled: Boolean!
  patchTriggerAliases: [PatchTriggerAlias!]
  perfEnabled: Boolean!
  periodicBuilds: [PeriodicBuild!]
  private: Boolean!
  prTestingEnabled: Boolean!
  remotePath: String!
  repo: String!
  repotrackerDisabled: Boolean!
  restricted: Boolean!
  spawnHostScriptPath: String!
  taskAnnotationSettings: TaskAnnotationSettings!
  taskSync: RepoTaskSyncOptions!
  tracksPushEvents: Boolean!
  triggers: [TriggerAlias!]!
  validDefaultLoggers: [String!]!
  versionControlEnabled: Boolean!
  workstationConfig: RepoWorkstationConfig!
}

type RepoCommitQueueParams {
  enabled: Boolean!
  mergeMethod: String!
  message: String!
  requireSigned: Boolean!
}

type RepoTaskSyncOptions {
  configEnabled: Boolean!
  patchEnabled: Boolean!
}

type RepoWorkstationConfig {
  gitClone: Boolean!
  setupCommands: [WorkstationSetupCommand!]
}

type WorkstationSetupCommand {
  command: String!
  directory: String!
}

# shared by Project and RepoRef
type TriggerAlias {
  alias: String!
  buildVariantRegex: String!
  configFile: String!
  dateCutoff: Int!
  level: String!
  project: String!
  status: String!
  taskRegex: String!
}

# shared by Project and RepoRef
type PeriodicBuild {
  id: String!
  alias: String!
  configFile: String!
  intervalHours: Int!
  message: String!
  nextRunTime: Time!
}

# shared by Project and RepoRef
type BuildBaronSettings {
  bfSuggestionFeaturesURL: String
  bfSuggestionPassword: String
  bfSuggestionServer: String
  bfSuggestionTimeoutSecs: Int
  bfSuggestionUsername: String
  ticketCreateProject: String!
  ticketSearchProjects: [String!]
}

# shared by Project and RepoRef
type TaskAnnotationSettings {
  fileTicketWebhook: Webhook!
  jiraCustomFields: [JiraField!]
}

type JiraField {
  displayText: String!
  field: String!
}

type Webhook {
  endpoint: String!
  secret: String!
}

"""
RepoSettings models the settings for a given RepoRef.
"""
type RepoSettings {
  aliases: [ProjectAlias!]
  githubWebhooksEnabled: Boolean!
  projectRef: RepoRef ## use the repo ref here in order to have stronger types
  subscriptions: [ProjectSubscription!]
  vars: ProjectVars
}

"""
ProjectSubscriber defines the subscriptions for a given Project. For example, a project could have Slack notifications
enabled that trigger whenever any version finishes.
"""
type ProjectSubscriber {
  subscriber: Subscriber!
  type: String!
}

type Subscriber {
  emailSubscriber: String
  githubCheckSubscriber: GithubCheckSubscriber
  githubPRSubscriber: GithubPRSubscriber
  jiraCommentSubscriber: String
  jiraIssueSubscriber: JiraIssueSubscriber
  slackSubscriber: String
  webhookSubscriber: WebhookSubscriber
}

type GithubPRSubscriber {
  owner: String!
  prNumber: Int
  ref: String!
  repo: String!
}

type GithubCheckSubscriber {
  owner: String!
  ref: String!
  repo: String!
}

type WebhookSubscriber {
  headers: [WebhookHeader]!
  secret: String!
  url: String!
}

type WebhookHeader {
  key: String!
  value: String!
}

type JiraIssueSubscriber {
  issueType: String!
  project: String!
}


"""
ProjectEvents contains project event log entries that concern the history of changes related to project
settings.
Although RepoSettings uses RepoRef in practice to have stronger types, this can't be enforced
or event logs because new fields could always be introduced that don't exist in the old event logs.
"""
type ProjectEvents {
  count: Int!
  eventLogEntries: [ProjectEventLogEntry!]!
}

type ProjectEventLogEntry {
  after: ProjectEventSettings
  before: ProjectEventSettings
  timestamp: Time!
  user: String!
}

type ProjectEventSettings{
  aliases: [ProjectAlias!]
  githubWebhooksEnabled: Boolean!
  projectRef: Project
  subscriptions: [ProjectSubscription!]
  vars: ProjectVars
}

type ProjectVars {
  adminOnlyVars: [String]
  privateVars: [String]
  vars: StringMap
}

type ProjectAlias {
  id: String!
  alias: String!
  gitTag: String!
  remotePath: String!
  task: String!
  taskTags: [String!]!
  variant: String!
  variantTags: [String!]!
}
