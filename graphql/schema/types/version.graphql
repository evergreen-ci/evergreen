###### INPUTS ######
"""
VersionToRestart is the input to the restartVersions mutation.
It contains an array of taskIds to restart for a given versionId.
"""
input VersionToRestart {
  versionId: String!
  taskIds: [String!]!
}

"""
BuildVariantOptions is an input to the mainlineCommits query.
It stores values for statuses, tasks, and variants which are used to filter for matching versions.
"""
input BuildVariantOptions {
  includeBaseTasks: Boolean
  statuses: [String!]
  tasks: [String!]
  variants: [String!]
}

"""
MainlineCommitsOptions is an input to the mainlineCommits query.
Its fields determine what mainline commits we fetch for a given projectID.
"""
input MainlineCommitsOptions {
  limit: Int = 7
  projectID: String!
  requesters: [String!]
  shouldCollapse: Boolean = false # used to determine if unmatching active versions should be collapsed
  skipOrderNumber: Int = 0
}

###### TYPES ######
"""
Version models a commit within a project.
"""
type Version {
  id: String!
  activated: Boolean
  author: String!
  baseTaskStatuses: [String!]!
  baseVersion: Version
  branch: String!
  buildVariants(options: BuildVariantOptions): [GroupedBuildVariant]
  buildVariantStats(options: BuildVariantOptions): [GroupedTaskStatusCount!]
  childVersions: [Version]
  createTime: Time!
  finishTime: Time
  isPatch: Boolean!
  manifest: Manifest
  message: String!
  order: Int!
  parameters: [Parameter!]!
  patch: Patch
  previousVersion: Version
  project: String!
  projectIdentifier: String!
  projectMetadata: Project
  repo: String!
  requester: String!
  revision: String!
  startTime: Time
  status: String!
  taskCount: Int
  taskStatusCounts(options: BuildVariantOptions): [StatusCount!] @deprecated(reason: "Use taskStatusStats instead")
  taskStatuses: [String!]!
  taskStatusStats(options: BuildVariantOptions): TaskStats
  upstreamProject: UpstreamProject
  versionTiming: VersionTiming
}

type TaskStats {
  counts: [StatusCount!]
  eta: Time
}

# deprecated field
type StatusCount { 
  count: Int!
  status: String!
}

type GroupedBuildVariant {
  displayName: String!
  tasks: [Task]
  variant: String!
}

type GroupedTaskStatusCount {
  displayName: String!
  statusCounts: [StatusCount!]!
  variant: String!
}

type VersionTiming {
  makespan: Duration
  timeTaken: Duration
}

type Manifest {
  id: String!
  branch: String!
  isBase: Boolean!
  moduleOverrides: StringMap
  modules: Map
  project: String!
  revision: String!
}

type UpstreamProject {
  owner: String!
  project: String!
  repo: String!
  resourceID: String! # ID of the UI linkable resource that triggered the upstream version (corresponds to a task ID or version ID)
  revision: String!
  task: Task
  triggerID: String! # ID of the trigger that created the upstream version (corresponds to a task ID or build ID)
  triggerType: String!
  version: Version
}

"""
MainlineCommits is returned by the mainline commits query.
It contains information about versions (both unactivated and activated) which is surfaced on the Project Health page.
"""
type MainlineCommits {
  nextPageOrderNumber: Int # represents the last order number returned and is used for pagination
  prevPageOrderNumber: Int # represents the order number of the previous page and is also used for pagination
  versions: [MainlineCommitVersion!]! # array of unactivated and activated versions
}

type MainlineCommitVersion {
  rolledUpVersions: [Version!]
  version: Version
}

type BuildVariantTuple {
  buildVariant: String!
  displayName: String!
}

"""
CommitQueue is returned by the commitQueue query.
It contains information about the patches on the commit queue (e.g. author, code changes) for a given project.
"""
type CommitQueue {
  message: String
  owner: String
  projectId: String
  queue: [CommitQueueItem!]
  repo: String
}

type CommitQueueItem {
  enqueueTime: Time
  issue: String
  modules: [Module!]
  patch: Patch
  source: String
  version: String
}

type Module {
  issue: String
  module: String
}



