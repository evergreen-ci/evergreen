###### ENUMS ######
enum DistroSettingsAccess {
  ADMIN
  CREATE
  EDIT
  VIEW
}

enum DistroOnSaveOperation {
  DECOMMISSION
  RESTART_JASPER
  REPROVISION
  NONE
}

enum CloneMethod {
  LEGACY_SSH
  OAUTH
}

enum FinderVersion {
  LEGACY
  PARALLEL
  PIPELINE
  ALTERNATE
}

enum PlannerVersion {
  LEGACY
  TUNABLE
}

enum Provider {
  DOCKER
  EC2_FLEET
  EC2_ON_DEMAND
  STATIC
}

enum DispatcherVersion {
  REVISED
  REVISED_WITH_DEPENDENCIES
}

enum HostAllocatorVersion {
  UTILIZATION
}

enum RoundingRule {
  DOWN
  UP
  DEFAULT
}

enum FeedbackRule {
  WAITS_OVER_THRESH
  NO_FEEDBACK
  DEFAULT
}

enum OverallocatedRule {
  TERMINATE
  IGNORE
  DEFAULT
}

enum Arch {
  LINUX_64_BIT
  LINUX_ARM_64_BIT
  LINUX_PPC_64_BIT
  LINUX_ZSERIES
  OSX_64_BIT
  OSX_ARM_64_BIT
  WINDOWS_64_BIT
}

enum CommunicationMethod {
  LEGACY_SSH
  SSH
  RPC
}

enum BootstrapMethod {
  LEGACY_SSH
  SSH
  USER_DATA
}

###### INPUTS ######
"""
CopyDistroInput is the input to the copyDistro mutation.
It contains information about a distro to be duplicated.
"""
input CopyDistroInput {
  newDistroId: String!
  distroIdToCopy: String!
}

"""
CreateDistroInput is the input to the createDistro mutation.
"""
input CreateDistroInput {
  newDistroId: String!
}

"""
DeleteDistroInput is the input to the deleteDistro mutation.
"""
input DeleteDistroInput {
  distroId: String! @requireDistroAccess(access: ADMIN)
}

"""
DistroEventsInput is the input to the distroEvents query.
"""
input DistroEventsInput {
  before: Time
  distroId: String! @requireDistroAccess(access: VIEW)
  limit: Int
}

"""
SaveDistroInput is the input to the saveDistro mutation.
"""
input SaveDistroInput {
  distro: DistroInput!
  onSave: DistroOnSaveOperation!
}

input DistroInput {
  aliases: [String!]!
  arch: Arch!
  authorizedKeysFile: String!
  bootstrapSettings: BootstrapSettingsInput!
  cloneMethod: CloneMethod!
  containerPool: String!
  disabled: Boolean!
  disableShallowClone: Boolean!
  dispatcherSettings: DispatcherSettingsInput!
  expansions: [ExpansionInput!]!
  finderSettings: FinderSettingsInput!
  homeVolumeSettings: HomeVolumeSettingsInput!
  hostAllocatorSettings: HostAllocatorSettingsInput!
  iceCreamSettings: IceCreamSettingsInput!
  isCluster: Boolean!
  isVirtualWorkStation: Boolean!
  name: String! @requireDistroAccess(access: EDIT)
  note: String!
  plannerSettings: PlannerSettingsInput!
  provider: Provider!
  providerSettingsList: [Map!]!
  setup: String!
  setupAsSudo: Boolean!
  sshKey: String!
  sshOptions: [String!]!
  user: String!
  userSpawnAllowed: Boolean!
  validProjects: [String!]!
  workDir: String!
}

input BootstrapSettingsInput {
  clientDir: String!
  communication: CommunicationMethod!
  env: [EnvVarInput!]!
  jasperBinaryDir: String!
  jasperCredentialsPath: String!
  method: BootstrapMethod!
  preconditionScripts: [PreconditionScriptInput!]!
  resourceLimits: ResourceLimitsInput!
  rootDir: String!
  serviceUser: String!
  shellPath: String!
}

input DispatcherSettingsInput {
  version: DispatcherVersion!
}

input EnvVarInput {
  key: String!
  value: String!
}

input ExpansionInput {
  key: String!
  value: String!
}

input FinderSettingsInput {
  version: FinderVersion!
}

input HomeVolumeSettingsInput {
  formatCommand: String!
}

input HostAllocatorSettingsInput {
  acceptableHostIdleTime: Int!
  feedbackRule: FeedbackRule!
  futureHostFraction: Float!
  hostsOverallocatedRule: OverallocatedRule!
  maximumHosts: Int!
  minimumHosts: Int!
  roundingRule: RoundingRule!
  version: HostAllocatorVersion!
}

input IceCreamSettingsInput {
  configPath: String!
  schedulerHost: String!
}

input PlannerSettingsInput {
  commitQueueFactor: Int!
  expectedRuntimeFactor: Int!
  generateTaskFactor: Int!
  groupVersions: Boolean!
  mainlineTimeInQueueFactor: Int!
  patchFactor: Int!
  patchTimeInQueueFactor: Int!
  targetTime: Int!
  version: PlannerVersion!
}

input PreconditionScriptInput {
  path: String!
  script: String!
}

input ResourceLimitsInput {
  lockedMemoryKb: Int!
  numFiles: Int!
  numProcesses: Int!
  numTasks: Int!
  virtualMemoryKb: Int!
}

###### TYPES ######
"""
Return type representing whether a distro was created and any validation errors
"""
type NewDistroPayload {
  newDistroId: String!
}

"""
Return type representing whether a distro was deleted.
"""
type DeleteDistroPayload {
  deletedDistroId: String!
}


type DistroEvent {
  after: Map
  before: Map
  data: Map
  timestamp: Time!
  user: String!
}

type DistroEventsPayload {
  count: Int!
  eventLogEntries: [DistroEvent!]!
}

"""
Return type representing the updated distro and the number of hosts that were updated.
"""
type SaveDistroPayload {
  distro: Distro!
  hostCount: Int!
}

"""
Distro models an environment configuration for a host.
"""
type Distro {
  aliases: [String!]!
  arch: Arch!
  authorizedKeysFile: String!
  bootstrapSettings: BootstrapSettings!
  cloneMethod: CloneMethod!
  containerPool: String!
  disabled: Boolean!
  disableShallowClone: Boolean!
  dispatcherSettings: DispatcherSettings!
  expansions: [Expansion!]!
  finderSettings: FinderSettings!
  homeVolumeSettings: HomeVolumeSettings!
  hostAllocatorSettings: HostAllocatorSettings!
  iceCreamSettings: IceCreamSettings!
  isCluster: Boolean!
  isVirtualWorkStation: Boolean!
  name: String!
  note: String!
  plannerSettings: PlannerSettings!
  provider: Provider!
  providerSettingsList: [Map!]!
  setup: String!
  setupAsSudo: Boolean!
  sshKey: String!
  sshOptions: [String!]!
  user: String!
  userSpawnAllowed: Boolean!
  validProjects: [String]!
  workDir: String!
}

type BootstrapSettings {
  clientDir: String!
  communication: CommunicationMethod!
  env: [EnvVar!]!
  jasperBinaryDir: String!
  jasperCredentialsPath: String!
  method: BootstrapMethod!
  preconditionScripts: [PreconditionScript!]!
  resourceLimits: ResourceLimits!
  rootDir: String!
  serviceUser: String!
  shellPath: String!
}

type DispatcherSettings {
  version: DispatcherVersion!
}

type EnvVar {
  key: String!
  value: String!
}

type Expansion {
  key: String!
  value: String!
}

type FinderSettings {
  version: FinderVersion!
}

type HomeVolumeSettings {
  formatCommand: String!
}

type HostAllocatorSettings {
  acceptableHostIdleTime: Duration!
  feedbackRule: FeedbackRule!
  futureHostFraction: Float!
  hostsOverallocatedRule: OverallocatedRule!
  maximumHosts: Int!
  minimumHosts: Int!
  roundingRule: RoundingRule!
  version: HostAllocatorVersion!
}

type IceCreamSettings {
  configPath: String!
  schedulerHost: String!
}

type PlannerSettings {
  commitQueueFactor: Int!
  expectedRuntimeFactor: Int!
  generateTaskFactor: Int!
  groupVersions: Boolean!
  mainlineTimeInQueueFactor: Int!
  patchFactor: Int!
  patchTimeInQueueFactor: Int!
  targetTime: Duration!
  version: PlannerVersion!
}

type PreconditionScript {
  path: String!
  script: String!
}

type ResourceLimits {
  lockedMemoryKb: Int!
  numFiles: Int!
  numProcesses: Int!
  numTasks: Int!
  virtualMemoryKb: Int!
}

