enum TestSortCategory {
  BASE_STATUS
  STATUS
  START_TIME
  DURATION
  TEST_NAME
}

###### INPUTS ######
"""
TestFilterOptions is an input for the task.Tests query.
It's used to filter, sort, and paginate test results of a task.
"""
input TestFilterOptions {
  testName: String
  excludeDisplayNames: Boolean
  statuses: [String!]
  groupID: String
  sort: [TestSortOptions!]
  limit: Int
  page: Int
}

"""
TestSortOptions is an input for the task.Tests query.
It's used to define sort criteria for test results of a task.
"""
input TestSortOptions {
  sortBy: TestSortCategory!
  direction: SortDirection!
}

"""
TestFilter is an input value for the taskTestSample query.
It's used to filter for tests with testName and status testStatus.
"""
input TestFilter {
  testName: String!
  testStatus: String!
}

input TaskPriority {
  taskId: String! @requireProjectAccess(permission: TASKS, access: EDIT)
  priority: Int!
}

###### TYPES ######
"""
Task models a task, the simplest unit of execution for Evergreen.
"""
type Task {
  aborted: Boolean!
  abortInfo: AbortInfo
  activated: Boolean!
  activatedBy: String
  activatedTime: Time
  ami: String
  annotation: Annotation
  id: String!
  """
  This is a base task's display status.
  """
  baseStatus: String
  baseTask: Task
  blocked: Boolean!
  buildId: String!
  buildVariant: String!
  buildVariantDisplayName: String
  canAbort: Boolean!
  canDisable: Boolean!
  canModifyAnnotation: Boolean!
  canOverrideDependencies: Boolean!
  canRestart: Boolean!
  canSchedule: Boolean!
  canSetPriority: Boolean!
  canUnschedule: Boolean!
  containerAllocatedTime: Time
  createTime: Time
  dependsOn: [Dependency!]
  details: TaskEndDetail
  dispatchTime: Time
  displayName: String!
  """
  This is a task's display status and is what is commonly used on the UI.
  """
  displayOnly: Boolean
  displayStatus: String!
  displayTask: Task
  distroId: String!
  estimatedStart: Duration
  execution: Int!
  executionTasks: [String!]
  executionTasksFull: [Task!]
  expectedDuration: Duration
  failedTestCount: Int!
  files: TaskFiles!
  finishTime: Time
  generatedBy: String
  generatedByName: String
  generateTask: Boolean
  hasTestResults: Boolean!
  hostId: String
  imageId: String!
  ingestTime: Time
  isPerfPluginEnabled: Boolean!
  latestExecution: Int!
  logs: TaskLogLinks!
  minQueuePosition: Int!
  order: Int!
  patch: Patch
  patchNumber: Int
  pod: Pod
  priority: Int
  project: Project
  projectId: String!
  projectIdentifier: String
  requester: String!
  resetWhenFinished: Boolean!
  revision: String
  scheduledTime: Time
  spawnHostLink: String
  startTime: Time
  """
  This is a task's original status. It is the status stored in the database, and is distinct from the displayStatus.
  """
  status: String!
  tags: [String!]!
  taskGroup: String
  taskGroupMaxHosts: Int
  """
  taskLogs returns the tail 100 lines of the task's logs.
  """
  stepbackInfo: StepbackInfo
  taskLogs: TaskLogs!
  taskOwnerTeam: TaskOwnerTeam
  tests(opts: TestFilterOptions): TaskTestResult!
  timeTaken: Duration
  totalTestCount: Int!
  versionMetadata: Version!
}

type AbortInfo {
  buildVariantDisplayName: String!
  newVersion: String!
  prClosed: Boolean!
  taskDisplayName: String!
  taskID: String!
  user: String!
}

type Dependency {
  buildVariant: String!
  metStatus: MetStatus!
  name: String!
  requiredStatus: RequiredStatus!
  taskId: String!
}

enum MetStatus {
  UNMET
  MET
  PENDING
  STARTED
}

enum RequiredStatus {
  MUST_FAIL
  MUST_FINISH
  MUST_SUCCEED
}

type TaskEndDetail {
  description: String
  diskDevices: [String!]!
  failingCommand: String
  failureMetadataTags: [String!]!
  oomTracker: OomTrackerInfo!
  status: String!
  timedOut: Boolean
  timeoutType: String
  traceID: String
  type: String!
}

type OomTrackerInfo {
  detected: Boolean!
  pids: [Int!]
}

type TaskLogLinks {
  agentLogLink: String
  allLogLink: String
  eventLogLink: String
  systemLogLink: String
  taskLogLink: String
}

type StepbackInfo {
  lastFailingStepbackTaskId: String
  lastPassingStepbackTaskId: String
  nextStepbackTaskId: String
  previousStepbackTaskId: String
}

"""
TaskFiles is the return value for the taskFiles query.
Some tasks generate files which are represented by this type.
"""
type TaskFiles {
  fileCount: Int!
  groupedFiles: [GroupedFiles!]!
}


type GroupedFiles {
  files: [File!]
  taskName: String
  taskId: String!
  execution: Int!
}

type File {
  link: String!
  name: String!
  urlParsley: String
  visibility: String!
}

"""
TaskTestResult is the return value for the task.Tests resolver.
It contains the test results for a task. For example, if there is a task to run all unit tests, then the test results
could be the result of each individual unit test.
"""
type TaskTestResult {
  testResults: [TestResult!]!
  totalTestCount: Int!
  filteredTestCount: Int!
}

type TestResult {
  id: String!
  baseStatus: String
  duration: Float
  endTime: Time
  execution: Int
  exitCode: Int
  groupID: String
  logs: TestLog!
  startTime: Time
  status: String!
  taskId: String
  testFile: String!
}

type TestLog {
  lineNum: Int
  url: String
  urlParsley: String
  urlRaw: String
  renderingType: String
  version: Int
}

"""
TaskTestResultSample is the return value for the taskTestSample query.
It is used to represent failing test results on the task history pages.
"""
type TaskTestResultSample {
  execution: Int!
  matchingFailedTestNames: [String!]!
  taskId: String!
  totalTestCount: Int!
}

"""
TaskOwnerTeam is the return value for the taskOwnerTeam query.
It is used to identify the team that owns a task. Based on the FWS team assignment.
"""
type TaskOwnerTeam {
  assignmentType: String!
  messages: String!
  teamName: String!
  jiraProject: String!
}
