input AWSAccountRoleMappingInput {
  account: String! @redactSecrets
  role: String! @redactSecrets
}

type AWSAccountRoleMapping {
  account: String! @requireAdmin
  role: String! @requireAdmin
}

input AWSConfigInput {
  ec2Keys: [EC2KeyInput!]! @redactSecrets
  subnets: [SubnetInput!]!
  parserProject: ParserProjectS3ConfigInput @redactSecrets
  persistentDNS: PersistentDNSConfigInput
  defaultSecurityGroup: String @redactSecrets
  allowedInstanceTypes: [String!]!
  alertableInstanceTypes: [String!]!
  allowedRegions: [String!]!
  maxVolumeSizePerUser: Int
  pod: AWSPodConfigInput
  accountRoles: [AWSAccountRoleMappingInput!]! @redactSecrets
  ipamPoolID: String
  elasticIPUsageRate: Float
}

type AWSConfig {
  ec2Keys: [EC2Key!]! @requireAdmin
  subnets: [Subnet!]!
  parserProject: ParserProjectS3Config @requireAdmin
  persistentDNS: PersistentDNSConfig
  defaultSecurityGroup: String @requireAdmin
  allowedInstanceTypes: [String!]!
  alertableInstanceTypes: [String!]!
  allowedRegions: [String!]!
  maxVolumeSizePerUser: Int
  pod: AWSPodConfig
  accountRoles: [AWSAccountRoleMapping!]! @requireAdmin
  ipamPoolID: String
  elasticIPUsageRate: Float
}

input AWSPodConfigInput {
  role: String @redactSecrets
  region: String
  ecs: ECSConfigInput
  secretsManager: SecretsManagerConfigInput
}

type AWSPodConfig {
  role: String @requireAdmin
  region: String
  ecs: ECSConfig
  secretsManager: SecretsManagerConfig
}

input AWSVPCConfigInput {
  subnets: [String!]!
  securityGroups: [String!]! @redactSecrets
}

type AWSVPCConfig {
  subnets: [String!]!
  securityGroups: [String!]! @requireAdmin
}

input CloudProviderConfigInput {
  aws: AWSConfigInput
  docker: DockerConfigInput
}

type CloudProviderConfig {
  aws: AWSConfig
  docker: DockerConfig
}

input ContainerPoolInput {
  id: String!
  distro: String!
  maxContainers: Int!
  port: Int!
}

type ContainerPool {
  id: String!
  distro: String!
  maxContainers: Int!
  port: Int!
}

input ContainerPoolsConfigInput {
  pools: [ContainerPoolInput!]!
}

type ContainerPoolsConfig {
  pools: [ContainerPool!]!
}

input DockerConfigInput {
  apiVersion: String
}

type DockerConfig {
  apiVersion: String
}

input EC2KeyInput {
  name: String!
  key: String! 
  secret: String! @redactSecrets
}

type EC2Key {
  name: String!
  key: String! 
  secret: String! @requireAdmin
}

input ECSConfigInput {
  maxCPU: Int
  maxMemoryMb: Int
  taskDefinitionPrefix: String
  taskRole: String
  executionRole: String
  logRegion: String
  logGroup: String
  logStreamPrefix: String
  awsVPC: AWSVPCConfigInput
  clusters: [ECSClusterConfigInput!]!
  capacityProviders: [ECSCapacityProviderInput!]!
  allowedImages: [String!]!
}

type ECSConfig {
  maxCPU: Int
  maxMemoryMb: Int
  taskDefinitionPrefix: String
  taskRole: String
  executionRole: String
  logRegion: String
  logGroup: String
  logStreamPrefix: String
  awsVPC: AWSVPCConfig
  clusters: [ECSClusterConfig!]!
  capacityProviders: [ECSCapacityProvider!]!
  allowedImages: [String!]!
}

enum ECSOperatingSystem {
  ECSOSLinux
  ECSOSWindows
}

enum ECSArchitecture {
  ECS_ARCH_AMD64
  ECS_ARCH_ARM64
}

enum ECSWindowsVersion {
  ECS_WINDOWS_SERVER_2016
  ECS_WINDOWS_SERVER_2019
  ECS_WINDOWS_SERVER_2022
}

input ECSCapacityProviderInput {
  name: String
  os: ECSOperatingSystem
  arch: ECSArchitecture
  windowsVersion: ECSWindowsVersion
}

type ECSCapacityProvider {
  name: String
  os: ECSOperatingSystem
  arch: ECSArchitecture
  windowsVersion: ECSWindowsVersion
}

input ECSClusterConfigInput {
  name: String
  os: ECSOperatingSystem
}

type ECSClusterConfig {
  name: String
  os: ECSOperatingSystem
}

input OwnerRepoInput {
  owner: String!
  repo: String!
}

type OwnerRepo {
  owner: String!
  repo: String!
}

input ParameterStoreConfigInput {
  prefix: String
}

type ParameterStoreConfig {
  prefix: String
}

input ParserProjectS3ConfigInput {
  key: String 
  secret: String! @redactSecrets
  bucket: String
  prefix: String
  generatedJSONPrefix: String
}

type ParserProjectS3Config {
  key: String 
  secret: String! @requireAdmin
  bucket: String
  prefix: String
  generatedJSONPrefix: String
}

input PersistentDNSConfigInput {
  hostedZoneID: String
  domain: String
}

type PersistentDNSConfig {
  hostedZoneID: String
  domain: String
}

input ProjectCreationConfigInput {
  totalProjectLimit: Int
  repoProjectLimit: Int
  repoExceptions: [OwnerRepoInput!]!
  jiraProject: String
}

type ProjectCreationConfig {
  totalProjectLimit: Int
  repoProjectLimit: Int
  repoExceptions: [OwnerRepo!]!
  jiraProject: String
}

input SecretsManagerConfigInput {
  secretPrefix: String @redactSecrets
}

type SecretsManagerConfig {
  secretPrefix: String @requireAdmin
}

input SubnetInput {
  az: String!
  subnetId: String!
}

type Subnet {
  az: String!
  subnetId: String!
}
