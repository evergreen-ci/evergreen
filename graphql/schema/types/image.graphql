###### ENUMS ######
enum ImageEventType {
  OPERATING_SYSTEM
  PACKAGE
  TOOLCHAIN
  FILE
}

enum ImageEventEntryAction {
  ADDED
  UPDATED
  DELETED
}

###### INPUTS ######
input OperatingSystemOpts {
  name: String
  limit: Int
  page: Int
}

input PackageOpts {
  name: String
  manager: String
  limit: Int
  page: Int
}

input ToolchainOpts {
  name: String
  limit: Int
  page: Int
}

input ImageFileOpts {
  name: String
  limit: Int
  page: Int
}

###### TYPES ######
"""
Image is returned by the image query.
It contains information about an image.
"""
type Image {
  id: String!
  ami: String!
  distros: [Distro!]!
  events(limit: Int!, page: Int!): ImageEventsPayload!
  files(opts: ImageFileOpts!): ImageFilesPayload!
  lastDeployed: Time!
  latestTask: Task
  operatingSystem(opts: OperatingSystemOpts!): ImageOperatingSystemPayload!
  packages(opts: PackageOpts!): ImagePackagesPayload!
  toolchains(opts: ToolchainOpts!): ImageToolchainsPayload!
}

type ImageOperatingSystemPayload {
  data: [OSInfo!]!
  filteredCount: Int!
  totalCount: Int!
}

type OSInfo {
  name: String!
  version: String!
}

type ImagePackagesPayload {
  data: [Package!]!
  filteredCount: Int!
  totalCount: Int!
}

type Package {
  name: String!
  manager: String!
  version: String!
}

type ImageToolchainsPayload {
  data: [Toolchain!]!
  filteredCount: Int!
  totalCount: Int!
}

type Toolchain {
  name: String!
  path: String!
  version: String!
}

type ImageFilesPayload {
  data: [ImageFile!]!
  filteredCount: Int!
  totalCount: Int!
}

type ImageFile {
  name: String!
  path: String!
  version: String!
}

type ImageEvent {
  entries: [ImageEventEntry!]!
  timestamp: Time!
  amiBefore: String
  amiAfter: String!
}

type ImageEventsPayload {
  count: Int!
  eventLogEntries: [ImageEvent!]!
}

type ImageEventEntry {
  name: String!
  after: String!
  before: String!
  type: ImageEventType!
  action: ImageEventEntryAction!
}
