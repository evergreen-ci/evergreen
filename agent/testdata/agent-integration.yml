display_name: evergreen-ci-render
owner: evergreen-ci
repo: render
repokind: github
branch: main
enabled: true
batch_time: 180
stepback: true
oom_tracker: true

functions:
  "list of commands":
     - command: shell.exec
       params:
         script: |
           echo "step 1 of multi-command func"
     - command: shell.exec
       params:
         script: |
           echo "step 2 of multi-command func"
     - command: shell.exec
       params:
         script: |
           echo "step 3 of multi-command func"
  "predefined command test" :
     command: shell.exec
     params:
       shell: "sh"
       script: |
         echo "predefined command!"
  "silent shell test" :
     command: shell.exec
     params:
       silent: true
       script: |
        cat > testfile <<END_OF_HEREDOC
        this should not end up in the logs!
        END_OF_HEREDOC
  "function variant test":
      command: shell.exec
      variants: ["windows8"]
      params:
        script: |
          echo "variant not excluded!"
  "function with arg test" :
     command: shell.exec
     timeout_secs: 1300
     params:
       script: |
         echo "arg1 is ${arg1}"
         echo "arg2 is ${arg2}"
         echo "arg3 is ${arg3}"
         echo "arg4 is ${arg4}"

pre:
  - command: shell.exec
    params:
      script: |
        echo "executing the pre-run script"

post:
  - command: attach.results
    params:
      file_location: src/report.json
  - command: shell.exec
    params:
      script: |
        echo "executing the post-run script!"

timeout:
  - command: shell.exec
    params:
      script: |
        echo "executing the task-timeout script!"
        sleep 5 #for testing callback timeouts

tasks:
- name: aggregation
  commands: ~
- name: compile
  depends_on: []
  commands:
    - func: "predefined command test"
    - func: "silent shell test"
    - func: "function with arg test"
      vars:
        arg1: "FOO"
        arg2: "BAR"
        arg3: "Expanded: ${expandme}"
        arg4: "Default: ${empty|default_value}"
    - func: "list of commands"
      timeout_secs: 2600
    - command: manifest.load
    - command: git.get_project
      params:
        directory: src
        revisions:
          recursive: ${recursive_rev}
    - command: shell.exec
      params:
        working_dir: src
        script: |
            set -o verbose
            set -o errexit
            echo "i am compiling!"
            echo "blah blah compiling"
            cp "README.md" "readme2.md"
            mkdir jstests
            hostname > jstests/hostname.txt
            date +"%m-%d-%y" > jstests/date.txt
            echo "stuff" >> jstests/dont_archive_me_test.pdb
            echo "i am sanity testing!"
            echo ${fetch_key}
            printf "this should be on the same line..."; printf "as this.\n"
            cat doc.go recursive/clone/recursive/doc.go
    - command: archive.targz_pack
      params:
        target: "target.tgz"
        source_dir: "src"
        include:
          - "jstests/**"
          - "readme2.md"
          - "date.txt"
          - "compile_expansions.yml"
          - "*.tgz"
          - "*.zip"
          - "*.exe"
          - "jstests/**"
          - "./test*"
          - "./mongobridge*"
          - "buildscripts/**"
          - "*Example"
          - "*Test"
          - "sharedclient/**"
          - "./**.pdb"
          - "./**.msi"
        exclude_files:
          - "*_test.pdb"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: target.tgz
        remote_file: unittest/blah.tgz
        bucket: mci-test-uploads
        permissions: public-read-write
        content_type: application/tar
        display_name: mongodb_binaries
    - func: "silent shell test"
      type: "system"

- name: normal_task
  depends_on:
  - name: compile
  commands:
    - func: "predefined command test"
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: unittest/blah.tgz
        bucket: mci-test-uploads
        extract_to: src

    - command: shell.exec
      params:
        working_dir: src
        system_log: true
        silent: true
        script: |
            echo "this output should go to the system logs."

    - command: shell.exec
      params:
        working_dir: src
        script: |
            set -o verbose
            set -o errexit
            echo "starting normal_task!"
            echo "here is some log output to stdout"
            cat "readme2.md"
            [ ! -e "jstests/dont_archive_me_test.pdb" ]
            echo "here is some log output to stderr" 1>&2
            echo "done with normal_task!"
            echo '{"results":[' > report.json
            echo '{"status":"success","test_file":"t1", "url":"url","exit_code":0,"start":0, "end":10}' >> report.json
            echo "]}" >> report.json

- name: very_slow_task
  depends_on:
  - name: compile
  commands:
    - command: shell.exec
      params:
        script: |
            set -o verbose
            set -o errexit
            echo "starting very_slow_task!"
            sleep 10000
            echo "done with very slow task!"

- name: failing_task
  depends_on:
  - name: compile
  commands:
    - command: shell.exec
      display_name: "failing shell command"
      type: "system"
      params:
        working_dir: src
        script: |
            set -o verbose
            set -o errexit
            echo "starting failing_task!"
            false
            echo "done with failing" "task!"

- name: timeout_task
  depends_on:
  - name: compile
  commands:
    - command: shell.exec
      timeout_secs: 3
      params:
        script: |
            set -o verbose
            set -o errexit
            echo "starting slow task!"
            sleep 10000
            echo "done with slow" "task!"

- name: print_dir_task 
  depends_on:
  - name: compile
  commands:
    - command: shell.exec
      params:
        script: |
            set -o verbose
            set -o errexit
            echo "printing current directory"
            pwd

- name: exec_timeout_task
  depends_on:
  - name: compile
  exec_timeout_secs: 3
  commands:
    - command: shell.exec
      params:
        script: |
            set -o verbose
            set -o errexit
            echo "starting slow task with output!"
            for i in `seq 1 100`;
            do
                sleep 100
                echo $i
            done
            echo "done with slow" "task with output!"

- name: variant_test
  commands:
    - func: "function variant test"

- name: push
  depends_on:
  - name: "*"
  commands:
    - command: shell.exec
      params:
        script: |
          set -o verbose
          set -o errexit
          ls
          pwd
          echo "push task pre-run!"
          date_exp=`date "+%Y-%m-%d:%H-%M-%S"`
          echo $date_exp | tee -a "unittest-${distro_exp}-${buildvar_exp}.txt"
          echo "file_exp: FILE_EXP" | tee -a compile_expansions.yml
          echo "new_date: $date_exp" | tee -a compile_expansions.yml
    - command: expansions.update
      params:
        file: compile_expansions.yml
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  unittest-${distro_exp}-${buildvar_exp}.txt
        remote_file: pushtest-stage/unittest-${task_id}-${distro_exp}-${buildvar_exp}-${file_exp}.txt
        bucket: build-push-testing
        permissions: public-read-write
        content_type: application/tar
        display_name: push_file
    - command: s3Copy.copy
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        s3_copy_files:
        - source:
            bucket: build-push-testing
            path: pushtest-stage/unittest-${task_id}-${distro_exp}-${buildvar_exp}-${file_exp}.txt
          destination:
            bucket: build-push-testing
            path: pushtest/unittest-${distro_exp}-${buildvar_exp}-${file_exp}-latest.txt
          display_name: copy_file
    - command: shell.exec
      params:
        script: |
          set -o verbose
          set -o errexit
          echo "push task post-run!\n"
          date +"%m-%d-%y" > "unittest-${distro_exp}-${buildvar_exp}.txt"
          echo "file_exp: FILE_EXP" > compile_expansions.yml
modules:
- name: recursive
  repo: git@github.com:evergreen-ci/render.git
  prefix: recursive/clone
  branch: main

#######################################
# Buildvariants
#######################################

buildvariants:

###########################################
#         Linux buildvariants             #
###########################################

- name: linux-64
  display_name: Linux 64-bit
  modules:
  - recursive
  run_on:
  - rhel55
  expansions:
    expandme: "qux"
    buildvar_exp: BUILDVAR_EXP
    push_path: linux
    push_bucket: build-push-testing
    push_name: linux
    push_arch: x86_64
    compile_flags: --sharedclient -j$(grep -c ^processor /proc/cpuinfo) --release
    test_flags: --continue-on-failure
    buildvariant_pushes: true
  tasks: "*"

- name: windows8
  display_name: Windows 8
  modules:
  - recursive
  run_on:
  - rhel55
  expansions:
    expandme: "qux"
    buildvar_exp: BUILDVAR_EXP
    push_path: windows8
    push_bucket: build-push-testing
    push_name: windows8
    push_arch: x86_64
    compile_flags: --sharedclient -j$(grep -c ^processor /proc/cpuinfo) --release
    test_flags: --continue-on-failure
    buildvariant_pushes: true
  tasks: "*"
