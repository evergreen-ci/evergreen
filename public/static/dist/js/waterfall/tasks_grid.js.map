{"version":3,"sources":["../../../app/waterfall/tasks_grid.jsx"],"names":["MaxFailedTestDisplay","endOfPath","input","lastSlash","lastIndexOf","length","substring","taskStatusClass","task","Object","status","activated","task_end_details","type","timed_out","desc","labelFromTask","task_waiting","dispatch_time","Date","stringifyNanoseconds","skipDayMax","skipSecMax","NS_PER_MS","NS_PER_SEC","NS_PER_MINUTE","NS_PER_HOUR","Math","floor","Grid","data","project","collapseInfo","buildVariantFilter","taskFilter","rows","filter","row","build_variant","display_name","toLowerCase","indexOf","map","versions","current_time","filterActiveTasks","tasks","activeStatuses","_","contains","Variant","currentTime","version","i","ids","builds","rolled_up","Build","build","rolledUp","collapsed","activeTasks","activeTaskStatuses","ActiveBuild","InactiveBuild","EmptyBuild","TooltipContent","eta","topLineContent","dur","time_taken","failed_test_names","failed_test_name","CountdownClock","nanosecondsRemaining","tick","bind","countdown","setInterval","clearInterval","ETADisplay","props","componentWillUnmount","update","countdownClock","nsString","getNanosecondsRemaining","state","ETAString","nsRemaining","setState","interval","React","Component","Task","OverlayTrigger","ReactBootstrap","Popover","Tooltip","undefined","getTime","pow","start_time","parse","timeRemaining","expected_duration","clock","tooltip","id","CollapsedBuild","taskStats","taskStatusCount","taskTypes","succeeded","started","undispatched","inactive","failed","pick","count","TaskSummary","id_link","tt","classes"],"mappings":"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","file":"tasks_grid.js","sourcesContent":["const MaxFailedTestDisplay = 5;\n\n// endOfPath strips off all of the begging characters from a file path so that just the file name is left.\nfunction endOfPath(input) {\n  var lastSlash = input.lastIndexOf('/');\n  if (lastSlash === -1 || lastSlash === input.length - 1) {\n    // try to find the index using windows-style filesystem separators\n    lastSlash = input.lastIndexOf('\\\\');\n    if (lastSlash === -1 || lastSlash === input.length - 1) {\n      return input;\n    }\n  }\n  return input.substring(lastSlash + 1);\n}\n\n// taskStatusClass returns the css class that should be associated with a given task so that it can\n// be properly styled.\nfunction taskStatusClass(task) {\n  if (task !== Object(task)) {\n\t  return '';\n  }\n\n  if (task.status == 'undispatched') {\n    if (!task.activated) {\n      return 'inactive';\n    } else {\n      return 'unstarted';\n    }\n  }\n\n  if (task.status == 'failed') {\n    if ('task_end_details' in task) {\n      if ('type' in task.task_end_details && task.task_end_details.type == 'system') {\n         return 'system-failed';\n      }\n      if ('type' in task.task_end_details && task.task_end_details.type == 'setup') {\n         return 'setup-failed';\n      }\n      if (!!task.task_end_details.timed_out && task.task_end_details.desc == 'heartbeat') {\n        return 'system-failed';\n      }\n    }\n    return 'failed';\n  }\n  return task.status;\n}\n\n// labelFromTask returns the human readable label for a task's status given the details of its execution.\nfunction labelFromTask(task){\n  if (task !== Object(task)) {\n\t  return '';\n  }\n\n  if (task.status == 'undispatched') {\n    if (task.activated) {\n      if (task.task_waiting) {\n        return task.task_waiting;\n      }\n      return 'scheduled';\n    } else if (+task.dispatch_time == 0 || (typeof task.dispatch_time == \"string\" && +new Date(task.dispatch_time) <= 0)) {\n       return 'not scheduled';\n    }\n  }\n\n  if (task.status == 'failed' && 'task_end_details' in task){\n    if ('timed_out' in task.task_end_details) {\n      if (task.task_end_details.timed_out && task.task_end_details.desc == 'heartbeat') {\n        return 'system unresponsive';\n      }\n      if (task.task_end_details.type == 'system') {\n        return 'system timed out';\n      }\n      return 'test timed out';\n    }\n    if (task.task_end_details.type == 'system') {\n      return 'system failure';\n    }\n    if (task.task_end_details.type == 'setup') {\n      return 'setup failure';\n    }\n  }\n\n  return task.status;\n}\n\n// stringifyNanoseconds takes an integer count of nanoseconds and\n// returns it formatted as a human readable string, like \"1h32m40s\"\n// If skipDayMax is true, then durations longer than 1 day will be represented\n// in hours. Otherwise, they will be displayed as '>=1 day'\nfunction stringifyNanoseconds(input, skipDayMax, skipSecMax) {\n  var NS_PER_MS = 1000 * 1000; // 10^6\n  var NS_PER_SEC = NS_PER_MS * 1000\n  var NS_PER_MINUTE = NS_PER_SEC * 60;\n  var NS_PER_HOUR = NS_PER_MINUTE * 60;\n\n  if (input == 0) {\n    return \"0 seconds\";\n  } else if (input < NS_PER_MS) {\n    return \"< 1 ms\";\n  } else if (input < NS_PER_SEC) {\n    if (skipSecMax){\n      return Math.floor(input / NS_PER_MS) + \" ms\";\n    } else {\n      return \"< 1 second\"\n    }\n  } else if (input < NS_PER_MINUTE) {\n    return Math.floor(input / NS_PER_SEC) + \" seconds\";\n  } else if (input < NS_PER_HOUR) {\n    return Math.floor(input / NS_PER_MINUTE) + \"m \" + Math.floor((input % NS_PER_MINUTE) / NS_PER_SEC) + \"s\";\n  } else if (input < NS_PER_HOUR * 24 || skipDayMax) {\n    return Math.floor(input / NS_PER_HOUR) + \"h \" +\n        Math.floor((input % NS_PER_HOUR) / NS_PER_MINUTE) + \"m \" +\n        Math.floor((input % NS_PER_MINUTE) / NS_PER_SEC) + \"s\";\n  } else if (input == \"unknown\") {\n    return \"unknown\";\n  }  else {\n    return \">= 1 day\";\n  }\n}\n\n// Grid\n\n// The main class that binds to the root div. This contains all the distros, builds, and tasks\nfunction Grid ({data, project, collapseInfo, buildVariantFilter, taskFilter}) {\n  return (\n    <div className=\"waterfall-grid\">\n      {\n        data.rows.filter(function(row){\n          return row.build_variant.display_name.toLowerCase().indexOf(buildVariantFilter.toLowerCase()) != -1;\n        })\n        .map(function(row){\n          return <Variant row={row} project={project} collapseInfo={collapseInfo} versions={data.versions} taskFilter={taskFilter} currentTime={data.current_time}/>;\n        })\n      }\n    </div> \n  )\n};\n\nfunction filterActiveTasks(tasks, activeStatuses){\n  return _.filter(tasks, function(task) { \n      return _.contains(activeStatuses, task.status);\n    });\n}\n\n// The class for each \"row\" of the waterfall page. Includes the build variant link, as well as the five columns\n// of versions.\nfunction Variant({row, versions, project, collapseInfo, taskFilter, currentTime}) {\n      return (\n      <div className=\"row variant-row\">\n        <div className=\"col-xs-2 build-variants\"> \n          {row.build_variant.display_name}\n        </div>\n        <div className=\"col-xs-10\"> \n          <div className=\"row build-cells\">\n            {\n              versions.map(function(version, i){\n                  return(<div className=\"waterfall-build\">\n                    <Build key={version.ids[0]} \n                                build={row.builds[version.ids[0]]} \n                                rolledUp={version.rolled_up} \n                                collapseInfo={collapseInfo}\n                                taskFilter={taskFilter} \n                                currentTime={currentTime}/>\n                  </div>\n                  );\n              })\n            }\n          </div>\n        </div>\n      </div>\n    )\n}\n\n\n// Each Build class is one group of tasks for an version + build variant intersection\n// We case on whether or not a build is active or not, and return either an ActiveBuild or InactiveBuild respectively\n\nfunction Build({build, collapseInfo, rolledUp, taskFilter, currentTime}){\n  // inactive build\n  if (rolledUp) {\n    return <InactiveBuild/>;\n  }\n\n  // no build for this version\n  if (!build) {\n    return <EmptyBuild />  \n  }\n\n\n  // collapsed active build\n  if (collapseInfo.collapsed) {\n    activeTasks = filterActiveTasks(build.tasks, collapseInfo.activeTaskStatuses);\n    if (activeTasks.length == 0){\n      return (\n        <CollapsedBuild build={build} activeTaskStatuses={collapseInfo.activeTaskStatuses} />\n      )\n    }\n    // Can be modified to show combinations of tasks by statuses  \n    var activeTasks = filterActiveTasks(build.tasks, collapseInfo.activeTaskStatuses)\n    return (\n      <div>\n        <CollapsedBuild build={build} activeTaskStatuses={collapseInfo.activeTaskStatuses} />\n        <ActiveBuild tasks={activeTasks} currentTime={currentTime}/>\n      </div>\n    )\n  } \n  // uncollapsed active build\n  return (\n      <ActiveBuild tasks={build.tasks} taskFilter={taskFilter} currentTime={currentTime}/>\n  )\n}\n\n// At least one task in the version is not inactive, so we display all build tasks with their appropiate colors signifying their status\nfunction ActiveBuild({tasks, taskFilter, currentTime}){  \n\n  if (taskFilter != null){\n    tasks = _.filter(tasks, function(task){\n      return task.display_name.toLowerCase().indexOf(taskFilter.toLowerCase()) != -1;\n    });\n  }\n\n  return (\n    <div className=\"active-build\"> \n      {\n        _.map(tasks, function(task){\n          return <Task task={task} currentTime={currentTime}/>\n        })\n      }\n    </div>\n  )\n}\n\n// All tasks are inactive, so we display the words \"inactive build\"\nfunction InactiveBuild ({}){\n    return (<div className=\"inactive-build\"> inactive build </div>)\n}\n// No build associated with a given version and variant, so we render an empty div\nfunction EmptyBuild ({}){\n    return (<div></div>)\n}\n\nfunction TooltipContent({task, eta}) {\n  var topLineContent = task.display_name + \" - \" + labelFromTask(task);\n  if (task.status == 'success' || task.status == 'failed') {\n    var dur = stringifyNanoseconds(task.time_taken);\n    topLineContent += ' - ' + dur;\n  }\n\n  if (task.status !='failed' || !task.failed_test_names || task.failed_test_names.length == 0) {\n    if (task.status == 'started') {\n      return(\n        <span className=\"waterfall-tooltip\">\n          {topLineContent} - {eta}\n        </span>\n        )\n    }\n    return (\n        <span className=\"waterfall-tooltip\">\n          {topLineContent}\n        </span>\n        )\n  }\n\n  if (task.failed_test_names.length > MaxFailedTestDisplay) {\n    return (\n        <span className=\"waterfall-tooltip\">\n          <span>{topLineContent}</span> \n        <div className=\"header\">\n          <i className=\"fa fa-times icon\"></i>\n          {task.failed_test_names.length} failed tests \n          </div>\n       </span>\n        )\n  }\n  return(\n      <span className=\"waterfall-tooltip\">\n        <span>{topLineContent}</span>\n      <div className=\"failed-tests\">\n        {\n          task.failed_test_names.map(function(failed_test_name){\n            return (\n                <div> \n                 <i className=\"fa fa-times icon\"></i>\n                  {endOfPath(failed_test_name)} \n                </div>\n                )\n          })\n        }\n        </div>\n        </span>\n      )\n}\n\n// CountdownClock is a class that manages decrementing duration every second.\n// It takes as an argument nanosecondsRemaining and begins counting this number\n// down as soon as it is instantiated.\nclass CountdownClock {\n  constructor(nanosecondsRemaining) {\n    this.tick = this.tick.bind(this);\n    this.countdown = setInterval(this.tick, 1000);\n    this.nanosecondsRemaining = nanosecondsRemaining;\n  }\n  tick() {\n    this.nanosecondsRemaining -= 1 * (1000 * 1000 * 1000);\n    if (this.nanosecondsRemaining <= 0) {\n      this.nanosecondsRemaining = 0;\n      clearInterval(this.countdown);\n    }\n  }\n  getNanosecondsRemaining() {\n    return this.nanosecondsRemaining;\n  }\n}\n\n// ETADisplay is a react component that manages displaying a time being\n// counted down. It takes as a prop a CountdownClock, which it uses to fetch\n// the time left in the count down.\nclass ETADisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.tick = this.tick.bind(this);\n    this.componentWillUnmount = this.componentWillUnmount.bind(this);\n\n    this.update = setInterval(this.tick, 1000);\n    this.countdownClock = this.props.countdownClock;\n\n    var nsString = stringifyNanoseconds(this.countdownClock.getNanosecondsRemaining());\n\n    if (this.countdownClock.getNanosecondsRemaining() <= 0) {\n      nsString = 'unknown';\n    }\n    this.state = {\n      ETAString: nsString\n    };\n\n  }\n\n  tick() {\n    var nsRemaining = this.countdownClock.getNanosecondsRemaining();\n    var nsString = stringifyNanoseconds(nsRemaining);\n\n    if (nsRemaining <= 0) {\n      nsString = 'unknown';\n      clearInterval(this.countdown);\n    }\n    this.setState({\n      ETAString: nsString,\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return (<span>ETA: {this.state.ETAString}</span>);\n  }\n}\n\n\n// A Task contains the information for a single task for a build, including the link to its page, and a tooltip\nfunction Task({task, currentTime}) {\n  var OverlayTrigger = ReactBootstrap.OverlayTrigger;\n  var Popover = ReactBootstrap.Popover;\n  var Tooltip = ReactBootstrap.Tooltip;\n  var eta;\n  if (task.status == 'started') {\n    // If currentTime is not set, we're using the angular/react shim in\n    // directives.visualization.js. We therefore need to set currentTime and\n    // convert start_time to what react expects.  This is ugly, and long-term\n    // our strategy should be to rewrite the version page in pure react.\n    if (currentTime === undefined) {\n      currentTime = new Date().getTime() * Math.pow(1000, 2);\n      task.start_time = Date.parse(task.start_time) * Math.pow(1000, 2);\n    }\n\n    var timeRemaining = task.expected_duration - (currentTime - task.start_time);\n    var clock = new CountdownClock(timeRemaining);\n    var eta = (<ETADisplay countdownClock={clock} />);\n  }\n  var tooltip = (\n      <Tooltip id=\"tooltip\">\n        <TooltipContent task={task}  eta={eta}/>\n      </Tooltip>\n      )\n  return (\n    <OverlayTrigger placement=\"top\" overlay={tooltip} animation={false}>\n      <a href={\"/task/\" + task.id} className={\"waterfall-box \" + taskStatusClass(task)} />  \n    </OverlayTrigger>\n  )\n}\n\n// A CollapsedBuild contains a set of PartialProgressBars, which in turn make up a full progress bar\n// We iterate over the 5 different main types of task statuses, each of which have a different color association\nfunction CollapsedBuild({build, activeTaskStatuses}){\n  var taskStats = build.taskStatusCount;\n\n  var taskTypes = {\n    \"success\"      : taskStats.succeeded, \n    \"dispatched\"   : taskStats.started, \n    \"system-failed\": taskStats.timed_out,\n    \"undispatched\" : taskStats.undispatched, \n    \"inactive\"     : taskStats.inactive,\n    \"failed\"       : taskStats.failed,\n  };\n\n  // Remove all task summaries that have 0 tasks\n  taskTypes = _.pick(taskTypes, function(count, status){\n    return count > 0 && !(_.contains(activeTaskStatuses, status))\n  });\n  \n  return (\n    <div className=\"collapsed-build\">\n      {\n        _.map(taskTypes, function(count, status) {\n          return <TaskSummary status={status} count={count} build={build} />;\n        }) \n      }\n    </div>\n  )\n}\n\n// A TaskSummary is the class for one rolled up task type\n// A CollapsedBuild is comprised of an  array of contiguous TaskSummaries below individual failing tasks \nfunction TaskSummary({status, count, build}){\n  var id_link = \"/build/\" + build.id;\n  var OverlayTrigger = ReactBootstrap.OverlayTrigger;\n  var Popover = ReactBootstrap.Popover;\n  var Tooltip = ReactBootstrap.Tooltip;\n  var tt = <Tooltip id=\"tooltip\">{count} {status}</Tooltip>;\n  var classes = \"task-summary \" + status\n  return (\n    <OverlayTrigger placement=\"top\" overlay={tt} animation={false}>\n      <a href={id_link} className={classes}>\n        {count}\n      </a>\n    </OverlayTrigger>\n  )\n}\n"]}