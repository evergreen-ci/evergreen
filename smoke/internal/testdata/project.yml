# This project YAML is used to run the smoke test.

command_type: test
stepback: false

task_groups:
  - name: host_smoke_test_task_group
    max_hosts: 1
    setup_group:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "smoke test is running the setup group"
    teardown_group:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "smoke test is running the teardown group"
    setup_task:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "smoke test is running the setup task"
    teardown_task:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "smoke test is running the teardown task"
    tasks:
      - host_smoke_test_first_task_in_task_group
      - host_smoke_test_second_task_in_task_group
      - host_smoke_test_commands
      - host_smoke_test_third_task_in_task_group
      - host_smoke_test_fourth_task_in_task_group

tasks:
  - name: host_smoke_test_first_task_in_task_group
    commands:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "smoke test is running the first task in the task group"
  - name: host_smoke_test_second_task_in_task_group
    commands:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "smoke test is running the second task in the task group"
  - name: host_smoke_test_third_task_in_task_group
    commands:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "smoke test is running the third task in the task group"
  - name: host_smoke_test_fourth_task_in_task_group
    commands:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "smoke test is running the fourth task in the task group"
  - name: host_smoke_test_generate_task
    commands:
      - command: git.get_project
        params:
          directory: src
          token: "token foo"
      - command: generate.tasks
        params:
          files:
            - smoke/internal/testdata/generate-tasks.json
  - name: host_smoke_test_commands
    commands:
      - command: git.get_project
        params:
          directory: src
          token: "token foo"
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "hi"

            # files to archive.targz_pack
            mkdir archive
            touch archive/a_to_archive
            touch archive/b_to_archive

            # file to s3.put
            mkdir upload
            echo ${task_name} > upload/s3

            # miscellaneous files written by commands
            mkdir output
      - command: subprocess.exec
        params:
          working_dir: archive
          binary: /bin/bash
          args:
            - "-c"
            - "touch foo"
      - command: subprocess.exec
        params:
          working_dir: archive
          command: "/usr/bin/touch bar"
      - command: archive.targz_pack
        params:
          target: "archive.tgz"
          source_dir: "archive"
          include:
            - "*_to_archive"
      - command: archive.targz_extract
        params:
          path: "archive.tgz"
          destination: "output"
      - command: archive.zip_pack
        params:
          target: "archive.zip"
          source_dir: "archive"
          include:
            - "*_to_archive"
      - command: archive.zip_extract
        params:
          path: "archive.zip"
          destination: "output"
      - command: archive.auto_extract
        params:
          path: "archive.zip"
          destination: "output"
      - command: archive.auto_extract
        params:
          path: "archive.tgz"
          destination: "output"
      - command: attach.results
        params:
          file_location: "src/agent/command/testdata/attach/plugin_attach_results.json"
      - command: attach.xunit_results
        params:
          file: "src/agent/command/testdata/xunit/junit_4.xml"
      - command: expansions.update
        params:
          updates:
            - key: foo
              value: bar
      - command: expansions.write
        display_name: "Test expansions.write"
        params:
          file: output/expansions.yaml
      - command: subprocess.exec
        display_name: "Check updated expansions are in written expansions file"
        params:
          command: grep "foo.*bar" output/expansions.yaml
      - command: gotest.parse_files
        params:
          files:
            - "src/agent/command/testdata/gotest/4_simple.log"
      - command: keyval.inc
        params:
          key: "test"
          destination: "test_num"
      - command: downstream_expansions.set
        params:
          file: "src/scripts/downstream_expansions.yml"
          destination: "test_num"
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: upload/s3
          remote_file: evergreen/smoke/${build_id}-${build_variant}/evergreen-${task_name}-${revision}
          bucket: mciuploads
          optional: "true"
          content_type: text/html
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: upload/s3
          remote_file: evergreen/smoke/${build_id}-${build_variant}/evergreen-${task_name}-${revision}
          bucket: mciuploads
          optional: true
          content_type: text/html
          permissions: public-read
      - command: s3.get
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          remote_file: evergreen/smoke/${build_id}-${build_variant}/evergreen-${task_name}-${revision}
          bucket: mciuploads
          local_file: upload/s3-get
      - command: s3Copy.copy
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          s3_copy_files:
            - source:
                path: "evergreen/smoke/${build_id}-${build_variant}/evergreen-${task_name}-${revision}"
                bucket: mciuploads
              destination:
                path: "evergreen/smoke/${build_id}-${build_variant}/evergreen-${task_name}-${revision}-copy"
                bucket: mciuploads
      - command: timeout.update
        params:
          timeout_secs: 2700
  # TODO (EVG-17658): changing the smoke container task will cause the smoke test to break unless you very carefully and
  # manually modify the smoke test's testdata. EVG-17658 is intended to address this issue.
  - name: container-task
    commands:
      - command: shell.exec
        params:
          script: |
            set -o verbose
            set -o errexit
            echo "container task"

buildvariants:
  - name: localhost
    display_name: Host smoke test
    run_on:
      - localhost
    patch_only: true
    tasks:
      - name: host_smoke_test_task_group
      - name: host_smoke_test_generate_task
  # TODO (EVG-17658): changing the smoke container task will cause the smoke test to break unless you very carefully and
  # manually modify the smoke test's testdata. EVG-17658 is intended to address this issue.
  - name: pod_bv
    display_name: Container smoke test
    run_on:
      - container
    tasks:
      - name: container-task

# TODO (EVG-17658): Refactor smoke tests to allow for faking agent creation
# The following configuration is currently unused since the container task
# smoke test does not rely on the repotracker job to create tasks for the version.
# A real image will be used as a part of the above ticket.
containers:
  - name: container
    working_dir: /
    image: "fake_smoke_test_image"
    resources:
      cpu: 1024
      memory_mb: 1024
    system:
      cpu_architecture: x86_64
      operating_system: linux
