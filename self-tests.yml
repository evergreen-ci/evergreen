command_type: test
loggers:
  task:
    - type: evergreen
    - type: file
  agent:
    - type: evergreen
  system:
    - type: evergreen
stepback: true
ignore:
    - "*.md" # don't schedule tests if a commit only changes markdown files
    - "scripts/*" # our scripts are untested, so don't schedule tests for them
    - ".github/*" # github CODEOWNERS configuration

post:
  - func: attach-test-results
  - command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter: ["gopath/src/github.com/evergreen-ci/evergreen/bin/output.*.coverage.html"]
      remote_file: evergreen/${task_id}/
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: "(html) coverage:"
  - command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter: ["gopath/src/github.com/evergreen-ci/evergreen/bin/output.*.coverage"]
      remote_file: evergreen/${task_id}/
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read
      display_name: "(txt) coverage:"


#######################################
#         YAML Templates              #
#######################################
variables:
  - &run-build
    # runs a build operations. The task name in evergreen should
    # correspond to a make target for the build operation.
    name: test
    commands:
      - func: get-project
      - func: run-make
        vars: { target: "${task_name}" }
      - command: s3.put
        type: system
        params:
          optional: true
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: gopath/src/github.com/evergreen-ci/evergreen/bin/${task_name}.tar.gz
          remote_file: evergreen/${build_id}-${build_variant}/evergreen-${task_name}-${revision}.tar.gz
          bucket: mciuploads
          content_type: application/x-gzip
          permissions: public-read
          display_name: dist.tar.gz
  - &run-go-test-suite
    # runs a make target and then uploads gotest output to
    # evergreen. The test name should correspond to a make target for
    # that suite
    name: test
    commands:
      - func: get-project
      - func: set-up-credentials
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "${task_name}" }
  - &run-go-test-suite-with-docker
    name: test
    commands:
      - func: get-project
      - func: set-up-credentials
      - func: set-up-mongodb
      - func: setup-docker-host
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "${task_name}" }
  - &run-go-test-suite-with-mongodb
    # runs a make target above, but only on systems that have a
    # running mongod started for testing.
    name: test
    commands:
      - func: get-project
      - func: set-up-credentials
      - func: set-up-mongodb
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "${task_name}" }
  - &run-smoke-test
    name: smoke
    commands:
      - command: timeout.update
        params:
          exec_timeout_secs: 900
          timeout_secs: 900
      - func: get-project
      - func: set-up-mongodb
      - func: run-make
        vars: { target: "set-var" }
      - func: run-make
        vars: { target: "set-project-var" }
      - func: run-make
        vars: { target: "load-smoke-data" }
      - command: subprocess.exec
        params:
          silent: true
          working_dir: gopath/src/github.com/evergreen-ci/evergreen
          command: bash scripts/setup-smoke-config.sh ${github_token}
      - func: run-make
        vars:
          target: set-smoke-vars
      - func: run-make
        vars:
          target: "${task_name}"
  - &version-constants
    nodejs_version: "6.11.1"
  - &run-generate-lint
    name: generate-lint
    commands:
      - func: get-project
      - func: run-make
        vars: { target: "${task_name}" }
      - command: s3.put
        type: system
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: gopath/src/github.com/evergreen-ci/evergreen/bin/generate-lint.json
          remote_file: evergreen/${build_id}-${build_variant}/bin/generate-lint.json
          bucket: mciuploads
          content_type: application/json
          permissions: public-read
          display_name: generate-lint.json
      - command: generate.tasks
        params:
          files:
            - gopath/src/github.com/evergreen-ci/evergreen/bin/generate-lint.json

#######################################
#              Functions              #
#######################################
functions:
  get-project:
    command: git.get_project
    type: setup
    params:
      directory: gopath/src/github.com/evergreen-ci/evergreen
      token: ${github_token}
  run-make:
    command: subprocess.exec
    params:
      working_dir: gopath/src/github.com/evergreen-ci/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      env:
        AWS_KEY: ${aws_key}
        AWS_SECRET: ${aws_secret}
        DEBUG_ENABLED: ${debug}
        DISABLE_COVERAGE: ${disable_coverage}
        DOCKER_HOST: ${docker_host}
        EVERGREEN_ALL: "true"
        GOARCH: ${goarch}
        GO_BIN_PATH: ${gobin}
        GOOS: ${goos}
        GOPATH: ${workdir}/gopath
        GOROOT: ${goroot}
        KARMA_REPORTER: junit
        NODE_BIN_PATH: ${nodebin}
        RACE_DETECTOR: ${race_detector}
        SETTINGS_OVERRIDE: creds.yml
        TEST_TIMEOUT: ${test_timeout}
        VENDOR_PKG: "github.com/${trigger_repo_owner}/${trigger_repo_name}"
        VENDOR_REVISION: ${trigger_revision}
        XC_BUILD: ${xc_build}
  set-up-credentials:
    command: subprocess.exec
    type: setup
    params:
      silent: true
      working_dir: gopath/src/github.com/evergreen-ci/evergreen
      env:
        GITHUB_TOKEN: ${github_token}
        JIRA_SERVER: ${jiraserver}
        CROWD_SERVER: ${crowdserver}
        CROWD_USER: ${crowduser}
        CROWD_PW: ${crowdpw}
        AWS_KEY: ${aws_key}
        AWS_SECRET: ${aws_secret}
      command: bash scripts/setup-credentials.sh
  set-up-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          MONGODB_URL: ${mongodb_url}
          DECOMPRESS: ${decompress}
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen
        command: make check-mongod
  setup-docker-host:
    - command: host.create
      type: setup
      params:
        distro: archlinux-parent
        provider: ec2
        retries: 3
        scope: build
        security_group_ids:
          - sg-097bff6dd0d1d31d0
    - command: host.list
      type: setup
      params:
        wait: true
        timeout_seconds: 900
        num_hosts: 1
        path: gopath/src/github.com/evergreen-ci/evergreen/spawned_hosts.json
    - command: subprocess.exec
      type: setup
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen
        command: make parse-host-file
        env:
          HOST_FILE: spawned_hosts.json
    - command: expansions.update
      params:
        file: gopath/src/github.com/evergreen-ci/evergreen/bin/expansions.yml

  attach-test-results:
    - command: gotest.parse_files
      type: system
      params:
        files:
          - "gopath/src/github.com/evergreen-ci/evergreen/bin/output.*"
    - command: attach.xunit_results
      type: system
      params:
        files:
          - "gopath/src/github.com/evergreen-ci/evergreen/bin/jstests/*.xml"
  remove-test-results:
    - command: shell.exec
      type: system
      params:
        shell: bash
        script: |
          set -o xtrace
          rm gopath/src/github.com/evergreen-ci/evergreen/bin/output.*
          rm gopath/src/github.com/evergreen-ci/evergreen/bin/jstests/*.xml

#######################################
#                Tasks                #
#######################################

tasks:
  - name: coverage
    tags: [ "report" ]
    commands:
      - func: get-project
      - func: set-up-credentials
      - func: set-up-mongodb
      - func: run-make
        vars:
          target: "coverage-html"
          make_args: "-k"
  - <<: *run-smoke-test
    name: smoke-test-task
    tags: ["smoke"]
  - <<: *run-smoke-test
    name: smoke-test-endpoints
    tags: ["smoke"]
  - <<: *run-generate-lint

  - <<: *run-go-test-suite
    name: js-test
  - <<: *run-build
    name: dist
  - <<: *run-go-test-suite
    tags: ["nodb", "test"]
    name: test-auth
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-rest-route
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test", "agent"]
    name: test-rest-client
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-rest-model
  - <<: *run-go-test-suite-with-mongodb
    tags: ["test", "db", "agent"]
    name: test-command
  - <<: *run-go-test-suite-with-mongodb
    tags: ["test", "db"]
    name: test-units
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test", "agent"]
    name: test-agent
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-rest-data
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test", "cli"]
    name: test-operations
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-db
  - <<: *run-go-test-suite-with-docker
    tags: ["db", "test"]
    name: test-cloud
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-repotracker
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-scheduler
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-service
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-monitor
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-evergreen
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test", "agent"]
    name: test-thirdparty
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-trigger
  - <<: *run-go-test-suite-with-mongodb
    tags: ["nodb", "test", "agent"]
    name: test-util
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-validator
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-alertrecord
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-artifact
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-build
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-event
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-host
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-notification
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-patch
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-stats
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-task
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-testresult
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-user
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-distro
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-commitqueue
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-plugin
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-migrations


buildvariants:
  - name: ubuntu1604
    display_name: Ubuntu 16.04
    run_on:
      - ubuntu1604-test
    expansions:
      gobin: /opt/go1.8/go/bin/go
      disable_coverage: yes
      goroot: /opt/go1.8/go
      mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-4.0.3.tgz
    tasks:
      - name: "dist"
      - name: ".smoke"
      - name: ".test"
      - name: "js-test"

  - name: ubuntu1604-docker
    display_name: Ubuntu 16.04 (Docker)
    run_on:
      - ubuntu1604-container
    expansions:
      goos: linux
      gobin: /opt/go1.8/go/bin/go
      goroot: /opt/go1.8/go
      mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.3.tgz
      test_timeout: 15m
      nodebin: /opt/node/bin
    tasks:
      - name: "dist"
      - name: ".smoke"
      - name: ".test"
      - name: "js-test"

  - name: race-detector
    display_name: Race Detector
    run_on:
      - archlinux-test
    expansions:
      mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.3.tgz
      race_detector: true
      test_timeout: 15m
    tasks:
      - name: "dist"
      - name: ".test"

  - name: lint
    display_name: Lint
    run_on:
      - archlinux-test
    tasks:
      - name: generate-lint

  - name: coverage
    display_name: Coverage
    run_on:
      - archlinux-test
    expansions:
      mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.3.tgz
      test_timeout: 15m
    tasks:
      - name: ".report"
        stepback: false

  - name: osx
    display_name: OSX
    batchtime: 2880
    run_on:
      - macos-1012
    expansions:
      disable_coverage: yes
      gobin: /usr/local/go1.8/go/bin/go
      goroot: /usr/local/go1.8/go
      mongodb_url: https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.3.tgz
    tasks:
      - name: "dist"
      - name: ".test"

  - name: windows
    display_name: Windows
    run_on:
      - windows-64-vs2015-small
    expansions:
      disable_coverage: yes
      gobin: /cygdrive/c/go1.8/go/bin/go
      goroot: c:/go1.8/go
      mongodb_url: https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-4.0.3.zip
      extension: ".exe"
      archiveExt: ".zip"
    tasks:
      - name: ".agent .test"
      - name: ".cli .test"

  - name: rhel71-power8
    display_name: RHEL 7.1 POWER8
    batchtime: 2880
    run_on:
      - rhel71-power8-test
    expansions:
      disable_coverage: yes
      xc_build: yes
      goarch: ppc64le
      gobin: /opt/go1.8/go/bin/go
      goos: linux
      goroot: /opt/go1.8/go
      mongodb_url: https://downloads.mongodb.com/linux/mongodb-linux-ppc64le-enterprise-rhel71-4.0.3.tgz
    tasks:
      - name: ".agent .test"

  - name: rhel72-s390x
    display_name: RHEL 7.2 zLinux
    batchtime: 2880
    run_on:
      - rhel72-zseries-test
    expansions:
      xc_build: yes
      disable_coverage: yes
      goarch: s390x
      gobin: /opt/go1.8/go/bin/go
      goos: linux
      goroot: /opt/go1.8/go
      # No official release of 4.0 for rhel72 zseries
      mongodb_url: https://downloads.mongodb.com/linux/mongodb-linux-s390x-enterprise-rhel72-3.6.4.tgz
    tasks:
      - name: ".agent .test"

  - name: ubuntu1604-arm64
    display_name: Ubuntu 16.04 ARM
    batchtime: 2880
    run_on:
      - ubuntu1604-arm64-small
    expansions:
      disable_coverage: yes
      xc_build: yes
      goarch: arm64
      goos: linux
      gobin: /opt/go1.8/go/bin/go
      goroot: /opt/go1.8/go
      mongodb_url: https://downloads.mongodb.com/linux/mongodb-linux-arm64-enterprise-ubuntu1604-4.0.3.tgz
    tasks:
      - name: ".agent .test"
